diff -rupN API/class.caction.php classes/class.caction.php
--- API/class.caction.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.caction.php	2010-03-29 19:22:45.000000000 +0200
@@ -914,72 +914,5 @@ COpt::memoryPick();
 			return false;
 		}
 	}
-
-	public static function action_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-            'status' => null,
-            'enable' => null,
-            'hostid' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-        
-        if(!is_null($options['status'])&&
-                (!is_null($options['hostid']))){
-                $sql="select actionid from conditions where actionid in (36) and conditiontype=1 and operator=1 and value='".$options['hostid']."'";
-
-            $res = DBselect($sql);
-            $resultado = array();
-            $colum = array();
-
-
-            $colum = DBfetch($res);
-            if ($colum>0) {
-                $resultado['status']="Desactivado";
-            } else {
-                $resultado['status']="Activado";
-            }
-                
-
-        } 
-        else if (!is_null($options['enable'])&&
-                (!is_null($options['hostid']))){
-
-
-                if($options['enable']=="false"){
-
-                $conditionid = get_dbid("conditions","conditionid");
-
-                $sql="insert into conditions (conditionid,actionid,conditiontype,operator,value) values (".$conditionid.",36,1,1,'".$options['hostid']."')";
-                DBexecute($sql);
-
-                } else if ($options['enable']=="true"){
-
-                $sql="delete from conditions where actionid in (36) and conditiontype=1 and operator=1 and value='".$options['hostid']."'";
-
-                DBexecute($sql);
-
-                }
-
-
-        }
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-	}
-
-
-	
-
 }
 ?>
diff -rupN API/class.cevent.php classes/class.cevent.php
--- API/class.cevent.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.cevent.php	2010-03-29 19:22:45.000000000 +0200
@@ -648,49 +648,6 @@ class CEvent extends CZBXAPI{
 	}
 
 
-	public static function event_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-            'clock' => null,
-            'triggerid' => null
-        );
-
-        if(!is_null($options['clock'])&&
-                (!is_null($options['triggerid']))){
-
-        $sql = "select * from events where (objectid=".$options['triggerid'].")&&(clock=".
-                        $options['clock'].")";
-            
-        $res = DBselect($sql);
-        $i=0;
-
-        $resultado = array();
-        $colum = array();
-
-
-
-        while ($colum=DBfetch($res)) {
-                        $resultado[$i]= $colum;
-                        $i=$i+1;
-        }
-
-
-        } 
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-}
-
-
 
 }
 ?>
diff -rupN API/class.chost.bak.php classes/class.chost.bak.php
--- API/class.chost.bak.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.chost.bak.php	1970-01-01 01:00:00.000000000 +0100
@@ -1,1696 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CHost class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Hosts
- */
-class CHost extends CZBXAPI{
-/**
- * Get Host data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['nodeids'] Node IDs
- * @param array $options['groupids'] HostGroup IDs
- * @param array $options['hostids'] Host IDs
- * @param boolean $options['monitored_hosts'] only monitored Hosts
- * @param boolean $options['templated_hosts'] include templates in result
- * @param boolean $options['with_items'] only with items
- * @param boolean $options['with_monitored_items'] only with monitored items
- * @param boolean $options['with_historical_items'] only with historical items
- * @param boolean $options['with_triggers'] only with triggers
- * @param boolean $options['with_monitored_triggers'] only with monitored triggers
- * @param boolean $options['with_httptests'] only with http tests
- * @param boolean $options['with_monitored_httptests'] only with monitored http tests
- * @param boolean $options['with_graphs'] only with graphs
- * @param boolean $options['editable'] only with read-write permission. Ignored for SuperAdmins
- * @param int $options['extendoutput'] return all fields for Hosts
- * @param boolean $options['select_groups'] select HostGroups
- * @param boolean $options['select_templates'] select Templates
- * @param boolean $options['select_items'] select Items
- * @param boolean $options['select_triggers'] select Triggers
- * @param boolean $options['select_graphs'] select Graphs
- * @param boolean $options['select_applications'] select Applications
- * @param boolean $options['select_macros'] select Macros
- * @param boolean $options['select_profile'] select Profile
- * @param int $options['count'] count Hosts, returned column name is rowscount
- * @param string $options['pattern'] search hosts by pattern in Host name
- * @param string $options['extend_pattern'] search hosts by pattern in Host name, ip and DNS
- * @param int $options['limit'] limit selection
- * @param string $options['sortfield'] field to sort by
- * @param string $options['sortorder'] sort order
- * @return array|boolean Host data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$nodeCheck = false;
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-
-		$sort_columns = array('hostid', 'host', 'status', 'dns', 'ip'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND, API_OUTPUT_CUSTOM); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select' => array('hosts' => 'h.hostid'),
-			'from' => array('hosts h'),
-			'where' => array(),
-			'group' => array(),
-			'order' => array(),
-			'limit' => null);
-
-		$def_options = array(
-			'nodeids'					=> null,
-			'groupids'					=> null,
-			'hostids'					=> null,
-			'userid'					=> null,
-			'templateids'				=> null,
-			'itemids'					=> null,
-			'triggerids'				=> null,
-			'graphids'					=> null,
-			'monitored_hosts'			=> null,
-			'templated_hosts'			=> null,
-			'proxy_hosts'				=> null,
-			'with_items'				=> null,
-			'with_monitored_items'		=> null,
-			'with_historical_items'		=> null,
-			'with_triggers'				=> null,
-			'with_monitored_triggers'	=> null,
-			'with_httptests'			=> null,
-			'with_monitored_httptests'	=> null,
-			'with_graphs'				=> null,
-			'editable'					=> null,
-			'nopermissions'				=> null,
-// filter
-			'filter'					=> null,
-			'pattern'					=> '',
-			'extend_pattern'			=> null,
-
-// OutPut
-			'output'					=> API_OUTPUT_REFER,
-			'extendoutput'				=> null,
-			'select_groups'				=> null,
-			'select_templates'			=> null,
-			'select_items'				=> null,
-			'select_triggers'			=> null,
-			'select_graphs'				=> null,
-			'select_applications'		=> null,
-			'select_macros'				=> null,
-			'select_profile'			=> null,
-			'countOutput'				=> null,
-			'groupCount'				=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null,
-			'limitSelects'				=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-		if(!is_null($options['userid'])){
-			$USER_DETAILS['userid']=$options['userid'];
-			$USER_DETAILS['type']=1;
-			$user_type = $USER_DETAILS['type'];
-			$userid = $USER_DETAILS['userid'];
-		}
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_groups'])){
-				$options['select_groups'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_templates'])){
-				$options['select_templates'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_triggers'])){
-				$options['select_triggers'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_graphs'])){
-				$options['select_graphs'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_applications'])){
-				$options['select_applications'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_macros'])){
-				$options['select_macros'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_profile'])){
-				$options['select_profile'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-		if(is_array($options['output'])){
-			unset($sql_parts['select']['hosts']);
-			foreach($options['output'] as $key => $field){
-				$sql_parts['select'][$field] = ' h.'.$field;
-			}
-
-			$options['output'] = API_OUTPUT_CUSTOM;
-		}
-
-// editable + PERMISSION CHECK
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable'] ? PERM_READ_WRITE : PERM_READ_ONLY;
-
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['from']['r'] = 'rights r';
-			$sql_parts['from']['ug'] = 'users_groups ug';
-			$sql_parts['where']['hgh'] = 'hg.hostid=h.hostid';
-			$sql_parts['where'][] = 'r.id=hg.groupid ';
-			$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-			$sql_parts['where'][] = 'ug.userid='.$userid;
-			$sql_parts['where'][] = 'r.permission>='.$permission;
-			$sql_parts['where'][] = 'NOT EXISTS( '.
-									' SELECT hgg.groupid '.
-									' FROM hosts_groups hgg, rights rr, users_groups gg '.
-									' WHERE hgg.hostid=hg.hostid '.
-										' AND rr.id=hgg.groupid '.
-										' AND rr.groupid=gg.usrgrpid '.
-										' AND gg.userid='.$userid.
-										' AND rr.permission<'.$permission.')';
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['where'][] = DBcondition('hg.groupid', $options['groupids']);
-			$sql_parts['where']['hgh'] = 'hg.hostid=h.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['groupid'] = 'hg.groupid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('hg.groupid', $nodeids);
-			}
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-			$sql_parts['where']['hostid'] = DBcondition('h.hostid', $options['hostids']);
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-			}
-		}
-
-// templateids
-		if(!is_null($options['templateids'])){
-			zbx_value2array($options['templateids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['templateid'] = 'ht.templateid';
-			}
-
-			$sql_parts['from']['ht'] = 'hosts_templates ht';
-			$sql_parts['where'][] = DBcondition('ht.templateid', $options['templateids']);
-			$sql_parts['where']['hht'] = 'h.hostid=ht.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['templateid'] = 'ht.templateid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('ht.templateid', $nodeids);
-			}
-		}
-
-// itemids
-		if(!is_null($options['itemids'])){
-			zbx_value2array($options['itemids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['itemid'] = 'i.itemid';
-			}
-
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('i.itemid', $options['itemids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('i.itemid', $nodeids);
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['triggerid'] = 'f.triggerid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('f.triggerid', $options['triggerids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('f.triggerid', $nodeids);
-			}
-		}
-
-// graphids
-		if(!is_null($options['graphids'])){
-			zbx_value2array($options['graphids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['graphid'] = 'gi.graphid';
-			}
-
-			$sql_parts['from']['gi'] = 'graphs_items gi';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('gi.graphid', $options['graphids']);
-			$sql_parts['where']['igi'] = 'i.itemid=gi.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('gi.graphid', $nodeids);
-			}
-		}
-
-// node check !!!!!
-// should last, after all ****IDS checks
-		if(!$nodeCheck){
-			$nodeCheck = true;
-			$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-		}
-
-// monitored_hosts, templated_hosts
-		if(!is_null($options['monitored_hosts'])){
-			$sql_parts['where']['status'] = 'h.status='.HOST_STATUS_MONITORED;
-		}
-		else if(!is_null($options['templated_hosts'])){
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_MONITORED.','.HOST_STATUS_NOT_MONITORED.','.HOST_STATUS_TEMPLATE.')';
-		}
-		else if(!is_null($options['proxy_hosts'])){
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_PROXY.')';
-		}
-		else{
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_MONITORED.','.HOST_STATUS_NOT_MONITORED.')';
-		}
-
-// with_items, with_monitored_items, with_historical_items
-		if(!is_null($options['with_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid )';
-		}
-		else if(!is_null($options['with_monitored_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid AND i.status='.ITEM_STATUS_ACTIVE.')';
-		}
-		else if(!is_null($options['with_historical_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid AND (i.status='.ITEM_STATUS_ACTIVE.' OR i.status='.ITEM_STATUS_NOTSUPPORTED.') AND i.lastvalue IS NOT NULL)';
-		}
-
-// with_triggers, with_monitored_triggers
-		if(!is_null($options['with_triggers'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT i.itemid '.
-					' FROM items i, functions f, triggers t '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.itemid=f.itemid '.
-						' AND f.triggerid=t.triggerid)';
-		}
-		else if(!is_null($options['with_monitored_triggers'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT i.itemid '.
-					' FROM items i, functions f, triggers t '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.status='.ITEM_STATUS_ACTIVE.
-						' AND i.itemid=f.itemid '.
-						' AND f.triggerid=t.triggerid '.
-						' AND t.status='.TRIGGER_STATUS_ENABLED.')';
-		}
-
-// with_httptests, with_monitored_httptests
-		if(!is_null($options['with_httptests'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT a.applicationid '.
-					' FROM applications a, httptest ht '.
-					' WHERE a.hostid=h.hostid '.
-						' AND ht.applicationid=a.applicationid)';
-		}
-		else if(!is_null($options['with_monitored_httptests'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT a.applicationid '.
-					' FROM applications a, httptest ht '.
-					' WHERE a.hostid=h.hostid '.
-						' AND ht.applicationid=a.applicationid '.
-						' AND ht.status='.HTTPTEST_STATUS_ACTIVE.')';
-		}
-
-// with_graphs
-		if(!is_null($options['with_graphs'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT DISTINCT i.itemid '.
-					' FROM items i, graphs_items gi '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.itemid=gi.itemid)';
-		}
-
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['hosts'] = 'h.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('count(DISTINCT h.hostid) as rowscount');
-
-//groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// pattern
-		if(!zbx_empty($options['pattern'])){
-			if($options['extend_pattern']){
-				$sql_parts['where'][] = ' ( '.
-											'UPPER(h.host) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%').' OR '.
-											'h.ip LIKE '.zbx_dbstr('%'.$options['pattern'].'%').' OR '.
-											'UPPER(h.dns) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%').
-										' ) ';
-			}
-			else{
-				$sql_parts['where']['host'] = ' UPPER(h.host) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%');
-			}
-		}
-
-// filter
-		if(!is_null($options['filter'])){
-			zbx_value2array($options['filter']);
-
-			if(isset($options['filter']['hostid']) && !is_null($options['filter']['hostid'])){
-				$sql_parts['where']['hostid'] = 'h.hostid='.$options['filter']['hostid'];
-			}
-
-			if(isset($options['filter']['host']) && !is_null($options['filter']['host'])){
-				zbx_value2array($options['filter']['host']);
-
-				$sql_parts['where']['host'] = DBcondition('h.host', $options['filter']['host'], false, true);
-			}
-
-			if(isset($options['filter']['maintenance_status']) && !is_null($options['filter']['maintenance_status'])){
-				zbx_value2array($options['filter']['maintenance_status']);
-				$sql_parts['where']['maintenance_status'] = DBcondition('h.maintenance_status', $options['filter']['maintenance_status']);
-			}
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][$options['sortfield']] = 'h.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('h.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('h.*', $sql_parts['select'])){
-				$sql_parts['select'][$options['sortfield']] = 'h.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-------
-
-
-		$hostids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['group'] = array_unique($sql_parts['group']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_group = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['group']))		$sql_where.= ' GROUP BY '.implode(',',$sql_parts['group']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT DISTINCT '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.$sql_where.
-				$sql_group.
-				$sql_order;
- //SDI($sql);
-		$res = DBselect($sql, $sql_limit);
-		while($host = DBfetch($res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $host;
-				else
-					$result = $host['rowscount'];
-			}
-			else{
-				$hostids[$host['hostid']] = $host['hostid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$host['hostid']] = array('hostid' => $host['hostid']);
-				}
-				else{
-					if(!isset($result[$host['hostid']])) $result[$host['hostid']]= array();
-
-					if(!is_null($options['select_groups']) && !isset($result[$host['hostid']]['groups'])){
-						$result[$host['hostid']]['groups'] = array();
-					}
-
-					if(!is_null($options['select_templates']) && !isset($result[$host['hostid']]['templates'])){
-						$result[$host['hostid']]['templates'] = array();
-					}
-
-					if(!is_null($options['select_items']) && !isset($result[$host['hostid']]['items'])){
-						$result[$host['hostid']]['items'] = array();
-					}
-					if(!is_null($options['select_profile']) && !isset($result[$host['hostid']]['profile'])){
-						$result[$host['hostid']]['profile'] = array();
-						$result[$host['hostid']]['profile_ext'] = array();
-					}
-
-					if(!is_null($options['select_triggers']) && !isset($result[$host['hostid']]['triggers'])){
-						$result[$host['hostid']]['triggers'] = array();
-					}
-
-					if(!is_null($options['select_graphs']) && !isset($result[$host['hostid']]['graphs'])){
-						$result[$host['hostid']]['graphs'] = array();
-					}
-
-					if(!is_null($options['select_applications']) && !isset($result[$host['hostid']]['applications'])){
-						$result[$host['hostid']]['applications'] = array();
-					}
-
-					if(!is_null($options['select_macros']) && !isset($result[$host['hostid']]['macros'])){
-						$result[$host['hostid']]['macros'] = array();
-					}
-
-// groupids
-					if(isset($host['groupid']) && is_null($options['select_groups'])){
-						if(!isset($result[$host['hostid']]['groups']))
-							$result[$host['hostid']]['groups'] = array();
-
-						$result[$host['hostid']]['groups'][] = array('groupid' => $host['groupid']);
-						unset($host['groupid']);
-					}
-
-// templateids
-					if(isset($host['templateid']) && is_null($options['select_templates'])){
-						if(!isset($result[$host['hostid']]['templates']))
-							$result[$host['hostid']]['templates'] = array();
-
-						$result[$host['hostid']]['templates'][] = array('templateid' => $host['templateid']);
-						unset($host['templateid']);
-					}
-
-// triggerids
-					if(isset($host['triggerid']) && is_null($options['select_triggers'])){
-						if(!isset($result[$host['hostid']]['triggers']))
-							$result[$host['hostid']]['triggers'] = array();
-
-						$result[$host['hostid']]['triggers'][] = array('triggerid' => $host['triggerid']);
-						unset($host['triggerid']);
-					}
-
-// itemids
-					if(isset($host['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$host['hostid']]['items']))
-							$result[$host['hostid']]['items'] = array();
-
-						$result[$host['hostid']]['items'][] = array('itemid' => $host['itemid']);
-						unset($host['itemid']);
-					}
-
-// graphids
-					if(isset($host['graphid']) && is_null($options['select_graphs'])){
-						if(!isset($result[$host['hostid']]['graphs']))
-							$result[$host['hostid']]['graphs'] = array();
-
-						$result[$host['hostid']]['graphs'][] = array('graphid' => $host['graphid']);
-						unset($host['graphid']);
-					}
-
-					$result[$host['hostid']] += $host;
-				}
-			}
-		}
-
-Copt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding Objects
-// Adding Groups
-		if(!is_null($options['select_groups']) && str_in_array($options['select_groups'], $subselects_allowed_outputs)){
-			$obj_params = array(
-					'nodeids' => $nodeids,
-					'output' => $options['select_groups'],
-					'hostids' => $hostids,
-					'preservekeys' => 1
-				);
-			$groups = CHostgroup::get($obj_params);
-
-			foreach($groups as $groupid => $group){
-				$ghosts = $group['hosts'];
-				unset($group['hosts']);
-				foreach($ghosts as $num => $host){
-					$result[$host['hostid']]['groups'][] = $group;
-				}
-			}
-		}
-
-// Adding Profiles
-		if(!is_null($options['select_profile']) && str_in_array($options['select_profile'], $subselects_allowed_outputs)){
-			$sql = 'SELECT hp.* '.
-				' FROM hosts_profiles hp '.
-				' WHERE '.DBcondition('hp.hostid', $hostids);
-			$db_profile = DBselect($sql);
-			while($profile = DBfetch($db_profile))
-				$result[$profile['hostid']]['profile'] = $profile;
-
-
-			$sql = 'SELECT hpe.* '.
-				' FROM hosts_profiles_ext hpe '.
-				' WHERE '.DBcondition('hpe.hostid', $hostids);
-			$db_profile_ext = DBselect($sql);
-			while($profile_ext = DBfetch($db_profile_ext))
-				$result[$profile_ext['hostid']]['profile_ext'] = $profile_ext;
-		}
-
-// Adding Templates
-		if(!is_null($options['select_templates'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_templates']) || str_in_array($options['select_templates'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_templates'];
-				$templates = CTemplate::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($templates, 'host');
-				foreach($templates as $templateid => $template){
-					unset($templates[$templateid]['hosts']);
-					foreach($template['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['templates'][] = &$templates[$templateid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_templates']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$templates = CTemplate::get($obj_params);
-				$templates = zbx_toHash($templates, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($templates[$hostid]))
-						$result[$hostid]['templates'] = $templates[$hostid]['rowscount'];
-					else
-						$result[$hostid]['templates'] = 0;
-				}
-			}
-		}
-
-// Adding Items
-		if(!is_null($options['select_items'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_items']) || str_in_array($options['select_items'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_items'];
-				$items = CItem::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($items, 'description');
-				foreach($items as $itemid => $item){
-					unset($items[$itemid]['hosts']);
-					foreach($item['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['items'][] = &$items[$itemid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_items']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$items = CItem::get($obj_params);
-				$items = zbx_toHash($items, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($items[$hostid]))
-						$result[$hostid]['items'] = $items[$hostid]['rowscount'];
-					else
-						$result[$hostid]['items'] = 0;
-				}
-			}
-		}
-
-// Adding triggers
-		if(!is_null($options['select_triggers'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_triggers']) || str_in_array($options['select_triggers'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_triggers'];
-				$triggers = CTrigger::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($triggers, 'description');
-				foreach($triggers as $triggerid => $trigger){
-					unset($triggers[$triggerid]['hosts']);
-
-					foreach($trigger['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['triggers'][] = &$triggers[$triggerid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_triggers']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$triggers = CTrigger::get($obj_params);
-				$triggers = zbx_toHash($triggers, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($triggers[$hostid]))
-						$result[$hostid]['triggers'] = $triggers[$hostid]['rowscount'];
-					else
-						$result[$hostid]['triggers'] = 0;
-				}
-			}
-		}
-
-// Adding graphs
-		if(!is_null($options['select_graphs'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_graphs']) || str_in_array($options['select_graphs'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_graphs'];
-				$graphs = CGraph::get($obj_params);
-				
-				if(!is_null($options['limitSelects'])) order_result($graphs, 'name');
-				foreach($graphs as $graphid => $graph){
-					unset($graphs[$graphid]['hosts']);
-					
-					foreach($graph['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['graphs'][] = &$graphs[$graphid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_graphs']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$graphs = CGraph::get($obj_params);
-				$graphs = zbx_toHash($graphs, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($graphs[$hostid]))
-						$result[$hostid]['graphs'] = $graphs[$hostid]['rowscount'];
-					else
-						$result[$hostid]['graphs'] = 0;
-				}
-			}
-		}
-
-// Adding applications
-		if(!is_null($options['select_applications'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_applications']) || str_in_array($options['select_applications'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_applications'];
-				$applications = CApplication::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($applications, 'name');
-				foreach($applications as $applicationid => $application){
-					unset($applications[$applicationid]['hosts']);
-
-					foreach($application['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['applications'][] = &$applications[$applicationid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_applications']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$applications = CApplication::get($obj_params);
-				$applications = zbx_toHash($applications, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($applications[$hostid]))
-						$result[$hostid]['applications'] = $applications[$hostid]['rowscount'];
-					else
-						$result[$hostid]['applications'] = 0;
-				}
-			}
-		}
-
-// Adding macros
-		if(!is_null($options['select_macros']) && str_in_array($options['select_macros'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_macros'],
-				'hostids' => $hostids,
-				'preservekeys' => 1
-			);
-
-			$macros = CUserMacro::get($obj_params);
-			foreach($macros as $macroid => $macro){
-				$mhosts = $macro['hosts'];
-				unset($macro['hosts']);
-				foreach($mhosts as $num => $host){
-					$result[$host['hostid']]['macros'][] = $macro;
-				}
-			}
-		}
-
-Copt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-/**
- * Get Host ID by Host name
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $host_data
- * @param string $host_data['host']
- * @return int|boolean
- */
-	public static function getObjects($hostData){
-		$options = array(
-			'filter' => $hostData,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($hostData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($hostData['node']);
-		else if(isset($hostData['nodeids']))
-			$options['nodeids'] = $hostData['nodeids'];
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('hostid', 'host'));
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$objs = self::get($options);
-
-	return !empty($objs);
-	}
-
-/**
- * Add Host
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param string $hosts['host'] Host name.
- * @param array $hosts['groups'] array of HostGroup objects with IDs add Host to.
- * @param int $hosts['port'] Port. OPTIONAL
- * @param int $hosts['status'] Host Status. OPTIONAL
- * @param int $hosts['useip'] Use IP. OPTIONAL
- * @param string $hosts['dns'] DNS. OPTIONAL
- * @param string $hosts['ip'] IP. OPTIONAL
- * @param int $hosts['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['ipmi_password'] IPMI password. OPTIONAL
- * @return boolean
- */
-	public static function create($hosts){
-		$errors = array();
-		$hosts = zbx_toArray($hosts);
-		$hostids = array();
-		$groupids = array();
-		$result = false;
-
-// CHECK IF HOSTS HAVE AT LEAST 1 GROUP {{{
-		foreach($hosts as $hnum => $host){
-			if(empty($host['groups'])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, 'No groups for host [ '.$host['host'].' ]');
-				return false;
-			}
-			$hosts[$hnum]['groups'] = zbx_toArray($hosts[$hnum]['groups']);
-
-			foreach($hosts[$hnum]['groups'] as $gnum => $group){
-				$groupids[$group['groupid']] = $group['groupid'];
-			}
-		}
-// }}} CHECK IF HOSTS HAVE AT LEAST 1 GROUP
-
-
-// PERMISSIONS {{{
-		$upd_groups = CHostGroup::get(array(
-			'groupids' => $groupids,
-			'editable' => 1,
-			'preservekeys' => 1));
-		foreach($groupids as $gnum => $groupid){
-			if(!isset($upd_groups[$groupid])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, 'You do not have enough rights for operation');
-				return false;
-			}
-		}
-// }}} PERMISSIONS
-
-		self::BeginTransaction(__METHOD__);
-		foreach($hosts as $num => $host){
-			$host_db_fields = array(
-				'host' => null,
-				'port' => 0,
-				'status' => 0,
-				'useip' => 0,
-				'dns' => '',
-				'ip' => '0.0.0.0',
-				'proxy_hostid' => 0,
-				'useipmi' => 0,
-				'ipmi_ip' => '',
-				'ipmi_port' => 623,
-				'ipmi_authtype' => 0,
-				'ipmi_privilege' => 0,
-				'ipmi_username' => '',
-				'ipmi_password' => '',
-			);
-
-			if(!check_db_fields($host_db_fields, $host)){
-				$result = false;
-				$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => 'Wrong fields for host [ '.$host['host'].' ]');
-				break;
-			}
-
-			if(!preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $host['host'])){
-				$result = false;
-				$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => 'Incorrect characters used for Hostname [ '.$host['host'].' ]');
-				break;
-			}
-			if(!empty($dns) && !preg_match('/^'.ZBX_PREG_DNS_FORMAT.'$/i', $host['dns'])){
-				$result = false;
-				$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => 'Incorrect characters used for DNS [ '.$host['dns'].' ]');
-				break;
-			}
-
-			if(self::exists(array('host' => $host['host']))){
-				$result = false;
-				$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => S_HOST.' [ '.$host['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				break;
-			}
-			if(CTemplate::exists(array('host' => $host['host']))){
-				$result = false;
-				$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => S_TEMPLATE.' [ '.$host['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				break;
-			}
-
-			$hostid = get_dbid('hosts', 'hostid');
-			$hostids[] = $hostid;
-			$result = DBexecute('INSERT INTO hosts (hostid, proxy_hostid, host, port, status, useip, dns, ip, disable_until, available,'.
-				'useipmi,ipmi_port,ipmi_authtype,ipmi_privilege,ipmi_username,ipmi_password,ipmi_ip) VALUES ('.
-				$hostid.','.
-				$host['proxy_hostid'].','.
-				zbx_dbstr($host['host']).','.
-				$host['port'].','.
-				$host['status'].','.
-				$host['useip'].','.
-				zbx_dbstr($host['dns']).','.
-				zbx_dbstr($host['ip']).
-				',0,'.
-				HOST_AVAILABLE_UNKNOWN.','.
-				$host['useipmi'].','.
-				$host['ipmi_port'].','.
-				$host['ipmi_authtype'].','.
-				$host['ipmi_privilege'].','.
-				zbx_dbstr($host['ipmi_username']).','.
-				zbx_dbstr($host['ipmi_password']).','.
-				zbx_dbstr($host['ipmi_ip']).')'
-			);
-			if(!$result){
-				break;
-			}
-
-			$host['hostid'] = $hostid;
-			$options = array();
-			$options['hosts'] = $host;
-			$options['groups'] = $host['groups'];
-			if(isset($host['templates']) && !is_null($host['templates']))
-				$options['templates'] = $host['templates'];
-			if(isset($host['macros']) && !is_null($host['macros']))
-				$options['macros'] = $host['macros'];
-
-			$result &= CHost::massAdd($options);
-
-			if(isset($host['profile'])){
-				$fields = array_keys($host['profile']);
-				$fields = implode(', ', $fields);
-
-				$values = array_map('zbx_dbstr', $host['profile']);
-				$values = implode(', ', $values);
-
-				DBexecute('INSERT INTO hosts_profiles (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')');
-			}
-
-			if(isset($host['extendedProfile'])){
-				$fields = array_keys($host['extendedProfile']);
-				$fields = implode(', ', $fields);
-
-				$values = array_map('zbx_dbstr', $host['extendedProfile']);
-				$values = implode(', ', $values);
-
-				DBexecute('INSERT INTO hosts_profiles_ext (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')');
-			}
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-		if($result){
-			return array('hostids' => $hostids);
-		}
-		else{
-			self::setMethodErrors(__METHOD__, $errors);
-			return false;
-		}
-	}
-
-/**
- * Update Host
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param string $hosts['host'] Host name.
- * @param int $hosts['port'] Port. OPTIONAL
- * @param int $hosts['status'] Host Status. OPTIONAL
- * @param int $hosts['useip'] Use IP. OPTIONAL
- * @param string $hosts['dns'] DNS. OPTIONAL
- * @param string $hosts['ip'] IP. OPTIONAL
- * @param int $hosts['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['ipmi_password'] IPMI password. OPTIONAL
- * @param string $hosts['groups'] groups
- * @return boolean
- */
-	public static function update($hosts){
-		$errors = array();
-		$result = true;
-
-		$hosts = zbx_toArray($hosts);
-		$hostids = zbx_objectValues($hosts, 'hostid');
-
-		try{
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_hosts = self::get($options);
-			foreach($hosts as $gnum => $host){
-				if(!isset($upd_hosts[$host['hostid']])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, 'You do not have enough rights for operation');
-				}
-			}
-	
-			$transaction = self::BeginTransaction(__METHOD__);
-	
-			foreach($hosts as $num => $host){
-				$tmp = $host;
-				$host['hosts'] = $tmp;
-	
-				$result = self::massUpdate($host);
-				if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Host update failed');
-			}
-	
-			$result = self::EndTransaction($result, __METHOD__);
-
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			if(isset($transaction)) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Add Hosts to HostGroups. All Hosts are added to all HostGroups.
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $data
- * @param array $data['groups']
- * @param array $data['hosts']
- * @return boolean
- */
-	public static function massAdd($data){
-		$errors = array();
-		$result = true;
-
-		$hosts = isset($data['hosts']) ? zbx_toArray($data['hosts']) : null;
-		$hostids = is_null($hosts) ? array() : zbx_objectValues($hosts, 'hostid');
-
-		try{
-			$transaction = self::BeginTransaction(__METHOD__);
-	
-			if(isset($data['groups'])){
-				$options = array(
-					'groups' => zbx_toArray($data['groups']), 
-					'hosts' => zbx_toArray($data['hosts'])
-				);
-				$result = CHostGroup::massAdd($options);
-			}
-	
-			if(isset($data['templates'])){
-				$options = array(
-					'hosts' => zbx_toArray($data['hosts']), 
-					'templates' => zbx_toArray($data['templates'])
-				);
-				$result = CTemplate::massAdd($options);
-			}
-	
-			if(isset($data['macros'])){
-				$options = array(
-					'hosts' => zbx_toArray($data['hosts']), 
-					'macros' => $data['macros']
-				);
-				$result = CUserMacro::massAdd($options);
-			}
-	
-			$result = self::EndTransaction($result, __METHOD__);
-		}
-		catch(APIException $e){
-			if($transaction) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-
-	return $result;
-	}
-
-/**
- * Mass update hosts
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param array $hosts['hosts'] Array of Host objects to update
- * @param string $hosts['fields']['host'] Host name.
- * @param array $hosts['fields']['groupids'] HostGroup IDs add Host to.
- * @param int $hosts['fields']['port'] Port. OPTIONAL
- * @param int $hosts['fields']['status'] Host Status. OPTIONAL
- * @param int $hosts['fields']['useip'] Use IP. OPTIONAL
- * @param string $hosts['fields']['dns'] DNS. OPTIONAL
- * @param string $hosts['fields']['ip'] IP. OPTIONAL
- * @param int $hosts['fields']['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['fields']['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['fields']['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['fields']['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['fields']['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['fields']['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['fields']['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['fields']['ipmi_password'] IPMI password. OPTIONAL
- * @return boolean
- */
-	public static function massUpdate($data){
-		$transaction = false;
-
-		$hosts = zbx_toArray($data['hosts']);
-		$hostids = zbx_objectValues($hosts, 'hostid');
-
-		try{
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'extendoutput' => 1,
-				'preservekeys' => 1,
-			);
-			$upd_hosts = self::get($options);
-
-			foreach($hosts as $hnum => $host){
-				if(!isset($upd_hosts[$host['hostid']])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-// CHECK IF HOSTS HAVE AT LEAST 1 GROUP {{{
-			if(isset($data['groups']) && empty($data['groups'])){
-				throw new APIException(ZBX_API_ERROR_PARAMETERS, 'No groups for hosts');
-			}
-// }}} CHECK IF HOSTS HAVE AT LEAST 1 GROUP
-
-			$transaction = self::BeginTransaction(__METHOD__);
-
-// UPDATE HOSTS PROPERTIES {{{
-			if(isset($data['host'])){
-				if(count($hosts) > 1){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot mass update host name');
-				}
-
-				$cur_host = reset($hosts);
-				
-				$options = array(
-					'filter' => array(
-						'host' => $cur_host['host']),
-					'output' => API_OUTPUT_SHORTEN,
-					'editable' => 1,
-					'nopermissions' => 1
-				);
-				$host_exists = self::get($options);
-				
-				$host_exists = reset($host_exists);
-
-				if(!empty($host_exists) && ($host_exists['hostid'] != $cur_host['hostid'])){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, S_HOST.' [ '.$data['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}				
-			}
-
-			if(isset($data['host']) && !preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $data['host'])){
-				throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for Hostname [ '.$data['host'].' ]');
-			}
-			if(isset($data['dns']) && !empty($dns) && !preg_match('/^'.ZBX_PREG_DNS_FORMAT.'$/i', $data['dns'])){
-				throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for DNS [ '.$data['dns'].' ]');
-			}
-
-			$sql_set = array();
-			if(isset($data['proxy_hostid'])) $sql_set[] = 'proxy_hostid='.$data['proxy_hostid'];
-			if(isset($data['host'])) $sql_set[] = 'host='.zbx_dbstr($data['host']);
-			if(isset($data['port'])) $sql_set[] = 'port='.$data['port'];
-			if(isset($data['status'])) $sql_set[] = 'status='.$data['status'];
-			if(isset($data['useip'])) $sql_set[] = 'useip='.$data['useip'];
-			if(isset($data['dns'])) $sql_set[] = 'dns='.zbx_dbstr($data['dns']);
-			if(isset($data['ip'])) $sql_set[] = 'ip='.zbx_dbstr($data['ip']);
-			if(isset($data['useipmi'])) $sql_set[] = 'useipmi='.$data['useipmi'];
-			if(isset($data['ipmi_port'])) $sql_set[] = 'ipmi_port='.$data['ipmi_port'];
-			if(isset($data['ipmi_authtype'])) $sql_set[] = 'ipmi_authtype='.$data['ipmi_authtype'];
-			if(isset($data['ipmi_privilege'])) $sql_set[] = 'ipmi_privilege='.$data['ipmi_privilege'];
-			if(isset($data['ipmi_username'])) $sql_set[] = 'ipmi_username='.zbx_dbstr($data['ipmi_username']);
-			if(isset($data['ipmi_password'])) $sql_set[] = 'ipmi_password='.zbx_dbstr($data['ipmi_password']);
-			if(isset($data['ipmi_ip'])) $sql_set[] = 'ipmi_ip='.zbx_dbstr($data['ipmi_ip']);
-
-			if(!empty($sql_set)){
-				$sql = 'UPDATE hosts SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $hostids);
-				$result = DBexecute($sql);
-				if(isset($data['status']))
-					update_host_status($hostids, $data['status']);
-			}
-// }}} UPDATE HOSTS PROPERTIES
-
-
-// UPDATE HOSTGROUPS LINKAGE {{{
-			if(isset($data['groups']) && !is_null($data['groups'])){
-				$data['groups'] = zbx_toArray($data['groups']);
-				
-				$host_groups = CHostGroup::get(array('hostids' => $hostids));
-				$host_groupids = zbx_objectValues($host_groups, 'groupid');
-				$new_groupids = zbx_objectValues($data['groups'], 'groupid');
-
-				$groups_to_add = array_diff($new_groupids, $host_groupids);
-
-				if(!empty($groups_to_add)){
-					$result = self::massAdd(array('hosts' => $hosts, 'groups' => $groups_to_add));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t add group');
-					}
-				}
-
-				$groups_to_del = array_diff($host_groupids, $new_groupids);
-
-				if(!empty($groups_to_del)){
-					$result = self::massRemove(array('hosts' => $hosts, 'groups' => $groups_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove group');
-					}
-				}
-			}
-// }}} UPDATE HOSTGROUPS LINKAGE
-
-
-			$data['templates_clear'] = isset($data['templates_clear']) ? zbx_toArray($data['templates_clear']) : array();
-			$cleared_templateids = array();
-			foreach($hostids as $hostid){
-				foreach($data['templates_clear'] as $tpl){
-					$result = unlink_template($hostid, $tpl['templateid'], false);
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot unlink template [ '.$tpl['templateid'].' ]');
-					}
-					$cleared_templateids[] = $tpl['templateid'];
-				}
-			}
-
-
-// UPDATE TEMPLATE LINKAGE {{{
-			if(isset($data['templates']) && !is_null($data['templates'])){
-				$host_templates = CTemplate::get(array('hostids' => $hostids));
-				$host_templateids = zbx_objectValues($host_templates, 'templateid');
-				$new_templateids = zbx_objectValues($data['templates'], 'templateid');
-
-				$templates_to_del = array_diff($host_templateids, $new_templateids);
-				$templates_to_del = array_diff($templates_to_del, $cleared_templateids);
-
-				if(!empty($templates_to_del)){
-					$result = self::massRemove(array('hosts' => $hosts, 'templates' => $templates_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, S_CANNOT_UNLINK_TEMPLATE);
-					}
-				}
-				
-				$result = self::massAdd(array('hosts' => $hosts, 'templates' => $new_templateids));
-				if(!$result){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, S_CANNOT_LINK_TEMPLATE);
-				}
-			}
-// }}} UPDATE TEMPLATE LINKAGE
-
-
-// UPDATE MACROS {{{
-			if(isset($data['macros']) && !is_null($data['macros'])){
-				$host_macros = CUserMacro::get(array('hostids' => $hostids, 'extendoutput' => 1));
-
-				$macros_to_del = array();
-				foreach($host_macros as $hmacro){
-					$del = true;
-					foreach($data['macros'] as $nmacro){
-						if($hmacro['macro'] == $nmacro['macro']){
-							$del = false;
-							break;
-						}
-					}
-					if($del){
-						$macros_to_del[] = $hmacro;
-					}
-				}
-				if(!empty($macros_to_del)){
-					$result = self::massRemove(array('hosts' => $hosts, 'macros' => $macros_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove macro');
-					}
-				}
-
-				$result = CUsermacro::massUpdate(array('hosts' => $hosts, 'macros' => $data['macros']));
-				if(!$result){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot update macro');
-				}
-
-				$result = self::massAdd(array('hosts' => $hosts, 'macros' => $data['macros']));
-				if(!$result){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot add macro');
-				}
-			}
-
-
-// }}} UPDATE MACROS
-
-
-// PROFILE {{{
-			if(isset($data['profile']) && !is_null($data['profile'])){
-				if(empty($data['profile'])){
-					$sql = 'DELETE FROM hosts_profiles WHERE '.DBcondition('hostid', $hostids);
-					if(!DBexecute($sql))
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot delete profile');
-				}
-				else{
-					$existing_profiles = array();
-					$existing_profiles_db = DBselect('SELECT hostid FROM hosts_profiles WHERE '.DBcondition('hostid', $hostids));
-					while($existing_profile = DBfetch($existing_profiles_db)){
-						$existing_profiles[] = $existing_profile['hostid'];
-					}
-
-					$hostids_without_profile = array_diff($hostids, $existing_profiles);
-
-					$fields = array_keys($data['profile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $data['profile']);
-					$values = implode(', ', $values);
-
-					foreach($hostids_without_profile as $hostid){
-						$sql = 'INSERT INTO hosts_profiles (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')';
-						if(!DBexecute($sql))
-							throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot create profile');
-					}
-
-					if(!empty($existing_profiles)){
-
-						$host_profile_fields = array('devicetype', 'name', 'os', 'serialno', 'tag','macaddress', 'hardware', 'software',
-							'contact', 'location', 'notes');
-						$sql_set = array();
-						foreach($host_profile_fields as $field){
-							if(isset($data['profile'][$field])) $sql_set[] = $field.'='.zbx_dbstr($data['profile'][$field]);
-						}
-
-						$sql = 'UPDATE hosts_profiles SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $existing_profiles);
-						if(!DBexecute($sql))
-							throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot update profile');
-					}
-				}
-			}
-// }}} PROFILE
-
-
-// EXTENDED PROFILE {{{
-			if(isset($data['extendedProfile']) && !is_null($data['extendedProfile'])){
-				if(empty($data['extendedProfile'])){
-					$sql = 'DELETE FROM hosts_profiles_ext WHERE '.DBcondition('hostid', $hostids);
-					if(!DBexecute($sql))
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot delete extended profile');
-				}
-				else{
-					$existing_profiles = array();
-					$existing_profiles_db = DBselect('SELECT hostid FROM hosts_profiles_ext WHERE '.DBcondition('hostid', $hostids));
-					while($existing_profile = DBfetch($existing_profiles_db)){
-						$existing_profiles[] = $existing_profile;
-					}
-
-					$hostids_without_profile = array_diff($hostids, $existing_profiles);
-
-					$fields = array_keys($data['extendedProfile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $data['extendedProfile']);
-					$values = implode(', ', $values);
-
-					foreach($hostids_without_profile as $hostid){
-						$sql = 'INSERT INTO hosts_profiles_ext (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')';
-						if(!DBexecute($sql))
-							throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot create extended profile');
-					}
-
-					if(!empty($existing_profiles)){
-
-						$host_profile_ext_fields = array('device_alias','device_type','device_chassis','device_os','device_os_short',
-							'device_hw_arch','device_serial','device_model','device_tag','device_vendor','device_contract',
-							'device_who','device_status','device_app_01','device_app_02','device_app_03','device_app_04',
-							'device_app_05','device_url_1','device_url_2','device_url_3','device_networks','device_notes',
-							'device_hardware','device_software','ip_subnet_mask','ip_router','ip_macaddress','oob_ip',
-							'oob_subnet_mask','oob_router','date_hw_buy','date_hw_install','date_hw_expiry','date_hw_decomm','site_street_1',
-							'site_street_2','site_street_3','site_city','site_state','site_country','site_zip','site_rack','site_notes',
-							'poc_1_name','poc_1_email','poc_1_phone_1','poc_1_phone_2','poc_1_cell','poc_1_screen','poc_1_notes','poc_2_name',
-							'poc_2_email','poc_2_phone_1','poc_2_phone_2','poc_2_cell','poc_2_screen','poc_2_notes');
-
-						$sql_set = array();
-						foreach($host_profile_fields as $field){
-							if(isset($data['extendedProfile'][$field])) $sql_set[] = $field.'='.zbx_dbstr($data['extendedProfile'][$field]);
-						}
-
-						$sql = 'UPDATE hosts_profiles_ext SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $existing_profiles);
-						if(!DBexecute($sql))
-							throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot update extended profile');
-					}
-				}
-			}
-// }}} EXTENDED PROFILE
-
-
-			self::EndTransaction(true, __METHOD__);
-
-			$upd_hosts = self::get(array('hostids' => $hostids, 'extendoutput' => 1, 'nopermissions' => 1));
-			return $upd_hosts;
-		}
-		catch(APIException $e){
-			if($transaction) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * remove Hosts to HostGroups. All Hosts are added to all HostGroups.
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $data
- * @param array $data['groups']
- * @param array $data['hosts']
- * @return boolean
- */
-	public static function massRemove($data){
-		$errors = array();
-		$result = true;
-
-		$hosts = isset($data['hosts']) ? zbx_toArray($data['hosts']) : null;
-		$hostids = is_null($hosts) ? array() : zbx_objectValues($hosts, 'hostid');
-
-		self::BeginTransaction(__METHOD__);
-
-		if(isset($data['groups'])){
-			$options = array('groups' => zbx_toArray($data['groups']), 'hosts' => zbx_toArray($data['hosts']));
-			$result = CHostGroup::massRemove($options);
-		}
-
-		if(isset($data['templates'])){
-			$options = array('hosts' => zbx_toArray($data['hosts']), 'templates' => zbx_toArray($data['templates']));
-			$result = CTemplate::massRemove($options);
-		}
-
-		if(isset($data['macros'])){
-			$options = array('hosts' => zbx_toArray($data['hosts']), 'macros' => $data['macros']);
-			$result = CUserMacro::massRemove($options);
-		}
-
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-
-		if($result !== false){
-			return $result;
-		}
-		else{
-			self::setMethodErrors(__METHOD__, $errors);
-			return false;
-		}
-	}
-
-/**
- * Delete Host
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $hosts
- * @param array $hosts[0, ...]['hostid'] Host ID to delete
- * @return array|boolean
- */
-	public static function delete($hosts){
-		$hosts = zbx_toArray($hosts);
-		$hostids = array();
-
-		$options = array(
-			'hostids'=> zbx_objectValues($hosts, 'hostid'),
-			'editable'=>1,
-			'extendoutput'=>1,
-			'preservekeys'=>1
-		);
-		$del_hosts = self::get($options);
-		if(empty($del_hosts)){
-			self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, 'Host does not exist');
-			return false;
-		}
-
-		foreach($hosts as $num => $host){
-			if(!isset($del_hosts[$host['hostid']])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				return false;
-			}
-
-			$hostids[] = $host['hostid'];
-			//add_audit(AUDIT_ACTION_DELETE, AUDIT_RESOURCE_HOST, 'Host ['.$host['host'].']');
-		}
-
-		self::BeginTransaction(__METHOD__);
-		if(!empty($hostids)){
-			$result = delete_host($hostids, false);
-		}
-		else{
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, 'Empty input parameter');
-			$result = false;
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-		if($result){
-			return array('hostids' => $hostids);
-		}
-		else{
-			self::setError(__METHOD__);
-			return false;
-		}
-	}
-
-
-
-
-
-}
-?>
diff -rupN API/class.chostgroup.php classes/class.chostgroup.php
--- API/class.chostgroup.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.chostgroup.php	2010-03-29 19:22:45.000000000 +0200
@@ -58,7 +58,6 @@ class CHostGroup extends CZBXAPI{
 			'limit' 	=> null);
 
 		$def_options = array(
-			'userid'					=> null,
 			'nodeids'					=> null,
 			'groupids'					=> null,
 			'hostids'					=> null,
@@ -98,16 +97,6 @@ class CHostGroup extends CZBXAPI{
 
 		$options = zbx_array_merge($def_options, $params);
 
-                if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-
 
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
diff -rupN API/class.chost.php classes/class.chost.php
--- API/class.chost.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.chost.php	2010-03-29 19:22:45.000000000 +0200
@@ -76,7 +76,6 @@ class CHost extends CZBXAPI{
 		$user_type = $USER_DETAILS['type'];
 		$userid = $USER_DETAILS['userid'];
 
-
 		$sort_columns = array('hostid', 'host', 'status', 'dns', 'ip'); // allowed columns for sorting
 		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND, API_OUTPUT_CUSTOM); // allowed output options for [ select_* ] params
 
@@ -93,7 +92,6 @@ class CHost extends CZBXAPI{
 			'nodeids'					=> null,
 			'groupids'					=> null,
 			'hostids'					=> null,
-			'userid'					=> null,
 			'templateids'				=> null,
 			'itemids'					=> null,
 			'triggerids'				=> null,
@@ -139,16 +137,6 @@ class CHost extends CZBXAPI{
 
 		$options = zbx_array_merge($def_options, $options);
 
-		if(!is_null($options['userid'])){
-			$USER_DETAILS['userid']=$options['userid'];
-			 $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));			
-				 foreach($users as $unum => $user)
-					$USER_DETAILS['type']=$user['type'];
-//			$USER_DETAILS['type']=1;
-			$user_type = $USER_DETAILS['type'];
-			$userid = $USER_DETAILS['userid'];
-		}
-
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
 
@@ -1692,244 +1680,6 @@ Copt::memoryPick();
 	}
 
 
-     public static function getDATA_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-	    'returnHostid' => null,
-            'listaHost' => null,
-            'userid' => null,
-            'busqHOST' => null,
-            'busqGROUP' => null,
-	    'fijoG' => null,
-	    'fijoH' => null,
-            'cuentaResultados' => null,
-	    'retornaGraficas' => null,
-            'hostid' => null,
-            'hosts' => null,
-	    'filtro' => null,
-            'hostGrupos' => null,
-	    'hostFiltrados' => null,
-	    'gruposFiltrados'=> null,
-            'getprofile' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-
-        if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-        }
-
-
-        if (!is_null($options['listaHost'])&&(!is_null($options['userid']))) {
-
-           if ( $user_type == 1)
-           {
-           $sql = 'SELECT h.hostid, h.host, h.ip, g.name, g.groupid FROM hosts h, groups g, hosts_groups hg,'.
-           'users_groups ug, rights r WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-           '(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='. $options['userid'].')and(r.permission>1)and(h.status=0)and'.
-	   '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-
-
-		$sql = $sql.' ORDER BY g.name';
-		$res = DBselect($sql);
-
-	   }
-	   else if ( $user_type == 2 ||  $user_type == 3)
-           {
-           $sql = 'SELECT h.hostid, h.host, h.ip, g.name, g.groupid FROM hosts h, groups g, hosts_groups hg'.
-           ' WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-           '(h.status=0)and(g.internal<>1)';
-
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-
-                
-                $sql = $sql.' ORDER BY g.name';
-		$res = DBselect($sql);
-
-	   }
-
-
-        $i=0;
-
-        $resultado = array();
-        $colum = array();
-
-
-        while ($colum=DBfetch($res)) {
-                	$resultado[$i]= $colum;
-                	$i=$i+1;
-        }
-
-
-	}
-
-        // Cuenta host
-        if (!is_null($options['cuentaResultados'])&&(!is_null($options['userid']))) {
-           if ( $user_type == 1)
-           {
-
-             $sql = 'SELECT COUNT(h.hostid) FROM hosts h, groups g, hosts_groups hg,'.
-             'users_groups ug, rights r WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-             '(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='.  $options['userid']
-	      .')and(r.permission>1)and(h.status=0)and'.
-	     '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-              $sql = $sql.' ORDER BY g.name';
-              $res = DBselect($sql);
-              
-
-
-           }
-	   else if ($user_type == 2 || $user_type == 3){
-
-	      $sql = 'SELECT COUNT(h.hostid) FROM hosts h, groups g, hosts_groups hg'.
-             ' WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-              '(h.status=0)and'.
-             '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-                            
-              $sql = $sql.' ORDER BY g.name';
-	      $res = DBselect($sql);
-	   }
-
-
-        $i=0;
-        $resultado = array();
-        $colum = array();
-
-
-        while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-          }
-        }
-
-
-        // Devuelve gráficas
-        if (!is_null($options['retornaGraficas'])&&(!is_null($options['hostid']))) {
-
-            $sql = 'SELECT DISTINCT g.graphid, g.name  FROM graphs g, graphs_items gi , items i WHERE '.
-            '(g.graphid=gi.graphid)and(gi.itemid=i.itemid)and(i.hostid='.$options['hostid'].')';
-
-            $res = DBselect($sql);
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-        if (!is_null($options['getprofile'])&&(!is_null($options['hostid']))) {
-
-             $sql = 'SELECT p.poc_1_name, p.poc_1_email, p.poc_1_phone_1, p.poc_2_name, p.poc_2_email,'.
-		    ' p.poc_2_phone_1  FROM hosts_profiles_ext p WHERE (p.hostid='. $options['hostid'] .')';
-	    $res = DBselect($sql);
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-	// devolve os ids vinculados a un Grupo
-        if (!is_null($options['hostGrupos'])) {
-
-             $sql = 'SELECT h.hostid, h.host FROM hosts h, groups g, hosts_groups hg WHERE
-(hg.hostid=h.hostid)and(hg.groupid=g.groupid)and(g.groupid='.$options['hostGrupos'].')';
-            $res = DBselect($sql);
-
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-	if (!is_null($options['returnHostid'])){
-            $sql = "select hostid from hosts where host='".$options['returnHostid']."'";
-            $res = DBselect($sql);
-
-            $resultado = array();
-            $colum = array();
-            $colum=DBfetch($res);
-            $resultado['hostid']= $colum;
-
-        }
-
-
-        COpt::memoryPick();
-
-        // removing keys (hash -> array)
- 	//  $resultado = zbx_cleanHashes($resultato);
-	
-        return $resultado;
-}
-
 
 
 
diff -rupN API/class.cscreen.bak.php classes/class.cscreen.bak.php
--- API/class.cscreen.bak.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.cscreen.bak.php	1970-01-01 01:00:00.000000000 +0100
@@ -1,895 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CScreen class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Screens
- */
-class CScreen extends CZBXAPI{
-/**
- * Get Screen data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['nodeids'] Node IDs
- * @param boolean $options['with_items'] only with items
- * @param boolean $options['editable'] only with read-write permission. Ignored for SuperAdmins
- * @param int $options['extendoutput'] return all fields for Hosts
- * @param int $options['count'] count Hosts, returned column name is rowscount
- * @param string $options['pattern'] search hosts by pattern in host names
- * @param int $options['limit'] limit selection
- * @param string $options['order'] deprecated parameter (for now)
- * @return array|boolean Host data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('name'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select' => array('screens' => 's.screenid'),
-			'from' => array('screens s'),
-			'where' => array(),
-			'order' => array(),
-			'limit' => null);
-
-		$def_options = array(
-			'nodeids'					=> null,
-			'screenids'					=> null,
-			'editable'					=> null,
-			'nopermissions'				=> null,
-// filter
-			'filter'					=> null,
-			'pattern'					=> '',
-// OutPut
-			'extendoutput'				=> null,
-			'output'					=> API_OUTPUT_REFER,
-			'select_screenitems'		=> null,
-			'count'						=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_screenitems'])){
-				$options['select_screenitems'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-
-// editable + PERMISSION CHECK
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid(false);
-
-// screenids
-		if(!is_null($options['screenids'])){
-			zbx_value2array($options['screenids']);
-			$sql_parts['where'][] = DBcondition('s.screenid', $options['screenids']);
-		}
-
-// extendoutput
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['screens'] = 's.*';
-		}
-
-// count
-		if(!is_null($options['count'])){
-			$options['sortfield'] = '';
-
-			$sql_parts['select'] = array('count(DISTINCT s.screenid) as rowscount');
-		}
-
-// pattern
-		if(!zbx_empty($options['pattern'])){
-			$sql_parts['where'][] = ' UPPER(s.name) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%');
-		}
-
-// filter
-		if(!is_null($options['filter'])){
-			zbx_value2array($options['filter']);
-
-			if(isset($options['filter']['screenid'])){
-				$sql_parts['where']['screenid'] = 's.screenid='.$options['filter']['screenid'];
-			}
-			if(isset($options['filter']['name'])){
-				$sql_parts['where']['name'] = 's.name='.zbx_dbstr($options['filter']['name']);
-			}
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 's.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('s.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('s.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 's.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-------
-
-		$screenids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT DISTINCT '.$sql_select.'
-				FROM '.$sql_from.'
-				WHERE '.DBin_node('s.screenid', $nodeids).
-					$sql_where.
-				$sql_order;
-		$res = DBselect($sql, $sql_limit);
-		while($screen = DBfetch($res)){
-			if(!is_null($options['count'])){
-				$result = $screen;
-			}
-			else{
-				$screenids[$screen['screenid']] = $screen['screenid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$screen['screenid']] = array('screenid' => $screen['screenid']);
-				}
-				else{
-					if(!isset($result[$screen['screenid']])) $result[$screen['screenid']]= array();
-
-					$result[$screen['screenid']] += $screen;
-				}
-			}
-		}
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){}
-		else if(!empty($result)){
-			$groups_to_check = array();
-			$hosts_to_check = array();
-			$graphs_to_check = array();
-			$items_to_check = array();
-			$maps_to_check = array();
-			$screens_to_check = array();
-			$screens_items = array();
-
-			$db_sitems = DBselect('SELECT * FROM screens_items WHERE '.DBcondition('screenid', $screenids));
-			while($sitem = DBfetch($db_sitems)){
-				if($sitem['resourceid'] == 0) continue;
-
-				$screens_items[$sitem['screenitemid']] = $sitem;
-
-				switch($sitem['resourcetype']){
-					case SCREEN_RESOURCE_HOSTS_INFO:
-					case SCREEN_RESOURCE_TRIGGERS_INFO:
-					case SCREEN_RESOURCE_TRIGGERS_OVERVIEW:
-					case SCREEN_RESOURCE_DATA_OVERVIEW:
-					case SCREEN_RESOURCE_HOSTGROUP_TRIGGERS:
-						$groups_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_HOST_TRIGGERS:
-						$hosts_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_GRAPH:
-						$graphs_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_SIMPLE_GRAPH:
-					case SCREEN_RESOURCE_PLAIN_TEXT:
-						$items_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_MAP:
-						$maps_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_SCREEN:
-						$screens_to_check[] = $sitem['resourceid'];
-					break;
-				}
-			}
-/*
-sdii($graphs_to_check);
-sdii($items_to_check);
-sdii($maps_to_check);
-sdii($screens_to_check);
-//*/
-// group
-			$group_options = array(
-								'nodeids' => $nodeids,
-								'groupids' => $groups_to_check,
-								'editable' => $options['editable']);
-			$allowed_groups = CHostgroup::get($group_options);
-			$allowed_groups = zbx_objectValues($allowed_groups, 'groupid');
-
-// host
-			$host_options = array(
-								'nodeids' => $nodeids,
-								'hostids' => $hosts_to_check,
-								'editable' => $options['editable']);
-			$allowed_hosts = CHost::get($host_options);
-			$allowed_hosts = zbx_objectValues($allowed_hosts, 'hostid');
-
-// graph
-			$graph_options = array(
-								'nodeids' => $nodeids,
-								'graphids' => $graphs_to_check,
-								'editable' => $options['editable']);
-			$allowed_graphs = CGraph::get($graph_options);		
-			$allowed_graphs = zbx_objectValues($allowed_graphs, 'graphid');
-
-// item
-			$item_options = array(
-								'nodeids' => $nodeids,
-								'itemids' => $items_to_check,
-								'editable' => $options['editable']);
-			$allowed_items = CItem::get($item_options);
-			$allowed_items = zbx_objectValues($allowed_items, 'itemid');
-// map
-			$map_options = array(
-								'nodeids' => $nodeids,
-								'sysmapids' => $maps_to_check,
-								'editable' => $options['editable']);
-			$allowed_maps = CMap::get($map_options);
-			$allowed_maps = zbx_objectValues($allowed_maps, 'sysmapid');
-// screen
-			$screens_options = array(
-								'nodeids' => $nodeids,
-								'screenids' => $screens_to_check,
-								'editable' => $options['editable']);
-			$allowed_screens = CScreen::get($screens_options);
-			$allowed_screens = zbx_objectValues($allowed_screens, 'screenid');
-
-
-			$restr_groups = array_diff($groups_to_check, $allowed_groups);
-			$restr_hosts = array_diff($hosts_to_check, $allowed_hosts);
-			$restr_graphs = array_diff($graphs_to_check, $allowed_graphs);
-			$restr_items = array_diff($items_to_check, $allowed_items);
-			$restr_maps = array_diff($maps_to_check, $allowed_maps);
-			$restr_screens = array_diff($screens_to_check, $allowed_screens);
-
-
-/*
-SDI('---------------------------------------');
-SDII($restr_graphs);
-SDII($restr_items);
-SDII($restr_maps);
-SDII($restr_screens);
-SDI('/////////////////////////////////');
-//*/
-// group
-			foreach($restr_groups as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_HOSTS_INFO,SCREEN_RESOURCE_TRIGGERS_INFO,SCREEN_RESOURCE_TRIGGERS_OVERVIEW,SCREEN_RESOURCE_DATA_OVERVIEW,SCREEN_RESOURCE_HOSTGROUP_TRIGGERS))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// host
-			foreach($restr_hosts as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_HOST_TRIGGERS))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// graph
-			foreach($restr_graphs as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) && ($screen_item['resourcetype'] == SCREEN_RESOURCE_GRAPH)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// item
-			foreach($restr_items as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_SIMPLE_GRAPH, SCREEN_RESOURCE_PLAIN_TEXT))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// map
-			foreach($restr_maps as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if($screen_item['resourceid'] == $resourceid && ($screen_item['resourcetype'] == SCREEN_RESOURCE_MAP)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// screen
-			foreach($restr_screens as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if($screen_item['resourceid'] == $resourceid && ($screen_item['resourcetype'] == SCREEN_RESOURCE_SCREEN)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-		}
-
-		if(($options['output'] != API_OUTPUT_EXTEND) || !is_null($options['count'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-
-// Adding ScreenItems
-		if(!is_null($options['select_screenitems']) && str_in_array($options['select_screenitems'], $subselects_allowed_outputs)){
-			if(!isset($screens_items)){
-				$db_sitems = DBselect('SELECT * FROM screens_items WHERE '.DBcondition('screenid', $screenids));
-				while($sitem = DBfetch($db_sitems)){
-					$screens_items[$sitem['screenitemid']] = $sitem;
-				}
-			}
-
-			foreach($screens_items as $snum => $sitem){
-				if(!isset($result[$sitem['screenid']]['screenitems'])){
-					$result[$sitem['screenid']]['screenitems'] = array();
-				}
-
-				$result[$sitem['screenid']]['screenitems'][] = $sitem;
-			}
-		}
-
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-/**
- * Get Sysmap IDs by Sysmap params
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $sysmap_data
- * @param array $sysmap_data['name']
- * @param array $sysmap_data['sysmapid']
- * @return string sysmapid
- */
-
-	public static function getObjects($data){
-		$options = array(
-			'filter' => $data,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($data['node']))
-			$options['nodeids'] = getNodeIdByNodeName($data['node']);
-		else if(isset($data['nodeids']))
-			$options['nodeids'] = $data['nodeids'];
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($data){
-		$options = array(
-			'filter' => $data,
-			'preservekeys' => 1,
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1
-		);
-
-		if(isset($data['node']))
-			$options['nodeids'] = getNodeIdByNodeName($data['node']);
-		else if(isset($data['nodeids']))
-			$options['nodeids'] = $data['nodeids'];
-
-		$sysmaps = self::get($options);
-
-	return !empty($sysmaps);
-	}
-/**
- * Add Screen
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $screens
- * @param string $screens['name']
- * @param array $screens['hsize']
- * @param int $screens['vsize']
- * @return boolean | array
- */
-	public static function create($screens){
-		$screens = zbx_toArray($screens);
-		$screenid = array();
-
-		$errors = array();
-		$result = false;
-
-		try{
-			$transaction = self::BeginTransaction(__METHOD__);
-			foreach($screens as $snum => $screen){
-
-				$screen_db_fields = array(
-					'name' => null,
-					'hsize' => 2,
-					'vsize' => 2,
-					'screenitems' => array()
-				);
-
-				if(!check_db_fields($screen_db_fields, $screen)){
-					$result = false;
-					$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => 'Wrong fields for screen [ '.$screen['name'].' ]');
-					break;
-				}
-
-				$sql = 'SELECT screenid '.
-					' FROM screens '.
-					' WHERE name='.zbx_dbstr($screen['name']).
-						' AND '.DBin_node('screenid', false);
-				if(DBfetch(DBselect($sql))){
-					$result = false;
-					$errors[] = array('errno' => ZBX_API_ERROR_PARAMETERS, 'error' => S_SCREEN.' [ '.$screen['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-					break;
-				}
-
-				$screenid = get_dbid('screens', 'screenid');
-				$values = array(
-					'screenid' => $screenid,
-					'name' => zbx_dbstr($screen['name']),
-					'hsize' => $screen['hsize'],
-					'vsize' => $screen['vsize']
-				);
-				$sql = 'INSERT INTO screens ('.implode(',',array_keys($values)).') '.
-						' VALUES ('.implode(',',array_values($values)).')';
-				$result = DBexecute($sql);
-
-				if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Failed on screen['.$screen['name'].'] creation');
-
-				$data = array(
-					'screenids' => array($screenid),
-					'screenitems' => $screen['screenitems']
-				);
-
-				$result = self::addItems($data);
-				if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Failed on screen['.$screen['name'].'] creation');
-
-				$screenids[] = $screenid;
-			}
-
-			$result = self::EndTransaction($result, __METHOD__);
-			if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Transaction failed on screens creation');
-
-			return array('screenids' => $screenids);
-		}
-		catch(APIException $e){
-			if(isset($transaction)) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update Screen
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $screens multidimensional array with Hosts data
- * @param string $screens['screenid']
- * @param int $screens['name']
- * @param int $screens['hsize']
- * @param int $screens['vsize']
- * @return boolean
- */
-	public static function update($screens){
-		$screens = zbx_toArray($screens);
-		$screenids = array();
-
-		$result = true;
-		$errors = array();
-
-		$options = array(
-			'screenids'=>zbx_objectValues($screens, 'screenid'),
-			'editable'=>1,
-			'output'=>API_OUTPUT_EXTEND,
-			'preservekeys'=>1
-		);
-		$upd_screens = self::get($options);
-
-		foreach($screens as $gnum => $screen){
-			if(!isset($screen['screenid']) || !isset($upd_screens[$screen['screenid']])){
-				throw new APIException(ZBX_API_ERROR_PERMISSIONS, 'No permisssions for screen update');
-			}
-
-			$upd_screens[$screen['screenid']]['screenitems'] = array();
-			$screenids[] = $screen['screenid'];
-		}
-
-		try{
-			$transaction = self::BeginTransaction(__METHOD__);
-			foreach($screens as $snum => $screen){
-				$screen_db_fields = $upd_screens[$screen['screenid']];
-
-				if(!check_db_fields($screen_db_fields, $screen)){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen [ '.$screen['name'].' ]');
-				}
-
-				$options = array(
-					'filter' => array('name' => $screen['name']),
-					'preservekeys' => 1,
-					'nopermissions' => 1
-				);
-				$exist_screens = self::get($options);
-				foreach($exist_screens as $esnum => $exist_screen){
-					if(bccomp($exist_screen['screenid'], $screen['screenid']) != 0){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, S_SCREEN.' [ '.$screen['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-					}
-				}
-
-				$values = array(
-					'name' => zbx_dbstr($screen['name']),
-					'hsize' => $screen['hsize'],
-					'vsize' => $screen['vsize']
-				);
-
-				$sql = 'UPDATE screens '.
-						' SET '.zbx_implodeHash(',','=',$values).
-						' WHERE	screenid='.$screen['screenid'];
-				$result = DBexecute($sql);
-
-// Screen items
-				$data = array(
-					'screenids' => array($screen['screenid']),
-				);
-				$result = self::deleteItems($data);
-				if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Failed on screen['.$screen['name'].'] update');
-
-				$data = array(
-					'screenids' => array($screen['screenid']),
-					'screenitems' => $screen['screenitems']
-				);
-
-				$result = self::addItems($data);
-				if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Failed on screen['.$screen['name'].'] update');
-			}
-
-			$result = self::EndTransaction($result, __METHOD__);
-			if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Transaction failed on screens update');
-
-			return array('screenids' => $screenids);
-		}
-		catch(APIException $e){
-			if(isset($transaction)) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-
-/**
- * Delete Screen
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $screens
- * @param array $screens[0,...]['screenid']
- * @return boolean
- */
-	public static function delete($screens){
-		$screens = zbx_toArray($screens);
-		$screenids = zbx_objectValues($screens, 'screenid');
-		$result = true;
-
-		$options = array(
-			'screenids'=>zbx_objectValues($screens, 'screenid'),
-			'editable'=>1,
-			'preservekeys'=>1
-		);
-		$del_screens = self::get($options);
-
-		foreach($screens as $gnum => $screen){
-			if(!isset($del_screens[$screen['screenid']])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				return false;
-			}
-			$screenids[] = $screen['screenid'];
-		}
-
-		self::BeginTransaction(__METHOD__);
-		if(!empty($screenids)){
-			$result = DBexecute('DELETE FROM screens_items WHERE '.DBcondition('screenid'.$screenids));
-			$result &= DBexecute('DELETE FROM screens_items WHERE '.DBcondition('resourceid'.$screenids).' AND resourcetype='.SCREEN_RESOURCE_SCREEN);
-			$result &= DBexecute('DELETE FROM slides WHERE '.DBcondition('screenid'.$screenids));
-			$result &= DBexecute('DELETE FROM profiles '.
-								' WHERE idx='.zbx_dbstr('web.favorite.screenids').
-									' AND source='.zbx_dbstr('screenid').
-									' AND '.DBcondition('value_id'.$screenids));
-			$result &= DBexecute('DELETE FROM screens WHERE '.DBcondition('screenid'.$screenids));
-			if(!$result) break;
-		}
-		else{
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, 'Empty input parameter [ screenids ]');
-			$result = false;
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-		if($result){
-			return array('screenids' => $screenids);
-		}
-		else{
-			self::setError(__METHOD__);
-			return false;
-		}
-	}
-
-/**
- * add ScreenItem
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $screen_items
- * @param int $screen_items['screenid']
- * @param int $screen_items['resourcetype']
- * @param int $screen_items['x']
- * @param int $screen_items['y']
- * @param int $screen_items['resourceid']
- * @param int $screen_items['width']
- * @param int $screen_items['height']
- * @param int $screen_items['colspan']
- * @param int $screen_items['rowspan']
- * @param int $screen_items['elements']
- * @param int $screen_items['valign']
- * @param int $screen_items['halign']
- * @param int $screen_items['style']
- * @param int $screen_items['url']
- * @param int $screen_items['dynamic']
- * @return boolean
- */
-	public static function addItems($data){
-		$result = true;
-
-		$screenids = $data['screenids'];
-		$screenItems = $data['screenitems'];
-
-		try{
-			$transaction = self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'screenids' => $screenids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_screens = self::get($options);
-			foreach($screenids as $snum => $screenid){
-				if(!isset($upd_screens[$screenid])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, 'No permisssions for screen update');
-				}
-			}
-
-			foreach($screenItems as $sinum => $screenItem){
-				$db_fields = array(
-					'resourcetype' => null,
-					'resourceid'=> null,
-					'width'=>0,
-					'height'=>0,
-					'x'=>null,
-					'y'=>null,
-					'colspan'=>0,
-					'rowspan'=>0,
-					'elements'=>0,
-					'valign'=>0,
-					'halign'=>0,
-					'style'=>0,
-					'url'=>'',
-					'dynamic'=>0
-				);
-
-				if(!check_db_fields($db_fields, $screenItem)){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen items');
-				}
-
-				foreach($screenids as $snum => $screenid){
-					$screenitemid = get_dbid('screens_items', 'screenitemid');
-					$values = array(
-						'screenitemid' => $screenitemid,
-						'screenid' => $screenid,
-						'resourcetype' => $screenItem['resourcetype'],
-						'resourceid' => $screenItem['resourceid'],
-						'width' => $screenItem['width'],
-						'height' => $screenItem['height'],
-						'x' => $screenItem['x'],
-						'y' => $screenItem['y'],
-						'colspan' => $screenItem['colspan'],
-						'rowspan' => $screenItem['rowspan'],
-						'elements' => $screenItem['elements'],
-						'valign' => $screenItem['valign'],
-						'halign' => $screenItem['halign'],
-						'style' => $screenItem['style'],
-						'url' => zbx_dbstr($screenItem['url']),
-						'dynamic' => $screenItem['dynamic']
-					);
-
-
-					$sql = 'INSERT INTO screens_items ('.implode(',',array_keys($values)).') '.
-							' VALUES ('.implode(',',array_values($values)).')';
-					$result = DBexecute($sql);
-
-					if(!$result) break;
-				}
-			}
-
-			$result = self::EndTransaction($result, __METHOD__);
-			if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Transaction failed on screen item creation');
-
-			return true;
-		}
-		catch(APIException $e){
-			if(isset($transaction)) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * delete ScreenItem
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $screen_itemids
- * @return boolean
- */
-	public static function deleteItems($data){
-		$result = true;
-
-		$screenids = array();
-		$screenitemids = array();
-		$perm_screenids = array();
-
-		if(isset($data['screenids'])){
-			$screenids = zbx_toArray($data['screenids']);
-			$perm_screenids = $screenids;
-		}
-
-		if(isset($data['screenitemids'])){
-			$screenitemids = zbx_toArray($data['screenitemids']);
-			$sql = 'SELECT DISTINCT si.screenidd '.
-					' FROM screens_items si '.
-					' WHERE '.DBcondition('si.screenitemid',$screenitemids);
-			$res = DBselect($sql);
-			while($screen = DBfetch($res)){
-				$perm_screenids[] = $screen['screenid'];
-			}
-		}
-
-		if(empty($perm_screenids)) return true;
-
-		try{
-			$transaction = self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'screenids' => $perm_screenids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$del_screens = self::get($options);
-			foreach($perm_screenids as $snum => $screenid){
-				if(!isset($del_screens[$screenid])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, 'No permisssions for screen update');
-				}
-			}
-			
-			if(!empty($screenids))	$result&= DBexecute('DELETE FROM screens_items WHERE '.DBcondition('screenid', $screenids));
-			if(!empty($screenitemids)) $result&= DBexecute('DELETE FROM screens_items WHERE '.DBcondition('screenitemid', $screenitemids));
-
-			$result = self::EndTransaction($result, __METHOD__);
-			if(!$result) throw new APIException(ZBX_API_ERROR_INTERNAL, 'Transaction failed on screen item deletion');
-
-			return true;
-		}
-		catch(APIException $e){
-			if(isset($transaction)) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-}
-?>
\ No hay ningún carácter de nueva línea al final del fichero
diff -rupN API/class.cscreen.php classes/class.cscreen.php
--- API/class.cscreen.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.cscreen.php	2010-03-29 19:22:45.000000000 +0200
@@ -66,7 +66,6 @@ class CScreen extends CZBXAPI{
 			'limit' => null);
 
 		$def_options = array(
-			'userid'					=> null,
 			'nodeids'					=> null,
 			'screenids'					=> null,
 			'editable'					=> null,
@@ -86,21 +85,7 @@ class CScreen extends CZBXAPI{
 			'limit'						=> null
 		);
 
-                $options = zbx_array_merge($def_options, $options);
-
-//API MODIFICADA INTEGRACION ZABBIX VNMS / WEB CESGA
-            if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-//FIN API MODIFICADA
-
-
+		$options = zbx_array_merge($def_options, $options);
 
 
 		if(!is_null($options['extendoutput'])){
@@ -907,4 +892,4 @@ SDI('/////////////////////////////////')
 		}
 	}
 }
-?>
+?>
\ No hay ningún carácter de nueva línea al final del fichero
diff -rupN API/class.ctemplate.bak.php classes/class.ctemplate.bak.php
--- API/class.ctemplate.bak.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.ctemplate.bak.php	1970-01-01 01:00:00.000000000 +0100
@@ -1,1592 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CTemplate class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Templates
- *
- */
-class CTemplate extends CZBXAPI{
-/**
- * Get Template data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @static
- * @param array $options
- * @return array|boolean Template data as array or false if error
- */
-	public static function get($options = array()) {
-		global $USER_DETAILS;
-
-		$result = array();
-		$nodeCheck = false;
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('hostid', 'host'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-		$sql_parts = array(
-			'select' => array('templates' => 'h.hostid'),
-			'from' => array('hosts h'),
-			'where' => array('h.status='.HOST_STATUS_TEMPLATE),
-			'group' => array(),
-			'order' => array(),
-			'limit' => null);
-
-		$def_options = array(
-			'nodeids'					=> null,
-			'groupids'					=> null,
-			'templateids'				=> null,
-			'hostids'					=> null,
-			'graphids'					=> null,
-			'itemids'					=> null,
-			'triggerids'				=> null,
-			'with_items'				=> null,
-			'with_triggers'				=> null,
-			'with_graphs'				=> null,
-			'editable' 					=> null,
-			'nopermissions'				=> null,
-// filter
-			'filter'					=> null,
-			'pattern'					=> '',
-// OutPut
-			'output'					=> API_OUTPUT_REFER,
-			'extendoutput'				=> null,
-			'select_groups'				=> null,
-			'select_hosts'				=> null,
-			'select_templates'			=> null,
-			'select_items'				=> null,
-			'select_triggers'			=> null,
-			'select_graphs'				=> null,
-			'select_applications'		=> null,
-			'select_macros'				=> null,
-			'countOutput'				=> null,
-			'groupCount'				=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null,
-			'limitSelects'				=> null,
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_groups'])){
-				$options['select_groups'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_templates'])){
-				$options['select_templates'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_hosts'])){
-				$options['select_hosts'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_triggers'])){
-				$options['select_triggers'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_graphs'])){
-				$options['select_graphs'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_applications'])){
-				$options['select_applications'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_macros'])){
-				$options['select_macros'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-		if(is_array($options['output'])){
-			$sql_parts['select']['hosts'] = ' h.'.implode(',h.', $options['output']);
-			$options['output'] = API_OUTPUT_REFER;
-		}
-// editable + PERMISSION CHECK
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable']?PERM_READ_WRITE:PERM_READ_ONLY;
-
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['from']['r'] = 'rights r';
-			$sql_parts['from']['ug'] = 'users_groups ug';
-			$sql_parts['where'][] = 'hg.hostid=h.hostid';
-			$sql_parts['where'][] = 'r.id=hg.groupid ';
-			$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-			$sql_parts['where'][] = 'ug.userid='.$userid;
-			$sql_parts['where'][] = 'r.permission>='.$permission;
-			$sql_parts['where'][] = 'NOT EXISTS( '.
-								' SELECT hgg.groupid '.
-								' FROM hosts_groups hgg, rights rr, users_groups gg '.
-								' WHERE hgg.hostid=hg.hostid '.
-									' AND rr.id=hgg.groupid '.
-									' AND rr.groupid=gg.usrgrpid '.
-									' AND gg.userid='.$userid.
-									' AND rr.permission<'.$permission.')';
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid(false);
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['where'][] = DBcondition('hg.groupid', $options['groupids']);
-			$sql_parts['where']['hgh'] = 'hg.hostid=h.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['hg'] = 'hg.groupid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('hg.groupid', $nodeids);
-			}
-		}
-
-// templateids
-		if(!is_null($options['templateids'])){
-			zbx_value2array($options['templateids']);
-
-			$sql_parts['where']['templateid'] = DBcondition('h.hostid', $options['templateids']);
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-			}
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['linked_hostid'] = 'ht.hostid as linked_hostid';
-			}
-
-			$sql_parts['from']['ht'] = 'hosts_templates ht';
-			$sql_parts['where'][] = DBcondition('ht.hostid', $options['hostids']);
-			$sql_parts['where']['hht'] = 'h.hostid=ht.templateid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['ht'] = 'ht.hostid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('ht.hostid', $nodeids);
-			}
-		}
-
-// itemids
-		if(!is_null($options['itemids'])){
-			zbx_value2array($options['itemids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['itemid'] = 'i.itemid';
-			}
-
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('i.itemid', $options['itemids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('i.itemid', $nodeids);
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['triggerid'] = 'f.triggerid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('f.triggerid', $options['triggerids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('f.triggerid', $nodeids);
-			}
-		}
-
-// graphids
-		if(!is_null($options['graphids'])){
-			zbx_value2array($options['graphids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['graphid'] = 'gi.graphid';
-			}
-
-			$sql_parts['from']['gi'] = 'graphs_items gi';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where'][] = DBcondition('gi.graphid', $options['graphids']);
-			$sql_parts['where']['igi'] = 'i.itemid=gi.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('gi.graphid', $nodeids);
-			}
-		}
-
-// node check !!!!
-// should last, after all ****IDS checks
-		if(!$nodeCheck){
-			$nodeCheck = true;
-			$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-		}
-
-// with_items
-		if(!is_null($options['with_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid )';
-		}
-
-// with_triggers
-		if(!is_null($options['with_triggers'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-						' SELECT i.itemid '.
-						' FROM items i, functions f, triggers t '.
-						' WHERE i.hostid=h.hostid '.
-							' AND i.itemid=f.itemid '.
-							' AND f.triggerid=t.triggerid)';
-		}
-
-// with_graphs
-		if(!is_null($options['with_graphs'])){
-			$sql_parts['where'][] = 'EXISTS('.
-					'SELECT DISTINCT i.itemid '.
-					' FROM items i, graphs_items gi '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.itemid=gi.itemid)';
-		}
-
-// extendoutput
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['templates'] = 'h.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('count(DISTINCT h.hostid) as rowscount');
-
-//groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// pattern
-		if(!zbx_empty($options['pattern'])){
-			$sql_parts['where']['host'] = ' UPPER(h.host) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%');
-		}
-
-// filter
-		if(!is_null($options['filter'])){
-			zbx_value2array($options['filter']);
-
-			if(isset($options['filter']['templateid'])){
-				$sql_parts['where']['templateid'] = 'h.hostid='.$options['filter']['templateid'];
-			}
-			if(isset($options['filter']['host'])){
-				$sql_parts['where']['host'] = 'h.host='.zbx_dbstr($options['filter']['host']);
-			}
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 'h.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('h.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('h.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 'h.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-------------
-
-		$templateids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['group'] = array_unique($sql_parts['group']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_group = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['group']))		$sql_where.= ' GROUP BY '.implode(',',$sql_parts['group']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT DISTINCT '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.DBin_node('h.hostid', $nodeids).
-					$sql_where.
-				$sql_group.
-				$sql_order;
-		$res = DBselect($sql, $sql_limit);
-		while($template = DBfetch($res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $template;
-				else
-					$result = $template['rowscount'];
-			}
-			else{
-				$template['templateid'] = $template['hostid'];
-				$templateids[$template['templateid']] = $template['templateid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$template['templateid']] = array('templateid' => $template['templateid']);
-				}
-				else{
-					if(!isset($result[$template['templateid']])) $result[$template['templateid']]= array();
-
-					if(!is_null($options['select_groups']) && !isset($result[$template['templateid']]['groups'])){
-						$template['groups'] = array();
-					}
-
-					if(!is_null($options['select_templates']) && !isset($result[$template['templateid']]['templates'])){
-						$template['templates'] = array();
-					}
-
-					if(!is_null($options['select_hosts']) && !isset($result[$template['templateid']]['hosts'])){
-						$template['hosts'] = array();
-					}
-
-					if(!is_null($options['select_items']) && !isset($result[$template['templateid']]['items'])){
-						$template['items'] = array();
-					}
-
-					if(!is_null($options['select_triggers']) && !isset($result[$template['templateid']]['triggers'])){
-						$template['triggers'] = array();
-					}
-
-					if(!is_null($options['select_graphs']) && !isset($result[$template['templateid']]['graphs'])){
-						$template['graphs'] = array();
-					}
-					if(!is_null($options['select_applications']) && !isset($result[$template['templateid']]['applications'])){
-						$template['applications'] = array();
-					}
-					if(!is_null($options['select_macros']) && !isset($result[$host['hostid']]['macros'])){
-						$template['macros'] = array();
-					}
-
-// groupids
-					if(isset($template['groupid']) && is_null($options['select_groups'])){
-						if(!isset($result[$template['templateid']]['groups']))
-							$result[$template['templateid']]['groups'] = array();
-
-						$result[$template['templateid']]['groups'][] = array('groupid' => $template['groupid']);
-						unset($template['groupid']);
-					}
-
-// hostids
-					if(isset($template['linked_hostid']) && is_null($options['select_hosts'])){
-						if(!isset($result[$template['templateid']]['hosts']))
-							$result[$template['templateid']]['hosts'] = array();
-
-						$result[$template['templateid']]['hosts'][] = array('hostid' => $template['linked_hostid']);
-						unset($template['linked_hostid']);
-					}
-
-// itemids
-					if(isset($template['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$template['templateid']]['items']))
-							$result[$template['templateid']]['items'] = array();
-
-						$result[$template['templateid']]['items'][] = array('itemid' => $template['itemid']);
-						unset($template['itemid']);
-					}
-
-// triggerids
-					if(isset($template['triggerid']) && is_null($options['select_triggers'])){
-						if(!isset($result[$template['hostid']]['triggers']))
-							$result[$template['hostid']]['triggers'] = array();
-
-						$result[$template['hostid']]['triggers'][] = array('triggerid' => $template['triggerid']);
-						unset($template['triggerid']);
-					}
-
-// graphids
-					if(isset($template['graphid']) && is_null($options['select_graphs'])){
-						if(!isset($result[$template['templateid']]['graphs'])) $result[$template['templateid']]['graphs'] = array();
-
-						$result[$template['templateid']]['graphs'][] = array('graphid' => $template['graphid']);
-						unset($template['graphid']);
-					}
-
-					$result[$template['templateid']] += $template;
-				}
-			}
-
-		}
-
-
-Copt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding Objects
-// Adding Groups
-		if(!is_null($options['select_groups']) && str_in_array($options['select_groups'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_groups'],
-				'hostids' => $templateids,
-				'preservekeys' => 1
-			);
-			$groups = CHostgroup::get($obj_params);
-			foreach($groups as $groupid => $group){
-				$ghosts = $group['hosts'];
-				unset($group['hosts']);
-				foreach($ghosts as $hnum => $template){
-					$result[$template['hostid']]['groups'][] = $group;
-				}
-			}
-		}
-
-// Adding Templates
-		if(!is_null($options['select_templates'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $templateids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_templates']) || str_in_array($options['select_templates'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_templates'];
-				$templates = CTemplate::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($templates, 'host');
-				foreach($templates as $templateid => $template){
-					unset($templates[$templateid]['hosts']);
-
-					foreach($template['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['templates'][] = &$templates[$templateid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_templates']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$templates = CTemplate::get($obj_params);
-				$templates = zbx_toHash($templates, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($templates[$groupid]))
-						$result[$templateid]['templates'] = $templates[$templateid]['rowscount'];
-					else
-						$result[$templateid]['templates'] = 0;
-				}
-			}
-		}
-
-// Adding Hosts
-		if(!is_null($options['select_hosts'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'templateids' => $templateids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_hosts']) || str_in_array($options['select_hosts'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_hosts'];
-				$hosts = CHost::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($hosts, 'host');
-				foreach($hosts as $hostid => $host){
-					unset($hosts[$hostid]['templates']);
-
-					foreach($host['templates'] as $tnum => $template){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$template['templateid']])) $count[$template['templateid']] = 0;
-							$count[$template['templateid']]++;
-
-							if($count[$template['templateid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$template['templateid']]['hosts'][] = &$hosts[$hostid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_hosts']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$hosts = CHost::get($obj_params);
-				$hosts = zbx_toHash($hosts, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($hosts[$templateid]))
-						$result[$templateid]['hosts'] = $hosts[$templateid]['rowscount'];
-					else
-						$result[$templateid]['hosts'] = 0;
-				}
-			}
-		}
-
-// Adding Items
-		if(!is_null($options['select_items'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $templateids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_items']) || str_in_array($options['select_items'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_items'];
-				$items = CItem::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($items, 'description');
-				foreach($items as $itemid => $item){
-					unset($items[$itemid]['hosts']);
-
-					foreach($item['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['items'][] = &$items[$itemid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_items']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$items = CItem::get($obj_params);
-				$items = zbx_toHash($items, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($items[$templateid]))
-						$result[$templateid]['items'] = $items[$templateid]['rowscount'];
-					else
-						$result[$templateid]['items'] = 0;
-				}
-			}
-		}
-
-// Adding triggers
-		if(!is_null($options['select_triggers'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $templateids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_triggers']) || str_in_array($options['select_triggers'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_triggers'];
-				$triggers = CTrigger::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($triggers, 'description');
-				foreach($triggers as $triggerid => $trigger){
-					unset($trigger[$triggerid]['hosts']);
-
-					foreach($trigger['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['triggers'][] = &$trigger[$triggerid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_triggers']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$triggers = CTrigger::get($obj_params);
-				$triggers = zbx_toHash($triggers, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($triggers[$templateid]))
-						$result[$templateid]['triggers'] = $triggers[$templateid]['rowscount'];
-					else
-						$result[$templateid]['triggers'] = 0;
-				}
-			}
-		}
-
-// Adding graphs
-		if(!is_null($options['select_graphs'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $templateids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_graphs']) || str_in_array($options['select_graphs'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_graphs'];
-				$graphs = CGraph::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($graphs, 'name');
-				foreach($graphs as $graphid => $graph){
-					unset($graph[$graphid]['hosts']);
-
-					foreach($graph['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['graphs'][] = &$graph[$graphid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_graphs']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$graphs = CGraph::get($obj_params);
-				$graphs = zbx_toHash($graphs, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($graphs[$templateid]))
-						$result[$templateid]['graphs'] = $graphs[$templateid]['rowscount'];
-					else
-						$result[$templateid]['graphs'] = 0;
-				}
-			}
-		}
-
-// Adding applications
-		if(!is_null($options['select_applications'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $templateids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_applications']) || str_in_array($options['select_applications'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_applications'];
-				$applications = CApplication::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($applications, 'name');
-				foreach($applications as $applicationid => $application){
-					unset($application[$applicationid]['hosts']);
-
-					foreach($application['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['applications'][] = &$application[$applicationid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_applications']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$applications = CApplication::get($obj_params);
-				$applications = zbx_toHash($applications, 'hostid');
-				foreach($result as $templateid => $template){
-					if(isset($applications[$templateid]))
-						$result[$templateid]['applications'] = $applications[$templateid]['rowscount'];
-					else
-						$result[$templateid]['applications'] = 0;
-				}
-			}
-		}
-
-// Adding macros
-		if(!is_null($options['select_macros']) && str_in_array($options['select_macros'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_macros'],
-				'hostids' => $hostids,
-				'preservekeys' => 1
-			);
-			$macros = CUserMacro::get($obj_params);
-			foreach($macros as $macroid => $macro){
-				$mhosts = $macro['hosts'];
-				unset($macro['hosts']);
-				foreach($mhosts as $hnum => $host){
-					$result[$host['hostid']]['macros'][] = $macro;
-				}
-			}
-		}
-
-COpt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-//			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-/**
- * Get Template ID by Template name
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $template_data
- * @param array $template_data['host']
- * @param array $template_data['templateid']
- * @return string templateid
- */
-
-	public static function getObjects($templateData){
-		$options = array(
-			'filter' => $templateData,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($templateData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($templateData['node']);
-		else if(isset($templateData['nodeids']))
-			$options['nodeids'] = $templateData['nodeids'];
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('hostid', 'host'));
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$objs = self::get($options);
-
-	return !empty($objs);
-	}
-
-/**
- * Add Template
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $templates multidimensional array with templates data
- * @param string $templates['host']
- * @param string $templates['port']
- * @param string $templates['status']
- * @param string $templates['useip']
- * @param string $templates['dns']
- * @param string $templates['ip']
- * @param string $templates['proxy_hostid']
- * @param string $templates['useipmi']
- * @param string $templates['ipmi_ip']
- * @param string $templates['ipmi_port']
- * @param string $templates['ipmi_authtype']
- * @param string $templates['ipmi_privilege']
- * @param string $templates['ipmi_username']
- * @param string $templates['ipmi_password']
- * @return boolean
- */
-	public static function create($templates){
-		$transaction = false;
-
-		$templates = zbx_toArray($templates);
-		$templateids = array();
-
-		$result = false;
-
-		try{
-// CHECK IF HOSTS HAVE AT LEAST 1 GROUP {{{
-			foreach($templates as $tnum => $template){
-				if(empty($template['groups'])){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'No groups for template [ '.$template['host'].' ]');
-				}
-				$templates[$tnum]['groups'] = zbx_toArray($templates[$tnum]['groups']);
-
-				foreach($templates[$tnum]['groups'] as $gnum => $group){
-					$groupids[$group['groupid']] = $group['groupid'];
-				}
-			}
-// }}} CHECK IF HOSTS HAVE AT LEAST 1 GROUP
-
-
-// PERMISSIONS {{{
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_groups = CHostGroup::get($options);
-			foreach($groupids as $gnum => $groupid){
-				if(!isset($upd_groups[$groupid])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-// }}} PERMISSIONS
-
-			$transaction = self::BeginTransaction(__METHOD__);
-
-			foreach($templates as $tnum => $template){
-
-	 			$template_db_fields = array(
-					'host' => null
-				);
-
-				if(!check_db_fields($template_db_fields, $template)){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Field "host" is mandatory');
-				}
-
-				if(!preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $template['host'])){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for Template name [ '.$template['host'].' ]');
-				}
-
-				if(self::exists(array('host' => $template['host']))){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, S_TEMPLATE.' [ '.$template['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-				if(CHost::exists(array('host' => $template['host']))){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, S_HOST.' [ '.$template['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-
-				$templateid = get_dbid('hosts', 'hostid');
-				$templateids[] = $templateid;
-
-				$sql = 'INSERT INTO hosts (hostid, host, status) VALUES ('.$templateid.','.zbx_dbstr($template['host']).','.HOST_STATUS_TEMPLATE.')';
-				$result = DBexecute($sql);
-
-				if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS, 'DBError');
-
-				$template['templateid'] = $templateid;
-				$options = array();
-				$options['templates'] = $template;
-				$options['groups'] = $template['groups'];
-				if(isset($template['templates']) && !is_null($template['templates']))
-					$options['templates_link'] = $template['templates'];
-				if(isset($template['macros']) && !is_null($template['macros']))
-					$options['macros'] = $template['macros'];
-				if(isset($template['hosts']) && !is_null($template['hosts']))
-					$options['hosts'] = $template['hosts'];
-
-				$result = self::massAdd($options);
-				if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS);
-			}
-
-			self::EndTransaction(true, __METHOD__);
-
-			return array('templateids' => $templateids);
-		}
-		catch(APIException $e){
-			if($transaction) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update Template
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $templates multidimensional array with templates data
- * @return boolean
- */
-	public static function update($templates){
-
-		$templates = zbx_toArray($templates);
-		$templateids = zbx_objectValues($templates, 'templateid');
-
-		try{
-			$upd_templates = self::get(array(
-				'templateids' => $templateids,
-				'editable' => 1,
-				'extendoutput' => 1,
-				'preservekeys' => 1
-			));
-			foreach($templates as $tnum => $template){
-// PERMISSIONS {{{
-				if(!isset($upd_templates[$template['templateid']])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-// }}} PERMISSIONS
-			}
-
-			self::BeginTransaction(__METHOD__);
-
-			foreach($templates as $tnum => $template){
-				$template['templates_link'] = isset($template['templates']) ? $template['templates'] : null;
-				$template['templates'] = $template;
-
-				$result = self::massUpdate($template);
-				if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Failed to update template');
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('templateids' => $templateids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Delete Template
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $templateids
- * @param array $templateids['templateids']
- * @return boolean
- */
-	public static function delete($templates){
-		$templates = zbx_toArray($templates);
-		$templateids = array();
-
-		$options = array(
-			'templateids'=>zbx_objectValues($templates, 'templateid'),
-			'editable'=>1,
-			'extendoutput'=>1,
-			'preservekeys'=>1
-		);
-		$del_templates = self::get($options);
-		foreach($templates as $gnum => $template){
-			if(!isset($del_templates[$template['templateid']])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				return false;
-			}
-			$templateids[] = $template['templateid'];
-			//add_audit(AUDIT_ACTION_DELETE, AUDIT_RESOURCE_HOST, 'Template ['.$template['host'].']');
-		}
-
-		if(!empty($templateids)){
-			$result = delete_host($templateids, false);
-		}
-		else{
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, 'Empty input parameter [ templateids ]');
-			$result = false;
-		}
-
-		if($result){
-			return array('templateids' => $templateids);
-		}
-		else{
-			self::setError(__METHOD__);
-			return false;
-		}
-	}
-
-
-/**
- * Link Template to Hosts
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $data
- * @param string $data['templates']
- * @param string $data['hosts']
- * @param string $data['groups']
- * @param string $data['templates_link']
- * @return boolean
- */
-	public static function massAdd($data){
-		$transaction = false;
-
-		$templates = isset($data['templates']) ? zbx_toArray($data['templates']) : null;
-		$templateids = is_null($templates) ? array() : zbx_objectValues($templates, 'templateid');
-
-
-		$transaction = self::BeginTransaction(__METHOD__);
-
-		try{
-			if(isset($data['groups'])){
-				$options = array('groups' => $data['groups'], 'templates' => $templates);
-				$result = CHostGroup::massAdd($options);
-				if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t link groups');
-			}
-
-			if(isset($data['hosts'])){
-				$hostids = zbx_objectValues($data['hosts'], 'hostid');
-				self::link($templateids, $hostids);
-			}
-
-			if(isset($data['templates_link'])){
-				$templates_linkids = zbx_objectValues($data['templates_link'], 'templateid');
-				self::link($templates_linkids, $templateids);
-			}
-
-			if(isset($data['macros'])){
-				$options = array('templates' => zbx_toArray($data['templates']), 'macros' => $data['macros']);
-				$result = CUserMacro::massAdd($options);
-				if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t link macros');
-			}
-
-			$result = self::EndTransaction(true, __METHOD__);
-			return true;
-		}
-		catch(APIException $e){
-			if($transaction) self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Mass update hosts
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param array $hosts['hosts'] Array of Host objects to update
- * @param string $hosts['fields']['host'] Host name.
- * @param array $hosts['fields']['groupids'] HostGroup IDs add Host to.
- * @param int $hosts['fields']['port'] Port. OPTIONAL
- * @param int $hosts['fields']['status'] Host Status. OPTIONAL
- * @param int $hosts['fields']['useip'] Use IP. OPTIONAL
- * @param string $hosts['fields']['dns'] DNS. OPTIONAL
- * @param string $hosts['fields']['ip'] IP. OPTIONAL
- * @param int $hosts['fields']['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['fields']['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['fields']['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['fields']['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['fields']['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['fields']['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['fields']['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['fields']['ipmi_password'] IPMI password. OPTIONAL
- * @return boolean
- */
-	public static function massUpdate($data){
-		$transaction = false;
-
-		$templates = zbx_toArray($data['templates']);
-		$templateids = zbx_objectValues($templates, 'templateid');
-
-		try{
-			$options = array(
-				'templateids' => $templateids,
-				'editable' => 1,
-				'extendoutput' => 1,
-				'preservekeys' => 1,
-			);
-			$upd_templates = self::get($options);
-
-			foreach($templates as $tnum => $template){
-				if(!isset($upd_templates[$template['templateid']])){
-					throw new APIException(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-// CHECK IF TEMPLATES HAVE AT LEAST 1 GROUP {{{
-			if(isset($data['groups']) && empty($data['groups'])){
-				throw new APIException(ZBX_API_ERROR_PARAMETERS, 'No groups for template');
-			}
-			$data['groups'] = zbx_toArray($data['groups']);
-// }}} CHECK IF TEMPLATES HAVE AT LEAST 1 GROUP
-
-			$transaction = self::BeginTransaction(__METHOD__);
-
-
-// UPDATE TEMPLATES PROPERTIES {{{
-
-			if(isset($data['host'])){
-				if(count($templates) > 1){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot mass update template name');
-				}
-
-				$cur_template = reset($templates);
-				
-				$options = array(
-					'filter' => array(
-						'host' => $cur_template['host']),
-					'output' => API_OUTPUT_SHORTEN,
-					'editable' => 1,
-					'nopermissions' => 1
-				);
-				$template_exists = self::get($options);
-				
-				$template_exists = reset($template_exists);
-
-				if(!empty($template_exists) && ($template_exists['templateid'] != $cur_template['templateid'])){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, S_TEMPLATE.' [ '.$data['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}				
-			}
-
-			if(isset($data['host']) && !preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $data['host'])){
-				throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for Hostname [ '.$data['host'].' ]');
-			}
-
-			$sql_set = array();
-			if(isset($data['host'])) $sql_set[] = 'host='.zbx_dbstr($data['host']);
-
-			if(!empty($sql_set)){
-				$sql = 'UPDATE hosts SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $templateids);
-				$result = DBexecute($sql);
-			}
-// }}} UPDATE TEMPLATES PROPERTIES
-
-
-// UPDATE HOSTGROUPS LINKAGE {{{
-			if(isset($data['groups']) && !is_null($data['groups'])){
-				$template_groups = CHostGroup::get(array('hostids' => $templateids));
-				$template_groupids = zbx_objectValues($template_groups, 'groupid');
-				$new_groupids = zbx_objectValues($data['groups'], 'groupid');
-
-				$groups_to_add = array_diff($new_groupids, $template_groupids);
-
-				if(!empty($groups_to_add)){
-					$result = self::massAdd(array('templates' => $templates, 'groups' => $groups_to_add));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t add group');
-					}
-				}
-
-				$groups_to_del = array_diff($template_groupids, $new_groupids);
-
-				if(!empty($groups_to_del)){
-					$result = self::massRemove(array('templates' => $templates, 'groups' => $groups_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove group');
-					}
-				}
-			}
-// }}} UPDATE HOSTGROUPS LINKAGE
-
-
-			$data['templates_clear'] = isset($data['templates_clear']) ? zbx_toArray($data['templates_clear']) : array();
-			$cleared_templateids = array();
-			foreach($templateids as $templateid){
-				foreach($data['templates_clear'] as $tpl){
-					$result = unlink_template($templateid, $tpl['templateid'], false);
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Cannot unlink template [ '.$tpl['templateid'].' ]');
-					}
-					$cleared_templateids[] = $tpl['templateid'];
-				}
-			}
-
-
-// UPDATE TEMPLATE LINKAGE {{{
-// firstly need to unlink all things, to correctly check circulars
-
-			if(isset($data['hosts']) && !is_null($data['hosts'])){
-				$template_hosts = CHost::get(array('templateids' => $templateids, 'templated_hosts' => 1));
-				$template_hostids = zbx_objectValues($template_hosts, 'hostid');
-				$new_hostids = zbx_objectValues($data['hosts'], 'hostid');
-
-				$hosts_to_del = array_diff($template_hostids, $new_hostids);
-				$hosts_to_del = array_diff($hosts_to_del, $cleared_templateids);
-
-				if(!empty($hosts_to_del)){
-					$result = self::massRemove(array('hosts' => $hosts_to_del, 'templates' => $templates));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t unlink template');
-					}
-				}			
-				}
-			
-			if(isset($data['templates_link']) && !is_null($data['templates_link'])){
-				$template_templates = CTemplate::get(array('hostids' => $templateids));
-				$template_templateids = zbx_objectValues($template_templates, 'templateid');
-				$new_templateids = zbx_objectValues($data['templates_link'], 'templateid');
-				
-				$templates_to_del = array_diff($template_templateids, $new_templateids);
-				$templates_to_del = array_diff($templates_to_del, $cleared_templateids);
-				if(!empty($templates_to_del)){
-					$result = self::massRemove(array('templates' => $templates, 'templates_link' => $templates_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t unlink template');
-					}
-				}	
-			}
-
-			if(isset($data['hosts']) && !is_null($data['hosts'])){
-			
-				$hosts_to_add = array_diff($new_hostids, $template_hostids);
-				if(!empty($hosts_to_add)){
-					$result = self::massAdd(array('templates' => $templates, 'hosts' => $hosts_to_add));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t link template');
-					}
-				}
-			}
-
-			if(isset($data['templates_link']) && !is_null($data['templates_link'])){
-			
-				$templates_to_add = array_diff($new_templateids, $template_templateids);
-				if(!empty($templates_to_add)){
-					$result = self::massAdd(array('templates' => $templates, 'templates_link' => $templates_to_add));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t link template');
-					}
-				}
-			}
-// }}} UPDATE TEMPLATE LINKAGE
-
-
-// UPDATE MACROS {{{
-			if(isset($data['macros']) && !is_null($data['macros'])){
-				$host_macros = CUserMacro::get(array('hostids' => $templateids, 'extendoutput' => 1));
-
-				$result = self::massAdd(array('templates' => $templates, 'macros' => $data['macros']));
-				if(!$result){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t add macro');
-				}
-
-				$macros_to_del = array();
-				foreach($host_macros as $hmacro){
-					$del = true;
-					foreach($data['macros'] as $nmacro){
-						if($hmacro['macro'] == $nmacro['macro']){
-							$del = false;
-							break;
-						}
-					}
-					if($del){
-						$macros_to_del[] = $hmacro;
-					}
-				}
-
-				if(!empty($macros_to_del)){
-					$result = self::massRemove(array('templates' => $templates, 'macros' => $macros_to_del));
-					if(!$result){
-						throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove macro');
-					}
-				}
-			}
-// }}} UPDATE MACROS
-
-			self::EndTransaction(true, __METHOD__);
-
-			$upd_hosts = self::get(array('templateids' => $templateids, 'extendoutput' => 1, 'nopermissions' => 1));
-			return $upd_hosts;
-
-		}
-		catch(APIException $e){
-			if($transaction) self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * remove Hosts to HostGroups. All Hosts are added to all HostGroups.
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $data
- * @param array $data['templates']
- * @param array $data['groups']
- * @param array $data['hosts']
- * @return boolean
- */
-	public static function massRemove($data){
-		$errors = array();
-		$result = true;
-
-		$templates = isset($data['templates']) ? zbx_toArray($data['templates']) : null;
-		$templateids = is_null($templates) ? array() : zbx_objectValues($templates, 'templateid');
-
-		if(isset($data['groups'])){
-			$options = array('groups' => $data['groups'], 'templates' => $templates);
-			$result = CHostGroup::massRemove($options);
-		}
-
-		if(isset($data['hosts'])){
-			$hostids = zbx_objectValues($data['hosts'], 'hostid');
-			foreach($hostids as $hostid){
-				foreach($templateids as $templateid){
-					unlink_template($hostid, $templateid, true);
-				}
-			}
-		}
-
-		if(isset($data['templates_link'])){
-			$templateids_link = zbx_objectValues($data['templates_link'], 'templateid');
-			foreach($templateids_link as $templateid_link){
-				foreach($templateids as $templateid){
-					unlink_template($templateid, $templateid_link, true);
-				}
-			}
-		}
-
-		if(isset($data['macros'])){
-			$options = array('templates' => zbx_toArray($data['templates']), 'macros' => $data['macros']);
-			$result = CUserMacro::massRemove($options);
-		}
-
-
-		if($result){
-			return $result;
-		}
-		else{
-			self::setMethodErrors(__METHOD__, $errors);
-			return false;
-		}
-	}
-
-
-	private static function link($templateids, $targetids){
-		if(empty($templateids)) return true;
-		
-		try{
-			self::BeginTransaction(__METHOD__);
-
-// CHECK TEMPLATE TRIGGERS DEPENDENCIES {{{
-			foreach($templateids as $tnum => $templateid){
-				$triggerids = array();
-				$db_triggers = get_triggers_by_hostid($templateid);
-				while($trigger = DBfetch($db_triggers)){
-					$triggerids[$trigger['triggerid']] = $trigger['triggerid'];
-				}
-
-				$sql = 'SELECT DISTINCT h.host '.
-						' FROM trigger_depends td, functions f, items i, hosts h '.
-						' WHERE ('.DBcondition('td.triggerid_down', $triggerids).' AND f.triggerid=td.triggerid_up) '.
-							' AND i.itemid=f.itemid '.
-							' AND h.hostid=i.hostid '.
-							' AND '.DBcondition('h.hostid', $templateids, true).
-							' AND h.status='.HOST_STATUS_TEMPLATE;
-
-				if($db_dephost = DBfetch(DBselect($sql))){
-					$options = array(
-							'templateids' => $templateid,
-							'output'=> API_OUTPUT_EXTEND
-						);
-
-					$tmp_tpls = self::get($options);
-					$tmp_tpl = reset($tmp_tpls);
-
-					throw new APIException(ZBX_API_ERROR_PARAMETERS,
-						'Trigger in template [ '.$tmp_tpl['host'].' ] has dependency with trigger in template [ '.$db_dephost['host'].' ]');
-				}
-			}
-// }}} CHECK TEMPLATE TRIGGERS DEPENDENCIES
-
-
-			$linked = array();
-			$sql = 'SELECT hostid, templateid '.
-					' FROM hosts_templates '.
-					' WHERE '.DBcondition('hostid', $targetids).
-						' AND '.DBcondition('templateid', $templateids);
-			$linked_db = DBselect($sql);
-			while($pair = DBfetch($linked_db)){
-				$linked[] = array($pair['hostid'] => $pair['templateid']);
-			}
-
-// add template linkages, if problems rollback later
-			foreach($targetids as $targetid){
-				foreach($templateids as $tnum => $templateid){
-					foreach($linked as $lnum => $link){
-						if(isset($link[$targetid]) && ($link[$targetid] == $templateid)) continue 2;
-					}
-
-					$values = array(get_dbid('hosts_templates', 'hosttemplateid'), $targetid, $templateid);
-					$sql = 'INSERT INTO hosts_templates VALUES ('. implode(', ', $values) .')';
-					$result = DBexecute($sql);
-
-					if(!$result) throw new APIException(ZBX_API_ERROR_PARAMETERS, 'DBError');
-				}
-			}
-
-// CHECK CIRCULAR LINKAGE {{{
-
-// get template linkage graph
-			$graph = array();
-			$sql = 'SELECT ht.hostid, ht.templateid'.
-				' FROM hosts_templates ht, hosts h'.
-				' WHERE ht.hostid=h.hostid'.
-					' AND h.status='.HOST_STATUS_TEMPLATE;
-			$db_graph = DBselect($sql);
-			while($branch = DBfetch($db_graph)){
-				if(!isset($graph[$branch['hostid']])) $graph[$branch['hostid']] = array();
-				$graph[$branch['hostid']][$branch['templateid']] = $branch['templateid'];
-			}
-
-// get points that have more than one parent templates			
-			$start_points = array();
-			$sql = 'SELECT max(ht.hostid) as hostid, ht.templateid'.
-				' FROM('.
-					' SELECT count(htt.templateid) as ccc, htt.hostid'.
-					' FROM hosts_templates htt'.
-					' WHERE htt.hostid NOT IN ( SELECT httt.templateid FROM hosts_templates httt )'.
-					' GROUP BY htt.hostid'.
-					' ) ggg, hosts_templates ht'.
-				' WHERE ggg.ccc>1'.
-					' AND ht.hostid=ggg.hostid'.
-				' GROUP BY ht.templateid';
-			$db_start_points = DBselect($sql);
-			while($start_point = DBfetch($db_start_points)){				
-				$start_points[] = $start_point['hostid'];
-				$graph[$start_point['hostid']][$start_point['templateid']] = $start_point['templateid'];
-			}
-
-// add to the start points also points which we add current templates
-			$start_points = array_merge($start_points, $targetids);
-			$start_points = array_unique($start_points);
-
-			foreach($start_points as $spnum => $start){
-				$path = array();
-				if(!self::checkCircularLink($graph, $start, $path)){
-					throw new APIException(ZBX_API_ERROR_PARAMETERS, 'Circular link can not be created');
-				}
-			}
-
-// }}} CHECK CIRCULAR LINKAGE
-
-
-			foreach($targetids as $targetid){
-				foreach($templateids as $tnum => $templateid){
-					foreach($linked as $lnum => $link){
-						if(isset($link[$targetid]) && ($link[$targetid] == $templateid)){
-							unset($linked[$lnum]);
-							continue 2;
-						}
-					}
-					if(!sync_host_with_templates($targetid, $templateid))
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot sync template');
-				}
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			
-			return true;
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			throw new APIException($e->getCode(), $e->getErrors());
-			
-			return false;
-		}
-	}
-
-	private static function checkCircularLink(&$graph, $current, &$path){
-		
-		if(isset($path[$current])) return false;
-		$path[$current] = $current;
-		if(!isset($graph[$current])) return true;
-		
-		foreach($graph[$current] as $step){
-			if(!self::checkCircularLink($graph, $step, $path)) return false;
-		}
-		
-		return true;
-	}
-}
-?>
\ No hay ningún carácter de nueva línea al final del fichero
diff -rupN API/class.ctrigger.bak.php classes/class.ctrigger.bak.php
--- API/class.ctrigger.bak.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.ctrigger.bak.php	1970-01-01 01:00:00.000000000 +0100
@@ -1,1046 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CTrigger class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Triggers
- *
- */
-class CTrigger extends CZBXAPI{
-
-	public static $error = array();
-
-/**
- * Get Triggers data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['itemids']
- * @param array $options['hostids']
- * @param array $options['groupids']
- * @param array $options['triggerids']
- * @param array $options['applicationids']
- * @param array $options['status']
- * @param array $options['editable']
- * @param array $options['extendoutput']
- * @param array $options['count']
- * @param array $options['pattern']
- * @param array $options['limit']
- * @param array $options['order']
- * @return array|int item data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('triggerid', 'description', 'status', 'priority', 'lastchange'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select' => array('triggers' => 't.triggerid'),
-			'from' => array('t' => 'triggers t'),
-			'where' => array(),
-			'group' => array(),
-			'order' => array(),
-			'limit' => null,
-			);
-
-		$def_options = array(
-			'nodeids'				=> null,
-			'groupids'				=> null,
-			'hostids'				=> null,
-			'triggerids'			=> null,
-			'itemids'				=> null,
-			'applicationids'		=> null,
-			'status'				=> null,
-			'monitored' 			=> null,
-			'templated'				=> null,
-			'maintenance'			=> null,
-			'inherited'				=> null,
-			'editable'				=> null,
-			'nopermissions'			=> null,
-			'only_problems'			=> null,
-			'skipDependent'			=> null,
-			'with_unacknowledged_events' => null,
-// filter
-			'filter'				=> null,
-			'group'					=> null,
-			'host'					=> null,
-			'only_true'				=> null,
-			'min_severity'			=> null,
-//
-			'pattern'				=> '',
-// OutPut
-			'expand_data'			=> null,
-			'output'				=> API_OUTPUT_REFER,
-			'extendoutput'			=> null,
-			'select_groups'			=> null,
-			'select_hosts'			=> null,
-			'select_items'			=> null,
-			'select_functions'		=> null,
-			'select_dependencies'	=> null,
-			'countOutput'			=> null,
-			'groupCount'			=> null,
-			'preservekeys'			=> null,
-
-			'sortfield'				=> '',
-			'sortorder'				=> '',
-			'limit'					=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_hosts'])){
-				$options['select_hosts'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_dependencies'])){
-				$options['select_dependencies'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-
-// editable + PERMISSION CHECK
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable']?PERM_READ_WRITE:PERM_READ_ONLY;
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['from']['r'] = 'rights r';
-			$sql_parts['from']['ug'] = 'users_groups ug';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where'][] = 'r.id=hg.groupid ';
-			$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-			$sql_parts['where'][] = 'ug.userid='.$userid;
-			$sql_parts['where'][] = 'r.permission>='.$permission;
-			$sql_parts['where'][] = 'NOT EXISTS( '.
-											' SELECT ff.triggerid '.
-											' FROM functions ff, items ii '.
-											' WHERE ff.triggerid=t.triggerid '.
-												' AND ff.itemid=ii.itemid '.
-												' AND EXISTS( '.
-													' SELECT hgg.groupid '.
-													' FROM hosts_groups hgg, rights rr, users_groups gg '.
-													' WHERE hgg.hostid=ii.hostid '.
-														' AND rr.id=hgg.groupid '.
-														' AND rr.groupid=gg.usrgrpid '.
-														' AND gg.userid='.$userid.
-														' AND rr.permission<'.$permission.'))';
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['groupid'] = DBcondition('hg.groupid', $options['groupids']);
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['hg'] = 'hg.groupid';
-			}
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['hostid'] = 'i.hostid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['where']['hostid'] = DBcondition('i.hostid', $options['hostids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['i'] = 'i.hostid';
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-
-			$sql_parts['where']['triggerid'] = DBcondition('t.triggerid', $options['triggerids']);
-		}
-
-// itemids
-		if(!is_null($options['itemids'])){
-			zbx_value2array($options['itemids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['itemid'] = 'f.itemid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['where']['itemid'] = DBcondition('f.itemid', $options['itemids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-		}
-
-// applicationids
-		if(!is_null($options['applicationids'])){
-			zbx_value2array($options['applicationids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['applicationid'] = 'a.applicationid';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['a'] = 'applications a';
-			$sql_parts['where']['a'] = DBcondition('a.applicationid', $options['applicationids']);
-			$sql_parts['where']['ia'] = 'i.hostid=a.hostid';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-		}
-
-// status
-		if(!is_null($options['status'])){
-			$sql_parts['where'][] = 't.status='.$options['status'];
-		}
-
-// monitored
-		if(!is_null($options['monitored'])){
-			$sql_parts['where'][] = ''.
-				' NOT EXISTS ('.
-					' SELECT ff.functionid'.
-					' FROM functions ff'.
-					' WHERE ff.triggerid=t.triggerid'.
-						' AND EXISTS ('.
-								' SELECT ii.itemid'.
-								' FROM items ii, hosts hh'.
-								' WHERE ff.itemid=ii.itemid'.
-									' AND hh.hostid=ii.hostid'.
-									' AND ('.
-										' ii.status<>'.ITEM_STATUS_ACTIVE.
-										' OR hh.status<>'.HOST_STATUS_MONITORED.
-									' )'.
-						' )'.
-				' )';
-			$sql_parts['where'][] = 't.status='.TRIGGER_STATUS_ENABLED;
-		}
-
-// maintenance
-		if(!is_null($options['maintenance'])){
-			$sql_parts['where'][] = (($options['maintenance'] == 0)?' NOT ':'').
-				' EXISTS ('.
-					' SELECT ff.functionid'.
-					' FROM functions ff'.
-					' WHERE ff.triggerid=t.triggerid'.
-						' AND EXISTS ('.
-								' SELECT ii.itemid'.
-								' FROM items ii, hosts hh'.
-								' WHERE ff.itemid=ii.itemid'.
-									' AND hh.hostid=ii.hostid'.
-									' AND hh.maintenance_status=1'.
-						' )'.
-				' )';
-			$sql_parts['where'][] = 't.status='.TRIGGER_STATUS_ENABLED;
-		}
-
-// only_problems
-		if(!is_null($options['only_problems'])){
-			$sql_parts['where']['ot'] = 't.value='.TRIGGER_VALUE_TRUE;
-		}
-// with_unacknowledged_events
-		if(!is_null($options['with_unacknowledged_events'])){
-			$sql_parts['where']['unack'] = ' EXISTS('.
-				' SELECT e.eventid'.
-				' FROM events e'.
-				' WHERE e.objectid=t.triggerid'.
-					' AND e.object=0'.
-					' AND e.value='.TRIGGER_VALUE_TRUE.
-					' AND e.acknowledged=0)';
-		}
-// templated
-		if(!is_null($options['templated'])){
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['h'] = 'hosts h';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if($options['templated']){
-				$sql_parts['where'][] = 'h.status='.HOST_STATUS_TEMPLATE;
-			}
-			else{
-				$sql_parts['where'][] = 'h.status<>'.HOST_STATUS_TEMPLATE;
-			}
-		}
-
-// inherited
-		if(!is_null($options['inherited'])){
-			if($options['inherited']){
-				$sql_parts['where'][] = 't.templateid<>0';
-			}
-			else{
-				$sql_parts['where'][] = 't.templateid=0';
-			}
-		}
-
-// extendoutput
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['triggers'] = 't.*';
-		}
-
-// expand_data
-		if(!is_null($options['expand_data'])){
-			$sql_parts['select']['host'] = 'h.host';
-			$sql_parts['select']['hostid'] = 'h.hostid';
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['h'] = 'hosts h';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-		}
-
-// pattern
-		if(!zbx_empty($options['pattern'])){
-			$sql_parts['where']['description'] = ' UPPER(t.description) LIKE '.zbx_dbstr('%'.zbx_strtoupper($options['pattern']).'%');
-		}
-
-
-// --- FILTER ---
-		if(!is_null($options['filter'])){
-			zbx_value2array($options['filter']);
-			
-			if(isset($options['filter']['description']) && !is_null($options['filter']['description'])){
-				$sql_parts['where']['description'] = 't.description='.zbx_dbstr($options['filter']['description']);
-			}
-			
-			if(isset($options['filter']['host']) || isset($options['filter']['hostid'])){
-				$sql_parts['from']['f'] = 'functions f';
-				$sql_parts['from']['i'] = 'items i';
-				$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-				$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-				if(isset($options['filter']['host']) && !is_null($options['filter']['host'])){
-					$sql_parts['from']['h'] = 'hosts h';
-					$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-					$sql_parts['where']['host'] = 'h.host='.zbx_dbstr($options['filter']['host']);
-				}
-
-				if(isset($options['filter']['hostid']) && !is_null($options['filter']['hostid']))
-					$sql_parts['where']['hostid'] = 'i.hostid='.zbx_dbstr($options['filter']['hostid']);
-			}
-
-// severity
-			if(isset($options['filter']['priority']) && !is_null($options['filter']['priority'])){
-				zbx_value2array($options['filter']['priority']);
-
-				$sql_parts['where']['priority'] = DBcondition('t.priority', $options['filter']['priority']);
-			}
-		}
-// group
-		if(!is_null($options['group'])){
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['name'] = 'g.name';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-			$sql_parts['from']['g'] = 'groups g';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['ghg'] = 'g.groupid = hg.groupid';
-			$sql_parts['where']['group'] = ' UPPER(g.name)='.zbx_dbstr(zbx_strtoupper($options['group']));
-		}
-
-// host
-		if(!is_null($options['host'])){
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['host'] = 'h.host';
-			}
-
-			$sql_parts['from']['f'] = 'functions f';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['h'] = 'hosts h';
-			$sql_parts['where']['i'] = DBcondition('i.hostid', $options['hostids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-			$sql_parts['where']['host'] = ' UPPER(h.host)='.zbx_dbstr(zbx_strtoupper($options['host']));
-		}
-
-// only_true
-		if(!is_null($options['only_true'])){
-
-			$sql_parts['where']['ot'] = '((t.value='.TRIGGER_VALUE_TRUE.')'.
-									' OR '.
-									'((t.value='.TRIGGER_VALUE_FALSE.') AND (t.lastchange>'.(time() - TRIGGER_FALSE_PERIOD).')))';
-		}
-
-// min_severity
-		if(!is_null($options['min_severity'])){
-			$sql_parts['where'][] = 't.priority>='.$options['min_severity'];
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('COUNT(DISTINCT t.triggerid) as rowscount');
-
-//groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 't.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('t.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('t.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 't.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//---------------
-
-		$triggerids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['group'] = array_unique($sql_parts['group']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_group = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['group']))		$sql_where.= ' GROUP BY '.implode(',',$sql_parts['group']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT DISTINCT '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.DBin_node('t.triggerid', $nodeids).
-					$sql_where.
-				$sql_group.
-				$sql_order;
-//SDI($sql);
-		$db_res = DBselect($sql, $sql_limit);
-		while($trigger = DBfetch($db_res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $trigger;
-				else
-					$result = $trigger['rowscount'];
-			}
-			else{
-				$triggerids[$trigger['triggerid']] = $trigger['triggerid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$trigger['triggerid']] = array('triggerid' => $trigger['triggerid']);
-				}
-				else{
-					if(!isset($result[$trigger['triggerid']])) $result[$trigger['triggerid']]= array();
-
-					if(!is_null($options['select_hosts']) && !isset($result[$trigger['triggerid']]['hosts'])){
-						$result[$trigger['triggerid']]['hosts'] = array();
-					}
-					if(!is_null($options['select_items']) && !isset($result[$trigger['triggerid']]['items'])){
-						$result[$trigger['triggerid']]['items'] = array();
-					}
-					if(!is_null($options['select_functions']) && !isset($result[$trigger['triggerid']]['functions'])){
-						$result[$trigger['triggerid']]['functions'] = array();
-					}
-					if(!is_null($options['select_dependencies']) && !isset($result[$trigger['triggerid']]['dependencies'])){
-						$result[$trigger['triggerid']]['dependencies'] = array();
-					}
-
-// groups
-					if(isset($trigger['groupid']) && is_null($options['select_groups'])){
-						if(!isset($result[$trigger['triggerid']]['groups'])) $result[$trigger['triggerid']]['groups'] = array();
-
-						$result[$trigger['triggerid']]['groups'][] = array('groupid' => $trigger['groupid']);
-						unset($trigger['groupid']);
-					}
-
-// hostids
-					if(isset($trigger['hostid']) && is_null($options['select_hosts'])){
-						if(!isset($result[$trigger['triggerid']]['hosts'])) $result[$trigger['triggerid']]['hosts'] = array();
-
-						$result[$trigger['triggerid']]['hosts'][] = array('hostid' => $trigger['hostid']);
-
-						if(is_null($options['expand_data'])) unset($trigger['hostid']);
-					}
-// itemids
-					if(isset($trigger['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$trigger['triggerid']]['items']))
-							$result[$trigger['triggerid']]['items'] = array();
-
-						$result[$trigger['triggerid']]['items'][] = array('itemid' => $trigger['itemid']);
-						unset($trigger['itemid']);
-					}
-
-					$result[$trigger['triggerid']] += $trigger;
-				}
-			}
-		}
-
-COpt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// skipDependent		
-		if(!is_null($options['skipDependent'])){
-			$tids = $triggerids;
-			$map = array();
-			
-			do{
-				$sql = 'SELECT d.triggerid_down, d.triggerid_up, t.value '.
-						' FROM trigger_depends d, triggers t '.
-						' WHERE '.DBcondition('d.triggerid_down', $tids).
-							' AND d.triggerid_up=t.triggerid';
-				$db_result = DBselect($sql);
-				
-				$tids = array();
-				while($row = DBfetch($db_result)){
-					if(TRIGGER_VALUE_TRUE == $row['value']){
-						if(isset($map[$row['triggerid_down']])){
-							foreach($map[$row['triggerid_down']] as $triggerid => $state){
-								unset($result[$triggerid]);
-								unset($triggerids[$triggerid]);
-							}
-						}
-						else{
-							unset($result[$row['triggerid_down']]);
-							unset($triggerids[$row['triggerid_down']]);
-						}
-					}
-					else{
-						if(isset($map[$row['triggerid_down']])){
-							if(!isset($map[$row['triggerid_up']]))
-								$map[$row['triggerid_up']] = array();
-
-							$map[$row['triggerid_up']] += $map[$row['triggerid_down']];
-						}
-						else{
-							if(!isset($map[$row['triggerid_up']]))
-								$map[$row['triggerid_up']] = array();
-
-							$map[$row['triggerid_up']][$row['triggerid_down']] = 1;
-						}
-						$tids[] = $row['triggerid_up'];
-					}
-				}
-			}while(!empty($tids));
-		}
-
-// Adding Objects
-// Adding trigger dependencies
-		if(!is_null($options['select_dependencies']) && str_in_array($options['select_dependencies'], $subselects_allowed_outputs)){
-			$deps = array();
-			$depids = array();
-
-			$sql = 'SELECT triggerid_up, triggerid_down FROM trigger_depends WHERE '.DBcondition('triggerid_down', $triggerids);
-			$db_deps = DBselect($sql);
-			while($db_dep = DBfetch($db_deps)){
-				if(!isset($deps[$db_dep['triggerid_down']])) $deps[$db_dep['triggerid_down']] = array();
-				$deps[$db_dep['triggerid_down']][$db_dep['triggerid_up']] = $db_dep['triggerid_up'];
-				$depids[] = $db_dep['triggerid_up'];
-			}
-
-			$obj_params = array(
-				'triggerids' => $depids,
-				'output' => API_OUTPUT_EXTEND,
-				'expand_data' => 1,
-				'preservekeys' => 1
-			);
-			$allowed = self::get($obj_params); //allowed triggerids
-
-			foreach($deps as $triggerid => $deptriggers){
-				foreach($deptriggers as $num => $deptriggerid){
-					if(isset($allowed[$deptriggerid])){
-						$result[$triggerid]['dependencies'][] = $allowed[$deptriggerid];
-					}
-				}
-			}
-		}
-
-// Adding groups
-		if(!is_null($options['select_groups']) && str_in_array($options['select_groups'], $subselects_allowed_outputs)){
-		}
-
-// Adding hosts
-		if(!is_null($options['select_hosts']) && str_in_array($options['select_hosts'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'templated_hosts' => 1,
-				'output' => $options['select_hosts'],
-				'triggerids' => $triggerids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$hosts = CHost::get($obj_params);
-			foreach($hosts as $hostid => $host){
-				$htriggers = $host['triggers'];
-				unset($host['triggers']);
-				foreach($htriggers as $num => $trigger){
-					$result[$trigger['triggerid']]['hosts'][] = $host;
-				}
-			}
-		}
-
-// Adding Functions
-		if(!is_null($options['select_functions']) && str_in_array($options['select_functions'], $subselects_allowed_outputs)){
-
-			if($options['select_functions'] == API_OUTPUT_EXTEND)
-				$sql_select = 'f.*';
-			else 
-				$sql_select = 'f.functionid, f.triggerid';
-
-			$sql = 'SELECT '.$sql_select.
-					' FROM functions f '.
-					' WHERE '.DBcondition('f.triggerid',$triggerids);
-			$res = DBselect($sql);
-			while($function = DBfetch($res)){
-				$triggerid = $function['triggerid'];
-				unset($function['triggerid']);
-
-				$result[$triggerid]['functions'][] = $function;
-			}
-		}
-
-// Adding Items
-		if(!is_null($options['select_items']) && str_in_array($options['select_items'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_items'],
-				'triggerids' => $triggerids,
-				'webitems' => 1,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$items = CItem::get($obj_params);
-			foreach($items as $itemid => $item){
-				$itriggers = $item['triggers'];
-				unset($item['triggers']);
-				foreach($itriggers as $num => $trigger){
-					$result[$trigger['triggerid']]['items'][] = $item;
-				}
-			}
-		}
-
-COpt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-/**
- * Get triggerid by host.host and trigger.expression
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $triggers multidimensional array with trigger objects
- * @param array $triggers[0,...]['expression']
- * @param array $triggers[0,...]['host']
- * @param array $triggers[0,...]['hostid'] OPTIONAL
- * @param array $triggers[0,...]['description'] OPTIONAL
- */
-
-	public static function getObjects($triggerData){
-		$options = array(
-			'filter' => $triggerData,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($triggerData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($triggerData['node']);
-		else if(isset($triggerData['nodeids']))
-			$options['nodeids'] = $triggerData['nodeids'];
-
-		$result = self::get($options);
-		if(isset($triggerData['expression'])){
-			foreach($result as $tnum => $trigger){
-				$tmp_exp = explode_exp($trigger['expression'], false);
-
-				if(strcmp(trim($tmp_exp,' '), trim($triggerData['expression'],' ')) != 0) {
-					unset($result[$tnum]);
-				}
-			}
-		}
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('hostid', 'host'), 'description');
-
-		$result = false;
-		
-		if(!isset($object['hostid']) && !isset($object['host'])){
-			preg_match('/^.*?{(.+?):/u', $object['expression'], $host);
-			$object['host'] = $host[1];
-		}
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_EXTEND,
-			'nopermissions' => 1,
-		);
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$triggers = self::get($options);
-		foreach($triggers as $tnum => $trigger){
-			$tmp_exp = explode_exp($trigger['expression'], false);
-			if(strcmp($tmp_exp, $object['expression']) == 0){
-				$result = true;
-				break;
-			}
-		}
-
-	return $result;
-	}
-
-/**
- * Add triggers
- *
- * Trigger params: expression, description, type, priority, status, comments, url, templateid
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $triggers
- * @return boolean
- */
-	public static function create($triggers){
-		$triggers = zbx_toArray($triggers);
-		$triggerids = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-			
-			foreach($triggers as $num => $trigger){
-				$trigger_db_fields = array(
-					'description'	=> null,
-					'expression'	=> null,
-					'type'		=> 0,
-					'priority'	=> 0,
-					'status'	=> TRIGGER_STATUS_DISABLED,
-					'comments'	=> '',
-					'url'		=> '',
-					'templateid'=> 0
-				);
-
-				if(!check_db_fields($trigger_db_fields, $trigger)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for trigger');
-				}
-
-				$result = add_trigger(
-					$trigger['expression'],
-					$trigger['description'],
-					$trigger['type'],
-					$trigger['priority'],
-					$trigger['status'],
-					$trigger['comments'],
-					$trigger['url'],
-					array(),
-					$trigger['templateid']
-				);
-				if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Trigger ['.$trigger['description'].' ]: cannot create');
-
-				$triggerids[] = $result;
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, $error);
-			return false;
-		}
-	}
-
-/**
- * Update triggers
- *
- * Trigger params: expression, description, type, priority, status, comments, url, templateid
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $triggers
- * @return boolean
- */
-	public static function update($triggers){
-		$triggers = zbx_toArray($triggers);
-		$triggerids = array();
-		
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'triggerids' => zbx_objectValues($triggers, 'triggerid'),
-				'editable' => 1,
-				'extendoutput' => 1,
-				'preservekeys' => 1
-			);
-			$upd_triggers = self::get($options);
-			foreach($triggers as $gnum => $trigger){
-				if(!isset($upd_triggers[$trigger['triggerid']])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_NO_PERMISSIONS);
-				}
-				$triggerids[] = $trigger['triggerid'];
-			}
-
-			
-			foreach($triggers as $tnum => $trigger){
-			
-				$trigger_db_fields = $upd_triggers[$trigger['triggerid']];
-				if(!check_db_fields($trigger_db_fields, $trigger)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for trigger');
-				}
-				
-				$result = update_trigger(
-					$trigger['triggerid'],
-					$trigger['expression'],
-					$trigger['description'],
-					$trigger['type'],
-					$trigger['priority'],
-					$trigger['status'],
-					$trigger['comments'],
-					$trigger['url'],
-					array(),
-					$trigger['templateid']
-				);
-				if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Trigger ['.$trigger['description'].' ]: cannot update');
-			}
-			
-			self::EndTransaction(true, __METHOD__);
-			
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, $error);
-			return false;
-		}
-	}
-
-/**
- * Delete triggers
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param array $triggers multidimensional array with trigger objects
- * @param array $triggers[0,...]['triggerid']
- * @return deleted triggers
- */
-	public static function delete($triggers){
-		$triggers = zbx_toArray($triggers);
-		$triggerids = array();
-
-		$options = array(
-			'triggerids'=>zbx_objectValues($triggers, 'triggerid'),
-			'editable'=>1,
-			'extendoutput'=>1,
-			'preservekeys'=>1
-		);
-		$del_triggers = self::get($options);
-		foreach($triggers as $gnum => $trigger){
-			if(!isset($del_triggers[$trigger['triggerid']])){
-				self::setError(__METHOD__, ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				return false;
-			}
-
-			$triggerids[] = $trigger['triggerid'];
-			//add_audit(AUDIT_ACTION_DELETE, AUDIT_RESOURCE_TRIGGER, 'Trigger ['.$trigger['description'].']');
-		}
-
-		self::BeginTransaction(__METHOD__);
-		if(!empty($triggerids)){
-			$result = delete_trigger($triggerids);
-		}
-		else{
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, 'Empty input parameter [ triggerids ]');
-			$result = false;
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-		if($result){
-			return array('triggerids' => $triggerids);
-		}
-		else{
-			self::setError(__METHOD__);
-			return false;
-		}
-	}
-
-/**
- * Add dependency for trigger
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $triggers_data
- * @param array $triggers_data['triggerid]
- * @param array $triggers_data['depends_on_triggerid']
- * @return boolean
- */
-	public static function addDependencies($triggers_data){
-		$triggers_data = zbx_toArray($triggers_data);
-
-		$result = true;
-
-		self::BeginTransaction(__METHOD__);
-
-		foreach($triggers_data as $num => $dep){
-			$result &= (bool) insert_dependency($dep['triggerid'], $dep['depends_on_triggerid']);
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-
-		if($result)
-			return true;
-		else{
-			self::$error[] = array('error' => ZBX_API_ERROR_INTERNAL, 'data' => 'Internal zabbix error');
-			return false;
-		}
-	}
-
-/**
- * Delete trigger dependencis
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $triggers multidimensional array with trigger objects
- * @param array $triggers[0,...]['triggerid']
- * @return boolean
- */
-	public static function deleteDependencies($triggers){
-		$triggers = zbx_toArray($triggers);
-
-		$triggerids = array();
-		foreach($triggers as $num => $trigger){
-			$triggerids[] = $trigger['triggerid'];
-		}
-
-		self::BeginTransaction(__METHOD__);
-
-		$result = delete_dependencies_by_triggerid($triggerids);
-
-		$result = self::EndTransaction($result, __METHOD__);
-		if($result)
-			return true;
-		else{
-			self::$error[] = array('error' => ZBX_API_ERROR_INTERNAL, 'data' => 'Internal zabbix error');
-			return false;
-		}
-	}
-}
-
-?>
diff -rupN API/class.ctrigger.php classes/class.ctrigger.php
--- API/class.ctrigger.php	2011-11-14 11:55:59.000000000 +0100
+++ classes/class.ctrigger.php	2010-03-29 19:22:45.000000000 +0200
@@ -79,7 +79,6 @@ class CTrigger extends CZBXAPI{
 			'nodeids'				=> null,
 			'groupids'				=> null,
 			'hostids'				=> null,
-			'userid'			=> null,
 			'triggerids'			=> null,
 			'itemids'				=> null,
 			'applicationids'		=> null,
@@ -122,19 +121,6 @@ class CTrigger extends CZBXAPI{
 		$options = zbx_array_merge($def_options, $options);
 
 
-//API MODIFICADA INTEGRACION ZABBIX VNMS / WEB CESGA
-            if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1)); 
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-//FIN API MODIFICADA
-
-
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
 
@@ -1055,115 +1041,6 @@ COpt::memoryPick();
 			return false;
 		}
 	}
-
-
-	// getDATA_MVL
-public static function getDATA_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-	    'userid' => null,
-	    'eventid' => null,
-	    'ack' => null,
-	    'time' => null,
-            'infoHost' => null,
-            'infoTrigger' => null,
-            'idHost' => null,
-            'numTriggers' => null,
-	    'infoTriggersActivos' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-	
-	if(!is_null($options['eventid'])&&(!is_null($options['eventid']))&&
-		(!is_null($options['ack']))&&(!is_null($options['time']))){
-
-
-		$acknowledgeid = get_dbid("acknowledges","acknowledgeid");
-
-                $sql = 'INSERT INTO acknowledges(acknowledgeid,userid,eventid,clock,message) VALUES(
-                        '.$acknowledgeid.','.$options['userid'].','.$options['eventid'].','.$options['time'].',"OK")';
-                DBexecute($sql);
-                $sql= 'UPDATE events SET acknowledged=1 WHERE (eventid='. $options['eventid'] .')';
-                DBexecute($sql);
-
-        }
-	else if (!is_null($options['infoHost'])) {
-       	     $sql='SELECT DISTINCT h.hostid, h.host, g.name, h.ip, t.triggerid, t.priority, ev.eventid, ev.clock  FROM   triggers t,(SELECT  objectid,
-	max(eventid) as eventid, max(clock) as clock FROM events WHERE (value=1) GROUP BY objectid) ev, hosts h, groups g, hosts_groups hg, users_groups ug,
-	rights r, items it, functions f WHERE  (t.status=0) and(t.value=1)and(t.triggerid=ev.objectid)and (h.hostid=it.hostid)and (it.itemid=f.itemid)and
-	(f.triggerid=t.triggerid)and(g.groupid=hg.groupid)and(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='.
-	$options['userid'].')and(r.permission>1)and(h.hostid=hg.hostid)and(g.name NOT LIKE "^%")and(g.internal<>1)and
-	(g.name<>"Imported hosts")   group by h.host order by g.name DESC';
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-            while ($colum = DBfetch($res)) {
-                $sql='SELECT acknowledged FROM events WHERE (eventid='. $colum[eventid].')';
-                $res2 = DBselect($sql);
-                $col2 = DBfetch($res2);
-                $colum[acknowledged]=$col2['acknowledged'];
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-        else if (!is_null($options['infoTrigger']) && !is_null($options['idHost'])) {
-            $sql = 'SELECT t.description, t.status, t.priority, t.triggerid, t.value   FROM triggers t,'.
-                'functions f, items it WHERE (t.triggerid=f.triggerid)&&(it.itemid=f.itemid)&&(it.hostid='.
-                $options['idHost'].') ORDER BY t.value DESC';
-
-              
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-        }
-            else if (!is_null($options['infoTriggersActivos'])&&(!is_null($options['idHost']))) {
-           $sql = 'SELECT DISTINCT ev.eventid,ev.clock,ev.value "valorEvento",max(ev.clock) "timeEvento"'.
-            ',t.triggerid,t.description, t.value, t.status, t.priority FROM hosts h, triggers t, items it,'.
-            'functions f, events ev WHERE(h.hostid=it.hostid)and(it.itemid=f.itemid)and(f.triggerid=t.triggerid)'.
-            'and(t.status=0)and(t.value=1)and(ev.objectid=t.triggerid) and(ev.value=1)and(h.hostid='.
-            $options['idHost'].') group by t.triggerid order by t.priority DESC limit 10;'; 
-
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-}
 }
 
 ?>

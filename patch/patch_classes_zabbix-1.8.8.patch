diff -rupN classes_modif/class.caction.php classes/class.caction.php
--- classes_modif/class.caction.php	2011-11-14 12:11:52.000000000 +0100
+++ classes/class.caction.php	2011-11-09 11:00:37.000000000 +0100
@@ -850,71 +850,5 @@ COpt::memoryPick();
 			return false;
 		}
 	}
-
-
-	public static function action_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-            'status' => null,
-            'enable' => null,
-            'hostid' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-        
-        if(!is_null($options['status'])&&
-                (!is_null($options['hostid']))){
-                $sql="select actionid from conditions where actionid in (36) and conditiontype=1 and operator=1 and value='".$options['hostid']."'";
-
-            $res = DBselect($sql);
-            $resultado = array();
-            $colum = array();
-
-
-            $colum = DBfetch($res);
-            if ($colum>0) {
-                $resultado['status']="Desactivado";
-            } else {
-                $resultado['status']="Activado";
-            }
-                
-
-        } 
-        else if (!is_null($options['enable'])&&
-                (!is_null($options['hostid']))){
-
-
-                if($options['enable']=="false"){
-
-                $conditionid = get_dbid("conditions","conditionid");
-
-                $sql="insert into conditions (conditionid,actionid,conditiontype,operator,value) values (".$conditionid.",36,1,1,'".$options['hostid']."')";
-                DBexecute($sql);
-
-                } else if ($options['enable']=="true"){
-
-                $sql="delete from conditions where actionid in (36) and conditiontype=1 and operator=1 and value='".$options['hostid']."'";
-
-                DBexecute($sql);
-
-                }
-
-
-        }
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-	}
-
-
 }
 ?>
diff -rupN classes_modif/class.caction.php~ classes/class.caction.php~
--- classes_modif/class.caction.php~	2011-11-09 11:00:37.000000000 +0100
+++ classes/class.caction.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,854 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CAction class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Actions
- *
- */
-class CAction extends CZBXAPI{
-/**
- * Get Actions data
- *
- * @param _array $options
- * @param array $options['itemids']
- * @param array $options['hostids']
- * @param array $options['groupids']
- * @param array $options['actionids']
- * @param array $options['applicationids']
- * @param array $options['status']
- * @param array $options['editable']
- * @param array $options['extendoutput']
- * @param array $options['count']
- * @param array $options['pattern']
- * @param array $options['limit']
- * @param array $options['order']
- * @return array|int item data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('actionid','name'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-		$sql_parts = array(
-			'select' => array('actions' => 'a.actionid'),
-			'from' => array('actions' => 'actions a'),
-			'where' => array(),
-			'order' => array(),
-			'limit' => null,
-		);
-
-		$def_options = array(
-			'nodeids'				=> null,
-			'groupids'				=> null,
-			'hostids'				=> null,
-			'actionids'				=> null,
-			'triggerids'			=> null,
-			'mediatypeids'			=> null,
-			'userids'				=> null,
-			'nopermissions'			=> null,
-			'editable'				=> null,
-// filter
-			'filter'				=> null,
-			'search'				=> null,
-			'startSearch'			=> null,
-			'excludeSearch'			=> null,
-			'searchWildcardsEnabled'=> null,
-
-// OutPut
-			'extendoutput'			=> null,
-			'output'				=> API_OUTPUT_REFER,
-			'select_conditions'		=> null,
-			'select_operations'		=> null,
-			'countOutput'			=> null,
-			'preservekeys'			=> null,
-
-			'sortfield'				=> '',
-			'sortorder'				=> '',
-			'limit'					=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_conditions'])){
-				$options['select_conditions'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_operations'])){
-				$options['select_operations'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-
-// editable + PERMISSION CHECK
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || !is_null($options['nopermissions'])){
-		}
-		else{
-			$permission = $options['editable']?PERM_READ_WRITE:PERM_READ_ONLY;
-
-			$sql_parts['from']['conditions'] = 'conditions c';
-			$sql_parts['where']['ac'] = 'a.actionid=c.actionid';
-
-// condition hostgroup
-			$sql_parts['where'][] =
-				' NOT EXISTS('.
-					' SELECT cc.conditionid'.
-					' FROM conditions cc'.
-					' WHERE cc.conditiontype='.CONDITION_TYPE_HOST_GROUP.
-						' AND cc.actionid=c.actionid'.
-						' AND ('.
-							' NOT EXISTS('.
-								' SELECT rr.id'.
-								' FROM rights rr, users_groups ug'.
-								' WHERE rr.id='.zbx_dbcast_2bigint('cc.value').
-									' AND rr.groupid=ug.usrgrpid'.
-									' AND ug.userid='.$userid.
-									' AND rr.permission>='.$permission.
-							' )'.
-							' OR EXISTS('.
-								' SELECT rr.id'.
-								' FROM rights rr, users_groups ugg'.
-								' WHERE rr.id='.zbx_dbcast_2bigint('cc.value').
-									' AND rr.groupid=ugg.usrgrpid'.
-									' AND ugg.userid='.$userid.
-									' AND rr.permission<'.$permission.
-							' )'.
-						' )'.
-				' )';
-
-// condition host or template
-			$sql_parts['where'][] =
-				' NOT EXISTS('.
-					' SELECT cc.conditionid'.
-					' FROM conditions cc'.
-					' WHERE (cc.conditiontype='.CONDITION_TYPE_HOST.' OR cc.conditiontype='.CONDITION_TYPE_HOST_TEMPLATE.')'.
-						' AND cc.actionid=c.actionid'.
-						' AND ('.
-							' NOT EXISTS('.
-								' SELECT hgg.hostid'.
-								' FROM hosts_groups hgg, rights r,users_groups ug'.
-								' WHERE hgg.hostid='.zbx_dbcast_2bigint('cc.value').
-									' AND r.id=hgg.groupid'.
-									' AND ug.userid='.$userid.
-									' AND r.permission>='.$permission.
-									' AND r.groupid=ug.usrgrpid)'.
-							' OR EXISTS('.
-								' SELECT hgg.hostid'.
-									' FROM hosts_groups hgg, rights rr, users_groups gg'.
-									' WHERE hgg.hostid='.zbx_dbcast_2bigint('cc.value').
-										' AND rr.id=hgg.groupid'.
-										' AND rr.groupid=gg.usrgrpid'.
-										' AND gg.userid='.$userid.
-										' AND rr.permission<'.$permission.')'.
-							' )'.
-				' )';
-
-// condition trigger
-			$sql_parts['where'][] =
-				' NOT EXISTS('.
-					' SELECT cc.conditionid '.
-					' FROM conditions cc '.
-					' WHERE cc.conditiontype='.CONDITION_TYPE_TRIGGER.
-						' AND cc.actionid=c.actionid'.
-						' AND ('.
-							' NOT EXISTS('.
-								' SELECT f.triggerid'.
-								' FROM functions f, items i,hosts_groups hg, rights r, users_groups ug'.
-								' WHERE ug.userid='.$userid.
-									' AND r.groupid=ug.usrgrpid'.
-									' AND r.permission>='.$permission.
-									' AND hg.groupid=r.id'.
-									' AND i.hostid=hg.hostid'.
-									' AND f.itemid=i.itemid'.
-									' AND f.triggerid='.zbx_dbcast_2bigint('cc.value').')'.
-							' OR EXISTS('.
-								' SELECT ff.functionid'.
-								' FROM functions ff, items ii'.
-								' WHERE ff.triggerid='.zbx_dbcast_2bigint('cc.value').
-									' AND ii.itemid=ff.itemid'.
-									' AND EXISTS('.
-										' SELECT hgg.groupid'.
-										' FROM hosts_groups hgg, rights rr, users_groups ugg'.
-										' WHERE hgg.hostid=ii.hostid'.
-											' AND rr.id=hgg.groupid'.
-											' AND rr.groupid=ugg.usrgrpid'.
-											' AND ugg.userid='.$userid.
-											' AND rr.permission<'.$permission.'))'.
-					  ' )'.
-				' )';
-// condition users
-			$sql_parts['where'][] =
-				' NOT EXISTS('.
-					' SELECT o.operationid '.
-					' FROM operations o '.
-					' WHERE o.operationtype='.OPERATION_TYPE_MESSAGE.
-						' AND o.actionid=a.actionid'.
-						' AND (('.
-								' o.object='.OPERATION_OBJECT_USER.
-								' AND o.objectid NOT IN ('.
-									' SELECT DISTINCT ug.userid'.
-									' FROM users_groups ug'.
-									' WHERE ug.usrgrpid IN ('.
-										' SELECT uug.usrgrpid'.
-										' FROM users_groups uug'.
-										' WHERE uug.userid='.$USER_DETAILS['userid'].
-										' )'.
-									' )'.
-							' ) OR ('.
-								' o.object='.OPERATION_OBJECT_GROUP.
-								' AND o.objectid NOT IN ('.
-									' SELECT ug.usrgrpid'.
-									' FROM users_groups ug'.
-									' WHERE ug.userid='.$USER_DETAILS['userid'].
-									' )'.
-								' )'.
-						' )'.
-				' )';
-
-
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// actionids
-		if(!is_null($options['actionids'])){
-			zbx_value2array($options['actionids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['actionid'] = 'a.actionid';
-			}
-
-			$sql_parts['where'][] = DBcondition('a.actionid', $options['actionids']);
-		}
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupids'] = 'c.value';
-			}
-
-			$sql_parts['from']['conditions'] = 'conditions c';
-
-			$sql_parts['where'][] = DBcondition('c.value', $options['groupids'], false, true);
-			$sql_parts['where']['c'] = 'c.conditiontype='.CONDITION_TYPE_HOST_GROUP;
-			$sql_parts['where']['ac'] = 'a.actionid=c.actionid';
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['hostids'] = 'c.value';
-			}
-
-			$sql_parts['from']['conditions'] = 'conditions c';
-
-			$sql_parts['where'][] = DBcondition('c.value', $options['hostids'], false, true);
-			$sql_parts['where']['c'] = 'c.conditiontype='.CONDITION_TYPE_HOST;
-			$sql_parts['where']['ac'] = 'a.actionid=c.actionid';
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['triggerids'] = 'c.value';
-			}
-
-			$sql_parts['from']['conditions'] = 'conditions c';
-
-			$sql_parts['where'][] = DBcondition('c.value', $options['triggerids'], false, true);
-			$sql_parts['where']['c'] = 'c.conditiontype='.CONDITION_TYPE_TRIGGER;
-			$sql_parts['where']['ac'] = 'a.actionid=c.actionid';
-		}
-
-// mediatypeids
-		if(!is_null($options['mediatypeids'])){
-			zbx_value2array($options['mediatypeids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['mediatypeid'] = 'opm.mediatypeid';
-			}
-
-			$sql_parts['from']['opmediatypes'] = 'opmediatypes opm';
-			$sql_parts['from']['operations'] = 'operations o';
-
-			$sql_parts['where'][] = DBcondition('opm.mediatypeid', $options['mediatypeids']);
-			$sql_parts['where']['oopm'] = 'opm.operationid=o.operationid';
-			$sql_parts['where']['ao'] = 'a.actionid=o.actionid';
-		}
-
-// userids
-		if(!is_null($options['userids'])){
-			zbx_value2array($options['userids']);
-// TODO:
-		}
-
-// filter
-		if(is_array($options['filter'])){
-			zbx_db_filter('actions a', $options, $sql_parts);
-		}
-
-// search
-		if(is_array($options['search'])){
-			zbx_db_search('actions a', $options, $sql_parts);
-		}
-
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['actions'] = 'a.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-
-			$sql_parts['select'] = array('COUNT(DISTINCT a.actionid) as rowscount');
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 'a.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('a.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('a.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 'a.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//---------------
-
-		$actionids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.DBin_node('a.actionid', $nodeids).
-					$sql_where.
-				$sql_order;
-//SDI($sql);
-		$db_res = DBselect($sql, $sql_limit);
-		while($action = DBfetch($db_res)){
-
-			if($options['countOutput']){
-				$result = $action['rowscount'];
-			}
-			else{
-				$actionids[$action['actionid']] = $action['actionid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$action['actionid']] = array('actionid' => $action['actionid']);
-				}
-				else{
-					if(!isset($result[$action['actionid']])) $result[$action['actionid']]= array();
-
-					if(!is_null($options['select_conditions']) && !isset($result[$action['actionid']]['conditions'])){
-						$result[$action['actionid']]['conditions'] = array();
-					}
-
-					if(!is_null($options['select_operations']) && !isset($result[$action['actionid']]['operations'])){
-						$result[$action['actionid']]['operations'] = array();
-					}
-
-					$result[$action['actionid']] += $action;
-				}
-			}
-		}
-
-COpt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding Objects
-// Adding Conditions
-		if(!is_null($options['select_conditions']) && str_in_array($options['select_conditions'], $subselects_allowed_outputs)){
-			$sql = 'SELECT c.* FROM conditions c WHERE '.DBcondition('c.actionid', $actionids);
-			$res = DBselect($sql);
-			while($condition = DBfetch($res)){
-				$result[$condition['actionid']]['conditions'][] = $condition;
-			}
-		}
-
-// Adding Operations
-		if(!is_null($options['select_operations']) && str_in_array($options['select_operations'], $subselects_allowed_outputs)){
-			$operations = array();
-			$operationids = array();
-			$sql = 'SELECT o.* '.
-					' FROM operations o '.
-					' WHERE '.DBcondition('o.actionid', $actionids);
-			$res = DBselect($sql);
-			while($operation = DBfetch($res)){
-				$operation['opconditions'] = array();
-				$operation['opmediatypes'] = array();
-
-				$operations[$operation['operationid']] = $operation;
-				$operationids[$operation['operationid']] = $operation['operationid'];
-			}
-
-			$sql = 'SELECT op.* FROM opconditions op WHERE '.DBcondition('op.operationid', $operationids);
-			$res = DBselect($sql);
-			while($opcondition = DBfetch($res)){
-				$operations[$opcondition['operationid']]['opconditions'][] = $opcondition;
-			}
-
-			$sql = 'SELECT op.* FROM opmediatypes op WHERE '.DBcondition('op.operationid', $operationids);
-			$res = DBselect($sql);
-			while($opmediatype = DBfetch($res)){
-				$operations[$opmediatype['operationid']]['opmediatypes'][] = $opmediatype;
-			}
-
-			foreach($operations as $num => $operation){
-				$result[$operation['actionid']]['operations'][] = $operation;
-			}
-		}
-
-COpt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('actionid', 'name'));
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$objs = self::get($options);
-
-	return !empty($objs);
-	}
-/**
- * Add actions
- *
- * @param _array $actions multidimensional array with actions data
- * @param array $actions[0,...]['expression']
- * @param array $actions[0,...]['description']
- * @param array $actions[0,...]['type'] OPTIONAL
- * @param array $actions[0,...]['priority'] OPTIONAL
- * @param array $actions[0,...]['status'] OPTIONAL
- * @param array $actions[0,...]['comments'] OPTIONAL
- * @param array $actions[0,...]['url'] OPTIONAL
- * @return boolean
- */
-	public static function create($actions){
-		$actions = zbx_toArray($actions);
-		$conditions = array();
-		$operations = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-// Check fields
-			$action_db_fields = array(
-				'name' => null,
-				'eventsource' => null,
-				'evaltype' => null,
-			);
-			$duplicates = array();
-			foreach($actions as $anum => $action){
-				if(!check_db_fields($action_db_fields, $action)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_ACTION.' [ '.$action['name'].' ]');
-				}
-
-				if(isset($duplicates[$action['name']]))
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_ACTION.' [ '.$action['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-				else
-					$duplicates[$action['name']] = $action['name'];
-			}
-
-			$options = array(
-				'filter' => array('name' => $duplicates),
-				'output' => API_OUTPUT_EXTEND,
-				'editable' => 1,
-				'nopermissions' => 1
-			);
-			$dbActions = self::get($options);
-			foreach($dbActions as $anum => $dbAction){
-				self::exception(ZBX_API_ERROR_PARAMETERS, S_ACTION.' [ '.$dbAction['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-			}
-//------
-
-			$actionids = DB::insert('actions', $actions);
-
-			foreach($actions as $anum => $action){
-				if(isset($action['conditions']) && !empty($action['conditions'])){
-					foreach($action['conditions'] as $condition){
-						$conditions[] = array_merge(array('actionid' => $actionids[$anum]), $condition);
-					}
-				}
-
-				if(!isset($action['operations']) || empty($action['operations'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_ACTION.' [ '.$action['name'].' ]');
-				}
-				else{
-					foreach($action['operations'] as $operation){
-						$operations[] = array_merge(array('actionid' => $actionids[$anum]), $operation);
-					}
-				}
-			}
-
-			self::addOperations($operations);
-			self::addConditions($conditions);
-
-			self::EndTransaction(true, __METHOD__);
-			return array('actionids' => $actionids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update actions
- *
- * @param _array $actions multidimensional array with actions data
- * @param array $actions[0,...]['actionid']
- * @param array $actions[0,...]['expression']
- * @param array $actions[0,...]['description']
- * @param array $actions[0,...]['type'] OPTIONAL
- * @param array $actions[0,...]['priority'] OPTIONAL
- * @param array $actions[0,...]['status'] OPTIONAL
- * @param array $actions[0,...]['comments'] OPTIONAL
- * @param array $actions[0,...]['url'] OPTIONAL
- * @return boolean
- */
-	public static function update($actions){
-		$actions = zbx_toArray($actions);
-		$actionids = zbx_objectValues($actions, 'actionid');
-
-		$update = array();
-		$operations = array();
-		$conditions = array();
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'actionids' => $actionids,
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1
-			);
-			$upd_actions = self::get($options);
-			foreach($actions as $anum => $action){
-				if(!isset($upd_actions[$action['actionid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSIONS);
-				}
-			}
-
-// Check fields
-			$action_db_fields = array(
-				'actionid' => null
-			);
-
-			$duplicates = array();
-			foreach($actions as $anum => $action){
-				if(!check_db_fields($action_db_fields, $action)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_ACTION.' [ '.$action['name'].' ]');
-				}
-
-				if(!isset($action['name'])) continue;
-
-				if(isset($duplicates[$action['name']]))
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_ACTION.' [ '.$action['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-				else
-					$duplicates[$action['name']] = $action['name'];
-			}
-//------
-
-			foreach($actions as $anum => $action){
-// Existance
-				$options = array(
-					'filter' => array( 'name' => $action['name'] ),
-					'output' => API_OUTPUT_SHORTEN,
-					'editable' => 1,
-					'nopermissions' => 1
-				);
-				$action_exists = self::get($options);
-				if(($action_exist = reset($action_exists)) && ($action_exist['actionid'] != $action['actionid'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_ACTION.' [ '.$action['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-//----
-
-				if(isset($action['conditions']) && !empty($action['conditions'])){
-					foreach($action['conditions'] as $condition){
-						$conditions[] = array_merge(array('actionid' => $action['actionid']), $condition);
-					}
-				}
-
-				if(!isset($action['operations']) || empty($action['operations'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_ACTION.' [ '.$action['name'].' ]');
-				}
-				else{
-					foreach($action['operations'] as $operation){
-						$operations[] = array_merge(array('actionid' => $action['actionid']), $operation);
-					}
-				}
-
-				$actionid = $action['actionid'];
-				unset($action['actionid']);
-				if(!empty($action)){
-					$update[] = array(
-						'values' => $action,
-						'where' => array('actionid='.$actionid),
-					);
-				}
-			}
-
-			DB::update('actions', $update);
-
-			$operationids = array();
-			$sql = 'SELECT operationid FROM operations WHERE '.DBcondition('actionid', $actionids);
-			$operations_db = DBselect($sql);
-			while($operationid = DBfetch($operations_db)){
-				$operationids[] = $operationid['operationid'];
-			}
-
-			DB::delete('conditions', DBcondition('actionid', $actionids));
-			DB::delete('opconditions', DBcondition('operationid', $operationids));
-			DB::delete('opmediatypes', DBcondition('operationid', $operationids));
-			DB::delete('operations', DBcondition('actionid', $actionids));
-
-			self::addOperations($operations);
-			self::addConditions($conditions);
-
-			self::EndTransaction(true, __METHOD__);
-			return array('actionids' => $actionids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * add conditions
- *
- * @param array $conditions multidimensional array with conditions data
- * @param array $conditions[0,...]['actionid']
- * @param array $conditions[0,...]['conditiontype']
- * @param array $conditions[0,...]['value']
- * @param array $conditions[0,...]['operator']
- * @return boolean
- */
-	protected static function addConditions($conditions){
-		$conditions = zbx_toArray($conditions);
-		$conditions_insert = array();
-
-		if(!check_permission_for_action_conditions($conditions)){
-			self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSIONS);
-		}
-
-		foreach($conditions as $cnum => $condition){
-			if(!validate_condition($condition['conditiontype'], $condition['value'])){
-				self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_CONDITIONS);
-			}
-			$conditions_insert[] = $condition;
-		}
-
-		DB::insert('conditions', $conditions_insert);
-
-		return true;
-	}
-
-/**
- * add operations
- *
- * @param array $operations multidimensional array with operations data
- * @param array $operations[0,...]['actionid']
- * @param array $operations[0,...]['operationtype']
- * @param array $operations[0,...]['object']
- * @param array $operations[0,...]['objectid']
- * @param array $operations[0,...]['shortdata']
- * @param array $operations[0,...]['longdata']
- * @param array $operations[0,...]['esc_period']
- * @param array $operations[0,...]['esc_step_from']
- * @param array $operations[0,...]['esc_step_to']
- * @param array $operations[0,...]['default_msg']
- * @param array $operations[0,...]['evaltype']
- * @param array $operations[0,...]['mediatypeid']
- * @param array $operations[0,...]['opconditions']
- * @param array $operations[0,...]['opconditions']['conditiontype']
- * @param array $operations[0,...]['opconditions']['operator']
- * @param array $operations[0,...]['opconditions']['value']
- * @return boolean
- */
-	protected static function addOperations($operations){
-		$operations = zbx_toArray($operations);
-		$operation_inserts = array();
-		$opcondition_inserts = array();
-		$opmediatype_inserts = array();
-
-		foreach($operations as $onum => $operation){
-			if(!validate_operation($operation)){
-				self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-			}
-		}
-
-		foreach($operations as $onum => $operation){
-			$operation_db_fields = array(
-				'actionid' => null,
-				'operationtype' => null,
-			);
-			if(!check_db_fields($operation_db_fields, $operation)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, S_INCORRECT_PARAMETER_USED_FOR_OPERATIONS);
-			}
-
-			$operation_inserts[$onum] = $operation;
-		}
-
-		$operationids = DB::insert('operations', $operation_inserts);
-
-		foreach($operations as $onum => $operation){
-			if(isset($operation['opconditions'])){
-				foreach($operation['opconditions'] as $opcondition){
-					$opcondition['operationid'] = $operationids[$onum];
-					$opcondition_inserts[] = $opcondition;
-				}
-			}
-
-			if($operation['mediatypeid'] > 0){
-				$opmediatype_inserts[] = array(
-					'operationid' => $operationids[$onum],
-					'mediatypeid' => $operation['mediatypeid'],
-				);
-			}
-		}
-
-		DB::insert('opconditions', $opcondition_inserts);
-		DB::insert('opmediatypes', $opmediatype_inserts);
-
-		return true;
-	}
-
-/**
- * Delete actions
- *
- * @param array $actionids
- * @param array $actionids['actionids']
- * @return boolean
- */
-	public static function delete($actionids){
-		if(empty($actionids)) return true;
-		$actionids = zbx_toArray($actionids);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'actionids' => $actionids,
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1
-			);
-			$del_actions = self::get($options);
-			foreach($actionids as $actionid){
-				if(!isset($del_actions[$actionid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			$operationids = array();
-			$sql = 'SELECT operationid FROM operations WHERE '.DBcondition('actionid', $actionids);
-			$operations_db = DBselect($sql);
-			while($operationid = DBfetch($operations_db)){
-				$operationids[] = $operationid['operationid'];
-			}
-
-			DB::delete('conditions', DBcondition('actionid', $actionids));
-			DB::delete('opconditions', DBcondition('operationid', $operationids));
-			DB::delete('opmediatypes', DBcondition('operationid', $operationids));
-			DB::delete('alerts', DBcondition('actionid', $actionids));
-			DB::delete('operations', DBcondition('actionid', $actionids));
-			DB::delete('actions', DBcondition('actionid', $actionids));
-
-			self::EndTransaction(true, __METHOD__);
-
-			return array('actionids' => $actionids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-}
-?>
diff -rupN classes_modif/class.cevent.php classes/class.cevent.php
--- classes_modif/class.cevent.php	2011-11-14 12:11:19.000000000 +0100
+++ classes/class.cevent.php	2011-11-09 11:00:37.000000000 +0100
@@ -776,49 +776,5 @@ Copt::memoryPick();
 		}
 	}
 
-
-	public static function event_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-            'clock' => null,
-            'triggerid' => null
-        );
-
-        if(!is_null($options['clock'])&&
-                (!is_null($options['triggerid']))){
-
-        $sql = "select * from events where (objectid=".$options['triggerid'].")&&(clock=".
-                        $options['clock'].")";
-            
-        $res = DBselect($sql);
-        $i=0;
-
-        $resultado = array();
-        $colum = array();
-
-
-
-        while ($colum=DBfetch($res)) {
-                        $resultado[$i]= $colum;
-                        $i=$i+1;
-        }
-
-
-        } 
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-}
-
-
 }
 ?>
diff -rupN classes_modif/class.cevent.php~ classes/class.cevent.php~
--- classes_modif/class.cevent.php~	2011-11-09 11:00:37.000000000 +0100
+++ classes/class.cevent.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,780 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CEvent class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with events
- *
- */
-class CEvent extends CZBXAPI{
-/**
- * Get events data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['itemids']
- * @param array $options['hostids']
- * @param array $options['groupids']
- * @param array $options['eventids']
- * @param array $options['applicationids']
- * @param array $options['status']
- * @param array $options['editable']
- * @param array $options['extendoutput']
- * @param array $options['count']
- * @param array $options['pattern']
- * @param array $options['limit']
- * @param array $options['order']
- * @return array|int item data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$nodeCheck = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('eventid', 'clock'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-		$sql_parts = array(
-			'select' => array('events' => array('e.eventid')),
-			'from' => array('events' => 'events e'),
-			'where' => array(),
-			'order' => array(),
-			'limit' => null
-		);
-
-		$def_options = array(
-			'nodeids'				=> null,
-			'groupids'				=> null,
-			'hostids'				=> null,
-			'triggerids'			=> null,
-			'eventids'				=> null,
-			'editable'				=> null,
-			'object'				=> null,
-			'source'				=> null,
-			'acknowledged'			=> null,
-			'nopermissions'			=> null,
-// filter
-			'hide_unknown'			=> null,
-			'value'					=> null,
-			'time_from'				=> null,
-			'time_till'				=> null,
-			'eventid_from'			=> null,
-			'eventid_till'			=> null,
-// OutPut
-			'output'				=> API_OUTPUT_REFER,
-			'extendoutput'			=> null,
-			'select_hosts'			=> null,
-			'select_items'			=> null,
-			'select_triggers'		=> null,
-			'countOutput'			=> null,
-			'preservekeys'			=> null,
-
-			'sortfield'				=> '',
-			'sortorder'				=> '',
-			'limit'					=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_hosts'])){
-				$options['select_hosts'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_triggers'])){
-				$options['select_triggers'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-
-// editable + PERMISSION CHECK
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			if(is_null($options['source']) && is_null($options['object'])){
-				$options['object'] = EVENT_OBJECT_TRIGGER;
-			}
-
-			if(($options['object'] == EVENT_OBJECT_TRIGGER) || ($options['source'] == EVENT_SOURCE_TRIGGER)){
-				if(!is_null($options['triggerids'])){
-					$triggerOptions = array(
-						'triggerids' => $options['triggerids'],
-						'editable' => $options['editable']
-					);
-
-					$triggers = CTrigger::get($triggerOptions);
-					$options['triggerids'] = zbx_objectValues($triggers, 'triggerid');
-				}
-				else{
-					$permission = $options['editable']?PERM_READ_WRITE:PERM_READ_ONLY;
-
-					$sql_parts['from']['functions'] = 'functions f';
-					$sql_parts['from']['items'] = 'items i';
-					$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-					$sql_parts['from']['rights'] = 'rights r';
-					$sql_parts['from']['users_groups'] = 'users_groups ug';
-					$sql_parts['where']['e'] = 'e.object='.EVENT_OBJECT_TRIGGER;
-					$sql_parts['where']['fe'] = 'f.triggerid=e.objectid';
-					$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-					$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-					$sql_parts['where'][] = 'r.id=hg.groupid ';
-					$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-					$sql_parts['where'][] = 'ug.userid='.$userid;
-					$sql_parts['where'][] = 'r.permission>='.$permission;
-					$sql_parts['where'][] = 'NOT EXISTS( '.
-													' SELECT ff.triggerid '.
-													' FROM functions ff, items ii '.
-													' WHERE ff.triggerid=e.objectid '.
-														' AND ff.itemid=ii.itemid '.
-														' AND EXISTS( '.
-															' SELECT hgg.groupid '.
-															' FROM hosts_groups hgg, rights rr, users_groups gg '.
-															' WHERE hgg.hostid=ii.hostid '.
-																' AND rr.id=hgg.groupid '.
-																' AND rr.groupid=gg.usrgrpid '.
-																' AND gg.userid='.$userid.
-																' AND rr.permission<'.$permission.'))';
-				}
-			}
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// eventids
-		if(!is_null($options['eventids'])){
-			zbx_value2array($options['eventids']);
-
-			$sql_parts['where'][] = DBcondition('e.eventid', $options['eventids']);
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('e.objectid', $nodeids);
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids']) && ($options['object'] == EVENT_OBJECT_TRIGGER)){
-			zbx_value2array($options['triggerids']);
-			$sql_parts['where'][] = DBcondition('e.objectid', $options['triggerids']);
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('e.objectid', $nodeids);
-			}
-		}
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hg'] = DBcondition('hg.groupid', $options['groupids']);
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['fe'] = 'f.triggerid=e.objectid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['hostid'] = 'i.hostid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where']['i'] = DBcondition('i.hostid', $options['hostids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=e.objectid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-		}
-
-// node check !!!!!
-// should last, after all ****IDS checks
-		if(!$nodeCheck){
-			$nodeCheck = true;
-			$sql_parts['where'][] = DBin_node('e.eventid', $nodeids);
-		}
-
-// object
-		if(!is_null($options['object'])){
-			$sql_parts['where']['o'] = 'e.object='.$options['object'];
-		}
-
-// source
-		if(!is_null($options['source'])){
-			$sql_parts['where'][] = 'e.source='.$options['source'];
-		}
-// acknowledged
-		if(!is_null($options['acknowledged'])){
-			$sql_parts['where'][] = 'e.acknowledged='.($options['acknowledged']?1:0);
-		}
-// hide_unknown
-		if(!is_null($options['hide_unknown'])){
-			$sql_parts['where'][] = 'e.value<>'.TRIGGER_VALUE_UNKNOWN;
-		}
-// time_from
-		if(!is_null($options['time_from'])){
-			$sql_parts['where'][] = 'e.clock>='.$options['time_from'];
-		}
-// time_till
-		if(!is_null($options['time_till'])){
-			$sql_parts['where'][] = 'e.clock<='.$options['time_till'];
-		}
-// eventid_from
-		if(!is_null($options['eventid_from'])){
-			$sql_parts['where'][] = 'e.eventid>='.$options['eventid_from'];
-		}
-// eventid_till
-		if(!is_null($options['eventid_till'])){
-			$sql_parts['where'][] = 'e.eventid<='.$options['eventid_till'];
-		}
-// value
-		if(!is_null($options['value'])){
-			zbx_value2array($options['value']);
-
-			$sql_parts['where'][] = DBcondition('e.value', $options['value']);
-		}
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['events'] = array('e.*');
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array(
-				'events' => array('COUNT(DISTINCT e.eventid) as rowscount')
-			);
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 'e.'.$options['sortfield'].' '.$sortorder;
-
-			if(!is_null($options['triggerids']) && ($options['sortfield'] == 'clock')){
-				$sql_parts['where']['o'] = '(e.object-0)='.EVENT_OBJECT_TRIGGER;
-			}
-
-			$eventFields = $sql_parts['select']['events'];
-			if(!str_in_array('e.'.$options['sortfield'], $eventFields) && !str_in_array('e.*', $eventFields)){
-				$sql_parts['select']['events'][] = 'e.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-
-// select_********
-		if(($options['output'] != API_OUTPUT_EXTEND) && (!is_null($options['select_hosts']) || !is_null($options['select_triggers']) || !is_null($options['select_items'])))
-		{
-			$sql_parts['select']['events'][] = 'e.object';
-			$sql_parts['select']['events'][] = 'e.objectid';
-		}
-//---------------
-
-		$eventids = array();
-		$triggerids = array();
-
-// Event fields
-		$sql_parts['select']['events'] = implode(',', array_unique($sql_parts['select']['events']));
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.zbx_db_distinct($sql_parts).' '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.$sql_where.
-				$sql_order;
-		$db_res = DBselect($sql, $sql_limit);
- //SDI($sql);
-		while($event = DBfetch($db_res)){
-			if($options['countOutput']){
-				$result = $event['rowscount'];
-			}
-			else{
-				$eventids[$event['eventid']] = $event['eventid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$event['eventid']] = array('eventid' => $event['eventid']);
-				}
-				else{
-					if(isset($event['object']) && ($event['object'] == EVENT_OBJECT_TRIGGER)){
-						$triggerids[$event['objectid']] = $event['objectid'];
-					}
-
-					if(!isset($result[$event['eventid']])) $result[$event['eventid']]= array();
-
-					if(!is_null($options['select_hosts']) && !isset($result[$event['eventid']]['hosts'])){
-						$result[$event['eventid']]['hosts'] = array();
-					}
-
-					if(!is_null($options['select_triggers']) && !isset($result[$event['eventid']]['triggers'])){
-						$result[$event['eventid']]['triggers'] = array();
-					}
-
-					if(!is_null($options['select_items']) && !isset($result[$event['eventid']]['items'])){
-						$result[$event['eventid']]['items'] = array();
-					}
-
-// hostids
-					if(isset($event['hostid']) && is_null($options['select_hosts'])){
-						if(!isset($result[$event['eventid']]['hosts'])) $result[$event['eventid']]['hosts'] = array();
-
-						$result[$event['eventid']]['hosts'][] = array('hostid' => $event['hostid']);
-						unset($event['hostid']);
-					}
-
-// triggerids
-					if(isset($event['triggerid']) && is_null($options['select_triggers'])){
-						if(!isset($result[$event['eventid']]['triggers'])) $result[$event['eventid']]['triggers'] = array();
-
-						$result[$event['eventid']]['triggers'][] = array('triggerid' => $event['triggerid']);
-						unset($event['triggerid']);
-					}
-
-// itemids
-					if(isset($event['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$event['eventid']]['items'])) $result[$event['eventid']]['items'] = array();
-
-						$result[$event['eventid']]['items'][] = array('itemid' => $event['itemid']);
-						unset($event['itemid']);
-					}
-
-					$result[$event['eventid']] += $event;
-				}
-			}
-		}
-
-
-Copt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding Objects
-// Adding hosts
-		if(!is_null($options['select_hosts']) && str_in_array($options['select_hosts'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_hosts'],
-				'triggerids' => $triggerids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$hosts = CHost::get($obj_params);
-
-			$triggers = array();
-			foreach($hosts as $hostid => $host){
-				$htriggers = $host['triggers'];
-				unset($host['triggers']);
-				foreach($htriggers as $tnum => $trigger){
-					$triggerid = $trigger['triggerid'];
-					if(!isset($triggers[$triggerid])) $triggers[$triggerid] = array('hosts' => array());
-
-					$triggers[$triggerid]['hosts'][] = $host;
-				}
-			}
-
-			foreach($result as $eventid => $event){
-				if(isset($triggers[$event['objectid']])){
-					$result[$eventid]['hosts'] = $triggers[$event['objectid']]['hosts'];
-				}
-				else{
-					$result[$eventid]['hosts'] = array();
-				}
-			}
-		}
-
-// Adding triggers
-		if(!is_null($options['select_triggers']) && str_in_array($options['select_triggers'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_triggers'],
-				'triggerids' => $triggerids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$triggers = CTrigger::get($obj_params);
-			foreach($result as $eventid => $event){
-				if(isset($triggers[$event['objectid']])){
-					$result[$eventid]['triggers'][] = $triggers[$event['objectid']];
-				}
-				else{
-					$result[$eventid]['triggers'] = array();
-				}
-			}
-		}
-
-// Adding items
-		if(!is_null($options['select_items']) && str_in_array($options['select_items'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_items'],
-				'triggerids' => $triggerids,
-				'webitems' => 1,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$db_items = CItem::get($obj_params);
-			$items = array();
-
-			foreach($db_items as $itemid => $item){
-				$itriggers = $item['triggers'];
-				unset($item['triggers']);
-				foreach($itriggers as $trigger){
-					if(!isset($items[$trigger['triggerid']])) $items[$trigger['triggerid']] = array();
-
-					$items[$trigger['triggerid']][] = $item;
-				}
-			}
-
-			foreach($result as $eventid => $event){
-				if(isset($items[$event['objectid']])){
-					$result[$eventid]['items'] = $items[$event['objectid']];
-				}
-				else{
-					$result[$eventid]['items'] = array();
-				}
-			}
-		}
-
-
-// removing keys (hash -> array)
-
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-
-	return $result;
-	}
-
-/**
- * Add events ( without alerts )
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $events multidimensional array with events data
- * @param array $events[0,...]['source']
- * @param array $events[0,...]['object']
- * @param array $events[0,...]['objectid']
- * @param array $events[0,...]['clock'] OPTIONAL
- * @param array $events[0,...]['value'] OPTIONAL
- * @param array $events[0,...]['acknowledged'] OPTIONAL
- * @return boolean
- */
-	public static function create($events){
-		$events = zbx_toArray($events);
-
-		$eventids = array();
-		$result = true;
-
-		$options = array(
-			'triggerids' => zbx_objectValues($events, 'objectid'),
-			'output' => API_OUTPUT_EXTEND,
-			'preservekeys' => 1
-		);
-		$triggers = CTrigger::get($options);
-
-		foreach($events as $num => $event){
-			if($event['object'] != EVENT_OBJECT_TRIGGER) continue;
-
-			if(isset($triggers[$event['objectid']])){
-				$trigger = $triggers[$event['objectid']];
-
-				if(($event['value'] != $trigger['value']) || (($event['value'] == TRIGGER_VALUE_TRUE) && ($trigger['type'] == TRIGGER_MULT_EVENT_ENABLED))){
-					continue;
-				}
-			}
-
-			unset($events[$num]);
-		}
-
-		self::BeginTransaction(__METHOD__);
-		foreach($events as $num => $event){
-			$event_db_fields = array(
-				'source'		=> null,
-				'object'		=> null,
-				'objectid'		=> null,
-				'clock'			=> time(),
-				'value'			=> 0,
-				'acknowledged'	=> 0
-			);
-
-			if(!check_db_fields($event_db_fields, $event)){
-				$result = false;
-				break;
-			}
-
-			$eventid = get_dbid('events','eventid');
-			$sql = 'INSERT INTO events (eventid, source, object, objectid, clock, value, acknowledged) '.
-					' VALUES ('.$eventid.','.
-								$event['source'].','.
-								$event['object'].','.
-								$event['objectid'].','.
-								$event['clock'].','.
-								$event['value'].','.
-								$event['acknowledged'].
-							')';
-			$result = DBexecute($sql);
-			if(!$result) break;
-
-//			$triggers[] = array('triggerid' => $event['objectid'], 'value'=> $event['value'], 'lastchange'=> $event['clock']);
-
-			$eventids[$eventid] = $eventid;
-		}
-
-		if($result){
-// This will create looping (Trigger->Event->Trigger->Event)
-//			$result = CTrigger::update($triggers);
-		}
-
-		$result = self::EndTransaction($result, __METHOD__);
-		if($result){
-			return $eventids;
-		}
-		else{
-			self::$error[] = array('error' => ZBX_API_ERROR_INTERNAL, 'data' => 'Internal Zabbix error');
-			return false;
-		}
-	}
-
-/**
- * Delete events by eventids
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $eventids
- * @param array $eventids['eventids']
- * @return boolean
- */
-	public static function delete($eventids){
-		$eventids = zbx_toArray($eventids);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'eventids' => $eventids,
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1
-			);
-			$del_events = self::get($options);
-			foreach($eventids as $enum => $eventid){
-				if(!isset($del_events[$eventid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			$result = DBexecute('DELETE FROM events WHERE '.DBcondition('eventid', $eventids));
-			$result &= DBexecute('DELETE FROM alerts WHERE '.DBcondition('eventid', $eventids));
-
-			if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Can not delete event');
-
-			self::EndTransaction(true, __METHOD__);
-			return array('eventids' => $eventids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-	/**
-	 * Delete events by triggerids
-	 *
-	 * {@source}
-	 * @access public
-	 * @static
-	 * @since 1.8
-	 * @version 1
-	 *
-	 * @param _array $triggerids
-	 * @return boolean
-	 */
-	public static function deleteByTriggerIDs($triggerids){
-		zbx_value2array($triggerids);
-		$sql = 'DELETE FROM events e WHERE e.object='.EVENT_OBJECT_TRIGGER.' AND '.DBcondition('e.objectid', $triggerids);
-		$result = DBexecute($sql);
-
-		if($result)
-			return true;
-		else{
-			self::$error[] = array('error' => ZBX_API_ERROR_INTERNAL, 'data' => 'Internal Zabbix error');
-			return false;
-		}
-	}
-
-	public static function acknowledge($data){
-		global $USER_DETAILS;
-
-		$eventids = isset($data['eventids']) ? zbx_toArray($data['eventids']) : array();
-		$eventids = zbx_toHash($eventids);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-// PERMISSIONS {{{
-			$options = array(
-				'eventids' => $eventids,
-				'output' => API_OUTPUT_EXTEND,
-				'select_triggers' => API_OUTPUT_EXTEND,
-				'preservekeys' => 1
-			);
-			$allowedEvents = self::get($options);
-			foreach($eventids as $num => $eventid){
-				if(!isset($allowedEvents[$eventid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSIONS);
-				}
-			}
-// }}} PERMISSIONS
-
-			foreach($allowedEvents as $aenum => $event){
-				$trig = reset($event['triggers']);
-				if(!(($trig['type'] == TRIGGER_MULT_EVENT_ENABLED) && ($event['value'] == TRIGGER_VALUE_TRUE))){
-
-					$val = ($event['value'] == TRIGGER_VALUE_TRUE ? TRIGGER_VALUE_FALSE : TRIGGER_VALUE_TRUE);
-
-					$sql = ' SELECT eventid, object, objectid '.
-						' FROM events '.
-						' WHERE eventid < '.$event['eventid'].
-							' AND objectid = '.$event['objectid'].
-							' AND value = '.$val.
-							' AND object = '.EVENT_OBJECT_TRIGGER.
-						' ORDER BY object desc, objectid desc, eventid DESC';
-					$first = DBfetch(DBselect($sql, 1));
-					$first_sql = $first ? ' AND e.eventid > '.$first['eventid'] : '';
-
-
-					$sql = ' SELECT eventid, object, objectid'.
-						' FROM events'.
-						' WHERE eventid > '.$event['eventid'].
-							' AND objectid = '.$event['objectid'].
-							' AND value = '.$val.
-							' AND object = '.EVENT_OBJECT_TRIGGER.
-						' ORDER BY object ASC, objectid ASC, eventid ASC';
-					$last = DBfetch(DBselect($sql, 1));
-					$last_sql = $last ? ' AND e.eventid < '.$last['eventid'] : '';
-
-
-					$sql = 'SELECT e.eventid'.
-						' FROM events e'.
-						' WHERE e.objectid = '.$event['objectid'].
-							' AND e.value = '. ($val ? TRIGGER_VALUE_FALSE : TRIGGER_VALUE_TRUE).
-							$first_sql.
-							$last_sql;
-
-					$db_events = DBselect($sql);
-					while($eventid = DBfetch($db_events)){
-						$eventids[$eventid['eventid']] = $eventid['eventid'];
-					}
-				}
-			}
-
-			$sql = 'UPDATE events SET acknowledged=1 WHERE '.DBcondition('eventid', $eventids);
-			if(!DBexecute($sql)) self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-
-			$time = time();
-			$dataInsert = array();
-			foreach($eventids as $enum => $eventid){
-				$dataInsert[] = array(
-					'userid' => $USER_DETAILS['userid'],
-					'eventid' => $eventid,
-					'clock' => $time,
-					'message'=> $data['message']
-				);
-			}
-
-			DB::insert('acknowledges', $dataInsert);
-
-			self::EndTransaction(true, __METHOD__);
-
-			return array('eventids' => array_values($eventids));
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-
-			$error = $e->getErrors();
-			$error = reset($error);
-
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-}
-?>
diff -rupN classes_modif/class.chostgroup.php classes/class.chostgroup.php
--- classes_modif/class.chostgroup.php	2011-11-14 12:04:38.000000000 +0100
+++ classes/class.chostgroup.php	2011-11-09 11:00:37.000000000 +0100
@@ -53,7 +53,6 @@ class CHostGroup extends CZBXAPI{
 		);
 
 		$def_options = array(
-			'userid'					=> null,
 			'nodeids'					=> null,
 			'groupids'					=> null,
 			'hostids'					=> null,
@@ -101,14 +100,6 @@ class CHostGroup extends CZBXAPI{
 
 		$options = zbx_array_merge($def_options, $params);
 
-                if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
 
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
diff -rupN classes_modif/class.chostgroup.php~ classes/class.chostgroup.php~
--- classes_modif/class.chostgroup.php~	2011-11-14 12:01:56.000000000 +0100
+++ classes/class.chostgroup.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,1017 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CHostGroup class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with HostGroups
- */
-class CHostGroup extends CZBXAPI{
-/**
- * Get HostGroups
- *
- * @param array $params
- * @return array
- */
-	public static function get($params){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('groupid', 'name'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select'	=> array('groups' => 'g.groupid'),
-			'from' 		=> array('groups' => 'groups g'),
-			'where' 	=> array(),
-			'order' 	=> array(),
-			'limit' 	=> null
-		);
-
-		$def_options = array(
-			'userid'					=> null,
-			'nodeids'					=> null,
-			'groupids'					=> null,
-			'hostids'					=> null,
-			'templateids'				=> null,
-			'graphids'					=> null,
-			'triggerids'				=> null,
-			'maintenanceids'			=> null,
-			'monitored_hosts'			=> null,
-			'templated_hosts' 			=> null,
-			'real_hosts' 				=> null,
-			'not_proxy_hosts'			=> null,
-			'with_items'				=> null,
-			'with_monitored_items' 		=> null,
-			'with_historical_items'		=> null,
-			'with_triggers'				=> null,
-			'with_monitored_triggers' 	=> null,
-			'with_httptests' 			=> null,
-			'with_monitored_httptests'	=> null,
-			'with_graphs'				=> null,
-			'editable'					=> null,
-			'nopermissions'				=> null,
-
-// filter
-			'filter'					=> null,
-			'search'					=> null,
-			'startSearch'				=> null,
-			'excludeSearch'				=> null,
-			'searchWildcardsEnabled'	=> null,
-
-// output
-			'output'					=> API_OUTPUT_REFER,
-			'extendoutput'				=> null,
-			'select_hosts'				=> null,
-			'select_templates'			=> null,
-
-			'countOutput'				=> null,
-			'groupCount'				=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null,
-			'limitSelects'				=> null
-		);
-
-		$options = zbx_array_merge($def_options, $params);
-
-                if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_hosts'])){
-				$options['select_hosts'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-
-// editable + PERMISSION CHECK
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable'] ? PERM_READ_WRITE : PERM_READ_ONLY;
-
-			$sql_parts['from']['rights'] = 'rights r';
-			$sql_parts['from']['users_groups'] = 'users_groups ug';
-			$sql_parts['where'][] = 'r.id=g.groupid';
-			$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-			$sql_parts['where'][] = 'ug.userid='.$userid;
-			$sql_parts['where'][] = 'r.permission>='.$permission;
-			$sql_parts['where'][] = 'NOT EXISTS( '.
-									' SELECT gg.groupid '.
-										' FROM groups gg, rights rr, users_groups ugg '.
-										' WHERE rr.id=g.groupid '.
-											' AND rr.groupid=ugg.usrgrpid '.
-											' AND ugg.userid='.$userid.
-											' AND rr.permission<'.$permission.')';
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-			$sql_parts['where']['groupid'] = DBcondition('g.groupid', $options['groupids']);
-		}
-
-// templateids
-		if(!is_null($options['templateids'])){
-			zbx_value2array($options['templateids']);
-
-			if(!is_null($options['hostids'])){
-				zbx_value2array($options['hostids']);
-				$options['hostids'] = array_merge($options['hostids'], $options['templateids']);
-			}
-			else{
-				$options['hostids'] = $options['templateids'];
-			}
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['hostid'] = 'hg.hostid';
-			}
-
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where'][] = DBcondition('hg.hostid', $options['hostids']);
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['triggerid'] = 'f.triggerid';
-			}
-
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where'][] = DBcondition('f.triggerid', $options['triggerids']);
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-/*
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('f.triggerid', $nodeids);
-			}
-//*/
-		}
-
-// graphids
-		if(!is_null($options['graphids'])){
-			zbx_value2array($options['graphids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['graphid'] = 'gi.graphid';
-			}
-
-			$sql_parts['from']['gi'] = 'graphs_items gi';
-			$sql_parts['from']['i'] = 'items i';
-			$sql_parts['from']['hg'] = 'hosts_groups hg';
-
-			$sql_parts['where'][] = DBcondition('gi.graphid', $options['graphids']);
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where']['igi'] = 'i.itemid=gi.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-		}
-
-// maintenanceids
-		if(!is_null($options['maintenanceids'])){
-			zbx_value2array($options['maintenanceids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['maintenanceid'] = 'mg.maintenanceid';
-			}
-			$sql_parts['from']['maintenances_groups'] = 'maintenances_groups mg';
-			$sql_parts['where'][] = DBcondition('mg.maintenanceid', $options['maintenanceids']);
-			$sql_parts['where']['hmh'] = 'g.groupid=mg.groupid';
-		}
-
-// monitored_hosts, real_hosts, templated_hosts, not_proxy_hosts
-		if(!is_null($options['monitored_hosts'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'h.hostid=hg.hostid';
-			$sql_parts['where'][] = 'h.status='.HOST_STATUS_MONITORED;
-		}
-		else if(!is_null($options['real_hosts'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'h.hostid=hg.hostid';
-			$sql_parts['where'][] = 'h.status IN('.HOST_STATUS_MONITORED.','.HOST_STATUS_NOT_MONITORED.')';
-		}
-		else if(!is_null($options['templated_hosts'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'h.hostid=hg.hostid';
-			$sql_parts['where'][] = 'h.status='.HOST_STATUS_TEMPLATE;
-		}
-		else if(!is_null($options['not_proxy_hosts'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'h.hostid=hg.hostid';
-			$sql_parts['where'][] = 'NOT h.status IN ('.HOST_STATUS_PROXY_ACTIVE.','.HOST_STATUS_PROXY_PASSIVE.')';
-		}
-
-// with_items, with_monitored_items, with_historical_items
-		if(!is_null($options['with_items'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE hg.hostid=i.hostid )';
-		}
-		else if(!is_null($options['with_monitored_items'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE hg.hostid=i.hostid AND i.status='.ITEM_STATUS_ACTIVE.')';
-		}
-		else if(!is_null($options['with_historical_items'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE hg.hostid=i.hostid AND (i.status='.ITEM_STATUS_ACTIVE.' OR i.status='.ITEM_STATUS_NOTSUPPORTED.') AND i.lastvalue IS NOT NULL)';
-		}
-
-// with_triggers, with_monitored_triggers
-		if(!is_null($options['with_triggers'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS( SELECT t.triggerid '.
-										' FROM items i, functions f, triggers t'.
-										' WHERE i.hostid=hg.hostid '.
-											' AND f.itemid=i.itemid '.
-											' AND t.triggerid=f.triggerid)';
-		}
-		else if(!is_null($options['with_monitored_triggers'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS( SELECT t.triggerid '.
-										' FROM items i, functions f, triggers t'.
-										' WHERE i.hostid=hg.hostid '.
-											' AND i.status='.ITEM_STATUS_ACTIVE.
-											' AND i.itemid=f.itemid '.
-											' AND f.triggerid=t.triggerid '.
-											' AND t.status='.TRIGGER_STATUS_ENABLED.')';
-		}
-
-// with_httptests, with_monitored_httptests
-		if(!is_null($options['with_httptests'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS( SELECT a.applicationid '.
-									' FROM applications a, httptest ht '.
-									' WHERE a.hostid=hg.hostid '.
-										' AND ht.applicationid=a.applicationid)';
-		}
-		else if(!is_null($options['with_monitored_httptests'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS( SELECT a.applicationid '.
-									' FROM applications a, httptest ht '.
-									' WHERE a.hostid=hg.hostid '.
-										' AND ht.applicationid=a.applicationid '.
-										' AND ht.status='.HTTPTEST_STATUS_ACTIVE.')';
-		}
-
-// with_graphs
-		if(!is_null($options['with_graphs'])){
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgg'] = 'hg.groupid=g.groupid';
-			$sql_parts['where'][] = 'EXISTS( SELECT DISTINCT i.itemid '.
-										' FROM items i, graphs_items gi '.
-										' WHERE i.hostid=hg.hostid '.
-											' AND i.itemid=gi.itemid)';
-		}
-
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['groups'] = 'g.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('COUNT(DISTINCT g.groupid) as rowscount');
-
-//groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// filter
-		if(is_array($options['filter'])){
-			zbx_db_filter('groups g', $options, $sql_parts);
-		}
-
-// search
-		if(is_array($options['search'])){
-			zbx_db_search('groups g', $options, $sql_parts);
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 'g.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('g.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('g.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 'g.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-----------
-
-		$groupids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.zbx_db_distinct($sql_parts).' '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.DBin_node('g.groupid', $nodeids).
-					$sql_where.
-				$sql_order;
-		$res = DBselect($sql, $sql_limit);
-		while($group = DBfetch($res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $group;
-				else
-					$result = $group['rowscount'];
-			}
-			else{
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$group['groupid']] = array('groupid' => $group['groupid']);
-				}
-				else{
-					$groupids[$group['groupid']] = $group['groupid'];
-
-					if(!isset($result[$group['groupid']])) $result[$group['groupid']]= array();
-
-					if(!is_null($options['select_templates']) && !isset($result[$group['groupid']]['templates'])){
-						$result[$group['groupid']]['templates'] = array();
-					}
-
-					if(!is_null($options['select_hosts']) && !isset($result[$group['groupid']]['hosts'])){
-						$result[$group['groupid']]['hosts'] = array();
-					}
-
-// hostids
-					if(isset($group['hostid']) && is_null($options['select_hosts'])){
-						if(!isset($result[$group['groupid']]['hosts']))
-							$result[$group['groupid']]['hosts'] = array();
-
-						$result[$group['groupid']]['hosts'][] = array('hostid' => $group['hostid']);
-						unset($group['hostid']);
-					}
-//graphids
-					if(isset($group['graphid'])){
-						if(!isset($result[$group['groupid']]['graphs']))
-							$result[$group['groupid']]['graphs'] = array();
-
-						$result[$group['groupid']]['graphs'][] = array('graphid' => $group['graphid']);
-						unset($group['hostid']);
-					}
-
-// maintenanceids
-					if(isset($group['maintenanceid'])){
-						if(!isset($result[$group['groupid']]['maintenanceid']))
-							$result[$group['groupid']]['maintenances'] = array();
-
-
-						$result[$group['groupid']]['maintenances'][] = array('maintenanceid' => $group['maintenanceid']);
-						unset($group['maintenanceid']);
-					}
-
-// triggerids
-					if(isset($group['triggerid'])){
-						if(!isset($result[$group['groupid']]['triggers']))
-							$result[$group['groupid']]['triggers'] = array();
-
-						$result[$group['groupid']]['triggers'][] = array('triggerid' => $group['triggerid']);
-						unset($group['triggerid']);
-					}
-
-					$result[$group['groupid']] += $group;
-				}
-			}
-		}
-
-COpt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding hosts
-		if(!is_null($options['select_hosts'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'groupids' => $groupids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_hosts']) || str_in_array($options['select_hosts'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_hosts'];
-				$hosts = CHost::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($hosts, 'host');
-
-				$count = array();
-				foreach($hosts as $hostid => $host){
-					$hgroups = $host['groups'];
-					unset($host['groups']);
-					foreach($hgroups as $num => $group){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$group['groupid']])) $count[$group['groupid']] = 0;
-							$count[$group['groupid']]++;
-
-							if($count[$group['groupid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$group['groupid']]['hosts'][] = $hosts[$hostid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_hosts']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$hosts = CHost::get($obj_params);
-				$hosts = zbx_toHash($hosts, 'groupid');
-				foreach($result as $groupid => $group){
-					if(isset($hosts[$groupid]))
-						$result[$groupid]['hosts'] = $hosts[$groupid]['rowscount'];
-					else
-						$result[$groupid]['hosts'] = 0;
-				}
-			}
-		}
-
-// Adding templates
-		if(!is_null($options['select_templates'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'groupids' => $groupids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_templates']) || str_in_array($options['select_templates'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_templates'];
-				$templates = CTemplate::get($obj_params);
-				if(!is_null($options['limitSelects'])) order_result($templates, 'host');
-
-				$count = array();
-				foreach($templates as $templateid => $template){
-					$hgroups = $template['groups'];
-					unset($template['groups']);
-					foreach($hgroups as $num => $group){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$group['groupid']])) $count[$group['groupid']] = 0;
-							$count[$group['groupid']]++;
-
-							if($count[$group['groupid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$group['groupid']]['templates'][] = $templates[$templateid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_templates']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$templates = CTemplate::get($obj_params);
-				$templates = zbx_toHash($templates, 'groupid');
-				foreach($result as $groupid => $group){
-					if(isset($templates[$groupid]))
-						$result[$groupid]['templates'] = $templates[$groupid]['rowscount'];
-					else
-						$result[$groupid]['templates'] = 0;
-				}
-			}
-		}
-
-COpt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-/**
- * Get HostGroup ID by name
- *
- * @param array $data
- * @param array $data['name']
- * @return string|boolean HostGroup ID or false if error
- */
-	public static function getObjects($hostgroupData){
-		$options = array(
-			'filter' => $hostgroupData,
-			'output' => API_OUTPUT_EXTEND
-		);
-
-		if(isset($hostgroupData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($hostgroupData['node']);
-		else if(isset($hostgroupData['nodeids']))
-			$options['nodeids'] = $hostgroupData['nodeids'];
-		else
-			$options['nodeids'] = get_current_nodeid(false);
-
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array('name', 'groupid');
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$objs = self::get($options);
-
-	return !empty($objs);
-	}
-
-/**
- * Add hostgroupGroups
- *
- * @param array $groups array with HostGroup names
- * @param array $groups['name']
- * @return array
- */
-	public static function create($groups){
-		global $USER_DETAILS;
-		$groups = zbx_toArray($groups);
-		$insert = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			if(USER_TYPE_SUPER_ADMIN != $USER_DETAILS['type']){
-				self::exception(ZBX_API_ERROR_PERMISSIONS, 'Only Super Admins can create HostGroups');
-			}
-
-			foreach($groups as $num => $group){
-				if(!is_array($group) || !isset($group['name']) || empty($group['name'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Empty input parameter [ name ]');
-				}
-				if(self::exists(array('name' => $group['name']))){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'HostGroup [ '.$group['name'].' ] already exists');
-				}
-
-				$insert[] = $group;
-			}
-			$groupids = DB::insert('groups', $insert);
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update HostGroup
- *
- * @param array $groups
- * @param array $groups[0]['name'], ...
- * @param array $groups[0]['groupid'], ...
- * @return boolean
- */
-	public static function update($groups){
-		$groups = zbx_toArray($groups);
-		$groupids = zbx_objectValues($groups, 'groupid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			if(empty($groups)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Empty input parameter');
-			}
-
-// permissions
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'output' => API_OUTPUT_EXTEND,
-				'preservekeys' => 1
-			);
-			$upd_groups = self::get($options);
-			foreach($groups as $gnum => $group){
-				if(!isset($upd_groups[$group['groupid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-// name duplicate check
-			$options = array(
-				'filter' => array(
-					'name' => zbx_objectValues($groups, 'name')
-				),
-				'output' => API_OUTPUT_EXTEND,
-				'editable' => 1,
-				'nopermissions' => 1
-			);
-			$groupsNames = self::get($options);
-			$groupsNames = zbx_toHash($groupsNames, 'name');
-
-			foreach($groups as $num => $group){
-				if(isset($group['name']) && isset($groupsNames[$group['name']]) && ($groupsNames[$group['name']]['groupid'] != $group['groupid'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'HostGroup [ '.$group['name'].' ] already exists');
-				}
-
-// prevents updating several groups with same name
-				$groupsNames[$group['name']] = array('groupid' => $group['groupid']);
-//---
-
-				$sql = 'UPDATE groups SET name='.zbx_dbstr($group['name']).' WHERE groupid='.$group['groupid'];
-				if(!DBexecute($sql)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-				}
-
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Delete HostGroups
- *
- * @param array $groups
- * @param array $groups[0,..]['groupid']
- * @return boolean
- */
-	public static function delete($groups){
-		$groups = zbx_toArray($groups);
-		$groupids = zbx_objectValues($groups, 'groupid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1
-			);
-			$del_groups = self::get($options);
-			foreach($groups as $gnum => $group){
-				if(!isset($del_groups[$group['groupid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			if(empty($groupids)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Empty input parameter');
-			}
-
-			$result = delete_host_group($groupids);
-			if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete group');
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Add Hosts to HostGroups. All Hosts are added to all HostGroups.
- *
- * @param array $data
- * @param array $data['groups']
- * @param array $data['hosts']
- * @param array $data['templates']
- * @return boolean
- */
-	public static function massAdd($data){
-		$groups = zbx_toArray($data['groups']);
-		$groupids = zbx_objectValues($groups, 'groupid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_groups = self::get($options);
-			foreach($groups as $gnum => $group){
-				if(!isset($upd_groups[$group['groupid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			$hosts = isset($data['hosts']) ? zbx_toArray($data['hosts']) : null;
-			$hostids = is_null($hosts) ? array() : zbx_objectValues($hosts, 'hostid');
-
-			$templates = isset($data['templates']) ? zbx_toArray($data['templates']) : null;
-			$templateids = is_null($templates) ? array() : zbx_objectValues($templates, 'templateid');
-
-			$objectids = array_merge($hostids, $templateids);
-
-			$linked = array();
-			$sql = 'SELECT hostid, groupid '.
-				' FROM hosts_groups '.
-				' WHERE '.DBcondition('hostid', $objectids).
-					' AND '.DBcondition('groupid', $groupids);
-			$linked_db = DBselect($sql);
-			while($pair = DBfetch($linked_db)){
-				$linked[$pair['groupid']][$pair['hostid']] = 1;
-			}
-
-			foreach($groupids as $gnum => $groupid){
-				foreach($objectids as $hostid){
-					if(isset($linked[$groupid][$hostid])) continue;
-					$hostgroupid = get_dbid('hosts_groups', 'hostgroupid');
-					$result = DBexecute("INSERT INTO hosts_groups (hostgroupid, hostid, groupid) VALUES ($hostgroupid, $hostid, $groupid)");
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-					}
-				}
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Remove Hosts from HostGroups
- *
- * @param array $data
- * @param array $data['groupids']
- * @param array $data['hostids']
- * @param array $data['templateids']
- * @return boolean
- */
-	public static function massRemove($data){
-		$groupids = zbx_toArray($data['groupids'], 'groupid');
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'preservekeys' => 1,
-				'output' => API_OUTPUT_SHORTEN
-			);
-			$upd_groups = self::get($options);
-			foreach($groupids as $groupid){
-				if(!isset($upd_groups[$groupid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			$hostids = isset($data['hostids']) ? zbx_toArray($data['hostids']) : array();
-			$templateids = isset($data['templateids']) ? zbx_toArray($data['templateids']) : array();
-
-			$objectids_to_unlink = array_merge($hostids, $templateids);
-			if(!empty($objectids_to_unlink)){
-				$unlinkable = getUnlinkableHosts($groupids, $objectids_to_unlink);
-				if(count($objectids_to_unlink) != count($unlinkable)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'One of the Objects is left without Hostgroup');
-				}
-
-				DB::delete('hosts_groups', array(
-					DBcondition('hostid', $objectids_to_unlink),
-					DBcondition('groupid', $groupids)
-				));
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update HostGroups with new Hosts (rewrite)
- *
- * @param array $data
- * @param array $data['groups']
- * @param array $data['hosts']
- * @param array $data['templates']
- * @return boolean
- */
-	public static function massUpdate($data){
-		$groups = zbx_toArray($data['groups']);
-		$hosts = isset($data['hosts']) ? zbx_toArray($data['hosts']) : null;
-		$templates = isset($data['templates']) ? zbx_toArray($data['templates']) : null;
-
-		$groupids = zbx_objectValues($groups, 'groupid');
-		$hostids = zbx_objectValues($hosts, 'hostid');
-		$templateids = zbx_objectValues($templates, 'templateid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$hosts_to_unlink = $hosts_to_link = array();
-			$options = array(
-				'groupids' => $groupids,
-				'preservekeys' => 1,
-			);
-			if(!is_null($hosts)){
-				$groups_hosts = CHost::get($options);
-				$hosts_to_unlink = array_diff(array_keys($groups_hosts), $hostids);
-				$hosts_to_link = array_diff($hostids, array_keys($groups_hosts));
-			}
-
-			$templates_to_unlink = $templates_to_link = array();
-			if(!is_null($templates)){
-				$groups_templates = CTemplate::get($options);
-				$templates_to_unlink = array_diff(array_keys($groups_templates), $templateids);
-				$templates_to_link = array_diff($templateids, array_keys($groups_templates));
-			}
-
-			$objectids_to_link = array_merge($hosts_to_link, $templates_to_link);
-			$objectids_to_unlink = array_merge($hosts_to_unlink, $templates_to_unlink);
-
-// PERMISSION {{{
-			$options = array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$allowed_groups = self::get($options);
-			foreach($groups as $num => $group){
-				if(!isset($allowed_groups[$group['groupid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			if(!is_null($hosts)){
-				$hosts_to_check = array_merge($hosts_to_link, $hosts_to_unlink);
-				$options = array(
-					'hostids' => $hosts_to_check,
-					'editable' => 1,
-					'preservekeys' => 1
-				);
-				$allowed_hosts = CHost::get($options);
-				foreach($hosts_to_check as $num => $hostid){
-					if(!isset($allowed_hosts[$hostid])){
-						self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-					}
-				}
-			}
-
-			if(!is_null($templates)){
-				$templates_to_check = array_merge($templates_to_link, $templates_to_unlink);
-				$options = array(
-					'templateids' => $templates_to_check,
-					'editable' => 1,
-					'preservekeys' => 1
-				);
-				$allowed_templates = CTemplate::get($options);
-				foreach($templates_to_check as $num => $templateid){
-					if(!isset($allowed_templates[$templateid])){
-						self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-					}
-				}
-			}
-// }}} PERMISSION
-
-			$unlinkable = getUnlinkableHosts($groupids, $objectids_to_unlink);
-			if(count($objectids_to_unlink) != count($unlinkable)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'One of the Objects is left without Hostgroup');
-			}
-
-			$sql = 'DELETE FROM hosts_groups WHERE '.DBcondition('groupid', $groupids).' AND '.DBcondition('hostid', $objectids_to_unlink);
-			if(!DBexecute($sql))
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-
-			foreach($groupids as $gnum => $groupid){
-				foreach($objectids_to_link as $objectid){
-					$hostgroupid = get_dbid('hosts_groups', 'hostgroupid');
-					$result = DBexecute("INSERT INTO hosts_groups (hostgroupid, hostid, groupid) VALUES ($hostgroupid, $objectid, $groupid)");
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-					}
-				}
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('groupids' => $groupids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-}
-
-?>
diff -rupN classes_modif/class.chost.php classes/class.chost.php
--- classes_modif/class.chost.php	2011-11-14 12:06:39.000000000 +0100
+++ classes/class.chost.php	2011-11-09 11:00:37.000000000 +0100
@@ -92,7 +92,6 @@ class CHost extends CZBXAPI{
 		$def_options = array(
 			'nodeids'					=> null,
 			'groupids'					=> null,
-			'userid'					=> null,
 			'hostids'					=> null,
 			'proxyids'					=> null,
 			'templateids'				=> null,
@@ -147,15 +146,6 @@ class CHost extends CZBXAPI{
 		);
 
 		$options = zbx_array_merge($def_options, $options);
-		if(!is_null($options['userid'])){
-			$USER_DETAILS['userid']=$options['userid'];
-			 $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));			
-				 foreach($users as $unum => $user)
-					$USER_DETAILS['type']=$user['type'];
-//			$USER_DETAILS['type']=1;
-			$user_type = $USER_DETAILS['type'];
-			$userid = $USER_DETAILS['userid'];
-		}
 
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
@@ -1812,246 +1802,5 @@ Copt::memoryPick();
 		}
 	}
 
-
-
-     public static function getDATA_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-	    'returnHostid' => null,
-            'listaHost' => null,
-            'userid' => null,
-            'busqHOST' => null,
-            'busqGROUP' => null,
-	    'fijoG' => null,
-	    'fijoH' => null,
-            'cuentaResultados' => null,
-	    'retornaGraficas' => null,
-            'hostid' => null,
-            'hosts' => null,
-	    'filtro' => null,
-            'hostGrupos' => null,
-	    'hostFiltrados' => null,
-	    'gruposFiltrados'=> null,
-            'getprofile' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-
-        if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-        }
-
-
-        if (!is_null($options['listaHost'])&&(!is_null($options['userid']))) {
-
-           if ( $user_type == 1)
-           {
-           $sql = 'SELECT h.hostid, h.host, h.ip, g.name, g.groupid FROM hosts h, groups g, hosts_groups hg,'.
-           'users_groups ug, rights r WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-           '(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='. $options['userid'].')and(r.permission>1)and(h.status=0)and'.
-	   '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-
-
-		$sql = $sql.' ORDER BY g.name';
-		$res = DBselect($sql);
-
-	   }
-	   else if ( $user_type == 2 ||  $user_type == 3)
-           {
-           $sql = 'SELECT h.hostid, h.host, h.ip, g.name, g.groupid FROM hosts h, groups g, hosts_groups hg'.
-           ' WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-           '(h.status=0)and(g.internal<>1)';
-
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-
-                
-                $sql = $sql.' ORDER BY g.name';
-		$res = DBselect($sql);
-
-	   }
-
-
-        $i=0;
-
-        $resultado = array();
-        $colum = array();
-
-
-        while ($colum=DBfetch($res)) {
-                	$resultado[$i]= $colum;
-                	$i=$i+1;
-        }
-
-
-	}
-
-        // Cuenta host
-        if (!is_null($options['cuentaResultados'])&&(!is_null($options['userid']))) {
-           if ( $user_type == 1)
-           {
-
-             $sql = 'SELECT COUNT(h.hostid) FROM hosts h, groups g, hosts_groups hg,'.
-             'users_groups ug, rights r WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-             '(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='.  $options['userid']
-	      .')and(r.permission>1)and(h.status=0)and'.
-	     '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-              $sql = $sql.' ORDER BY g.name';
-              $res = DBselect($sql);
-              
-
-
-           }
-	   else if ($user_type == 2 || $user_type == 3){
-
-	      $sql = 'SELECT COUNT(h.hostid) FROM hosts h, groups g, hosts_groups hg'.
-             ' WHERE (h.hostid=hg.hostid)and(g.groupid=hg.groupid)and'.
-              '(h.status=0)and'.
-             '(g.internal<>1)';
-
-                if(!is_null($options['busqHOST'])and(is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host LIKE \'%'.$options['busqHOST'].'%\')';
-                }
-                if(!is_null($options['busqHOST'])and(!is_null($options['fijoH']))){
-                        $sql = $sql.'and(h.host=\''.$options['busqHOST'].'\')';
-                }
-                if(!is_null($options['busqGROUP'])and(is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name LIKE \'%'.$options['busqGROUP'].'%\')';
-                }
-                if(!is_null($options['busqGROUP'])and(!is_null($options['fijoG']))){
-                        $sql = $sql.'and(g.name =\''.$options['busqGROUP'].'\')';
-                }
-                            
-              $sql = $sql.' ORDER BY g.name';
-	      $res = DBselect($sql);
-	   }
-
-
-        $i=0;
-        $resultado = array();
-        $colum = array();
-
-
-        while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-          }
-        }
-
-
-        // Devuelve gráficas
-        if (!is_null($options['retornaGraficas'])&&(!is_null($options['hostid']))) {
-
-            $sql = 'SELECT DISTINCT g.graphid, g.name  FROM graphs g, graphs_items gi , items i WHERE '.
-            '(g.graphid=gi.graphid)and(gi.itemid=i.itemid)and(i.hostid='.$options['hostid'].')';
-
-            $res = DBselect($sql);
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-        if (!is_null($options['getprofile'])&&(!is_null($options['hostid']))) {
-
-             $sql = 'SELECT p.poc_1_name, p.poc_1_email, p.poc_1_phone_1, p.poc_2_name, p.poc_2_email,'.
-		    ' p.poc_2_phone_1  FROM hosts_profiles_ext p WHERE (p.hostid='. $options['hostid'] .')';
-	    $res = DBselect($sql);
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-	// devolve os ids vinculados a un Grupo
-        if (!is_null($options['hostGrupos'])) {
-
-             $sql = 'SELECT h.hostid, h.host FROM hosts h, groups g, hosts_groups hg WHERE
-(hg.hostid=h.hostid)and(hg.groupid=g.groupid)and(g.groupid='.$options['hostGrupos'].')';
-            $res = DBselect($sql);
-
-            $i=0;
-            $resultado = array();
-            $colum = array();
-            while ($colum=DBfetch($res)) {
-                $resultado[$i]= $colum;
-                $i=$i+1;
-            }
-        }
-
-	if (!is_null($options['returnHostid'])){
-            $sql = "select hostid from hosts where host='".$options['returnHostid']."'";
-            $res = DBselect($sql);
-
-            $resultado = array();
-            $colum = array();
-            $colum=DBfetch($res);
-            $resultado['hostid']= $colum;
-
-        }
-
-
-        COpt::memoryPick();
-
-        // removing keys (hash -> array)
- 	//  $resultado = zbx_cleanHashes($resultato);
-	
-        return $resultado;
-}
-
-
 }
 ?>
diff -rupN classes_modif/class.chost.php~ classes/class.chost.php~
--- classes_modif/class.chost.php~	2011-11-14 12:05:44.000000000 +0100
+++ classes/class.chost.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,1816 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CHost class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Hosts
- */
-class CHost extends CZBXAPI{
-/**
- * Get Host data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['nodeids'] Node IDs
- * @param array $options['groupids'] HostGroup IDs
- * @param array $options['hostids'] Host IDs
- * @param boolean $options['monitored_hosts'] only monitored Hosts
- * @param boolean $options['templated_hosts'] include templates in result
- * @param boolean $options['with_items'] only with items
- * @param boolean $options['with_monitored_items'] only with monitored items
- * @param boolean $options['with_historical_items'] only with historical items
- * @param boolean $options['with_triggers'] only with triggers
- * @param boolean $options['with_monitored_triggers'] only with monitored triggers
- * @param boolean $options['with_httptests'] only with http tests
- * @param boolean $options['with_monitored_httptests'] only with monitored http tests
- * @param boolean $options['with_graphs'] only with graphs
- * @param boolean $options['editable'] only with read-write permission. Ignored for SuperAdmins
- * @param int $options['extendoutput'] return all fields for Hosts
- * @param boolean $options['select_groups'] select HostGroups
- * @param boolean $options['select_templates'] select Templates
- * @param boolean $options['select_items'] select Items
- * @param boolean $options['select_triggers'] select Triggers
- * @param boolean $options['select_graphs'] select Graphs
- * @param boolean $options['select_applications'] select Applications
- * @param boolean $options['select_macros'] select Macros
- * @param boolean $options['select_profile'] select Profile
- * @param int $options['count'] count Hosts, returned column name is rowscount
- * @param string $options['pattern'] search hosts by pattern in Host name
- * @param string $options['extendPattern'] search hosts by pattern in Host name, ip and DNS
- * @param int $options['limit'] limit selection
- * @param string $options['sortfield'] field to sort by
- * @param string $options['sortorder'] sort order
- * @return array|boolean Host data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$nodeCheck = false;
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('hostid', 'host', 'status', 'dns', 'ip'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND, API_OUTPUT_CUSTOM); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select' => array('hosts' => 'h.hostid'),
-			'from' => array('hosts' => 'hosts h'),
-			'where' => array(),
-			'group' => array(),
-			'order' => array(),
-			'limit' => null
-		);
-
-		$def_options = array(
-			'nodeids'					=> null,
-			'groupids'					=> null,
-			'userid'					=> null,
-			'hostids'					=> null,
-			'proxyids'					=> null,
-			'templateids'				=> null,
-			'itemids'					=> null,
-			'triggerids'				=> null,
-			'maintenanceids'			=> null,
-			'graphids'					=> null,
-			'dhostids'					=> null,
-			'dserviceids'				=> null,
-			'monitored_hosts'			=> null,
-			'templated_hosts'			=> null,
-			'proxy_hosts'				=> null,
-			'with_items'				=> null,
-			'with_monitored_items'		=> null,
-			'with_historical_items'		=> null,
-			'with_triggers'				=> null,
-			'with_monitored_triggers'	=> null,
-			'with_httptests'			=> null,
-			'with_monitored_httptests'	=> null,
-			'with_graphs'				=> null,
-			'editable'					=> null,
-			'nopermissions'				=> null,
-
-// filter
-			'filter'					=> null,
-			'search'					=> null,
-			'startSearch'				=> null,
-			'excludeSearch'				=> null,
-			'searchWildcardsEnabled'	=> null,
-
-// OutPut
-			'output'					=> API_OUTPUT_REFER,
-			'extendoutput'				=> null,
-			'select_groups'				=> null,
-			'selectParentTemplates'		=> null,
-			'select_items'				=> null,
-			'select_triggers'			=> null,
-			'select_graphs'				=> null,
-			'select_dhosts'				=> null,
-			'select_dservices'			=> null,
-			'select_applications'		=> null,
-			'select_macros'				=> null,
-			'select_profile'			=> null,
-			'countOutput'				=> null,
-			'groupCount'				=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null,
-			'limitSelects'				=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-		if(!is_null($options['userid'])){
-			$USER_DETAILS['userid']=$options['userid'];
-			 $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));			
-				 foreach($users as $unum => $user)
-					$USER_DETAILS['type']=$user['type'];
-//			$USER_DETAILS['type']=1;
-			$user_type = $USER_DETAILS['type'];
-			$userid = $USER_DETAILS['userid'];
-		}
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_groups'])){
-				$options['select_groups'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['selectParentTemplates'])){
-				$options['selectParentTemplates'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_triggers'])){
-				$options['select_triggers'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_graphs'])){
-				$options['select_graphs'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_applications'])){
-				$options['select_applications'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_macros'])){
-				$options['select_macros'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-		if(is_array($options['output'])){
-			unset($sql_parts['select']['hosts']);
-			$sql_parts['select']['hostid'] = ' h.hostid';
-			foreach($options['output'] as $key => $field){
-				$sql_parts['select'][$field] = ' h.'.$field;
-			}
-
-			$options['output'] = API_OUTPUT_CUSTOM;
-		}
-
-// editable + PERMISSION CHECK
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable'] ? PERM_READ_WRITE : PERM_READ_ONLY;
-
-			$sql_parts['where'][] = 'EXISTS ('.
-							' SELECT hh.hostid '.
-							' FROM hosts hh, hosts_groups hgg, rights r, users_groups ug '.
-							' WHERE hh.hostid=h.hostid '.
-								' AND hh.hostid=hgg.hostid '.
-								' AND r.id=hgg.groupid '.
-								' AND r.groupid=ug.usrgrpid '.
-								' AND ug.userid='.$userid.
-								' AND r.permission>='.$permission.
-								' AND NOT EXISTS( '.
-									' SELECT hggg.groupid '.
-									' FROM hosts_groups hggg, rights rr, users_groups gg '.
-									' WHERE hggg.hostid=hgg.hostid '.
-										' AND rr.id=hggg.groupid '.
-										' AND rr.groupid=gg.usrgrpid '.
-										' AND gg.userid='.$userid.
-										' AND rr.permission<'.$permission.
-								' )) ';
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-			$sql_parts['where']['hostid'] = DBcondition('h.hostid', $options['hostids']);
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-			}
-		}
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where'][] = DBcondition('hg.groupid', $options['groupids']);
-			$sql_parts['where']['hgh'] = 'hg.hostid=h.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['groupid'] = 'hg.groupid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('hg.groupid', $nodeids);
-			}
-		}
-
-
-// proxyids
-		if(!is_null($options['proxyids'])){
-			zbx_value2array($options['proxyids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['proxy_hostid'] = 'h.proxy_hostid';
-			}
-			$sql_parts['where'][] = DBcondition('h.proxy_hostid', $options['proxyids']);
-		}
-
-// templateids
-		if(!is_null($options['templateids'])){
-			zbx_value2array($options['templateids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['templateid'] = 'ht.templateid';
-			}
-
-			$sql_parts['from']['hosts_templates'] = 'hosts_templates ht';
-			$sql_parts['where'][] = DBcondition('ht.templateid', $options['templateids']);
-			$sql_parts['where']['hht'] = 'h.hostid=ht.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['templateid'] = 'ht.templateid';
-			}
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('ht.templateid', $nodeids);
-			}
-		}
-
-// itemids
-		if(!is_null($options['itemids'])){
-			zbx_value2array($options['itemids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['itemid'] = 'i.itemid';
-			}
-
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where'][] = DBcondition('i.itemid', $options['itemids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('i.itemid', $nodeids);
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['triggerid'] = 'f.triggerid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where'][] = DBcondition('f.triggerid', $options['triggerids']);
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('f.triggerid', $nodeids);
-			}
-		}
-
-// graphids
-		if(!is_null($options['graphids'])){
-			zbx_value2array($options['graphids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['graphid'] = 'gi.graphid';
-			}
-
-			$sql_parts['from']['graphs_items'] = 'graphs_items gi';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where'][] = DBcondition('gi.graphid', $options['graphids']);
-			$sql_parts['where']['igi'] = 'i.itemid=gi.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if(!$nodeCheck){
-				$nodeCheck = true;
-				$sql_parts['where'][] = DBin_node('gi.graphid', $nodeids);
-			}
-		}
-
-// dhostids
-		if(!is_null($options['dhostids'])){
-			zbx_value2array($options['dhostids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['dhostid'] = 'ds.dhostid';
-			}
-
-			$sql_parts['from']['dservices'] = 'dservices ds';
-			$sql_parts['where'][] = DBcondition('ds.dhostid', $options['dhostids']);
-			$sql_parts['where']['dsh'] = 'ds.ip=h.ip';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['dhostid'] = 'ds.dhostid';
-			}
-		}
-
-// dserviceids
-		if(!is_null($options['dserviceids'])){
-			zbx_value2array($options['dserviceids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['dserviceid'] = 'ds.dserviceid';
-			}
-
-			$sql_parts['from']['dservices'] = 'dservices ds';
-			$sql_parts['where'][] = DBcondition('ds.dserviceid', $options['dserviceids']);
-			$sql_parts['where']['dsh'] = 'ds.ip=h.ip';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['dserviceid'] = 'ds.dserviceid';
-			}
-		}
-// maintenanceids
-		if(!is_null($options['maintenanceids'])){
-			zbx_value2array($options['maintenanceids']);
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['maintenanceid'] = 'mh.maintenanceid';
-			}
-
-			$sql_parts['from']['maintenances_hosts'] = 'maintenances_hosts mh';
-			$sql_parts['where'][] = DBcondition('mh.maintenanceid', $options['maintenanceids']);
-			$sql_parts['where']['hmh'] = 'h.hostid=mh.hostid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['maintenanceid'] = 'mh.maintenanceid';
-			}
-		}
-
-// node check !!!!!
-// should last, after all ****IDS checks
-		if(!$nodeCheck){
-			$nodeCheck = true;
-			$sql_parts['where'][] = DBin_node('h.hostid', $nodeids);
-		}
-
-// monitored_hosts, templated_hosts
-		if(!is_null($options['monitored_hosts'])){
-			$sql_parts['where']['status'] = 'h.status='.HOST_STATUS_MONITORED;
-		}
-		else if(!is_null($options['templated_hosts'])){
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_MONITORED.','.HOST_STATUS_NOT_MONITORED.','.HOST_STATUS_TEMPLATE.')';
-		}
-		else if(!is_null($options['proxy_hosts'])){
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_PROXY_ACTIVE.','.HOST_STATUS_PROXY_PASSIVE.')';
-		}
-		else{
-			$sql_parts['where']['status'] = 'h.status IN ('.HOST_STATUS_MONITORED.','.HOST_STATUS_NOT_MONITORED.')';
-		}
-
-// with_items, with_monitored_items, with_historical_items
-		if(!is_null($options['with_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid )';
-		}
-		else if(!is_null($options['with_monitored_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid AND i.status='.ITEM_STATUS_ACTIVE.')';
-		}
-		else if(!is_null($options['with_historical_items'])){
-			$sql_parts['where'][] = 'EXISTS (SELECT i.hostid FROM items i WHERE h.hostid=i.hostid AND (i.status='.ITEM_STATUS_ACTIVE.' OR i.status='.ITEM_STATUS_NOTSUPPORTED.') AND i.lastvalue IS NOT NULL)';
-		}
-
-// with_triggers, with_monitored_triggers
-		if(!is_null($options['with_triggers'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT i.itemid '.
-					' FROM items i, functions f, triggers t '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.itemid=f.itemid '.
-						' AND f.triggerid=t.triggerid)';
-		}
-		else if(!is_null($options['with_monitored_triggers'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT i.itemid '.
-					' FROM items i, functions f, triggers t '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.status='.ITEM_STATUS_ACTIVE.
-						' AND i.itemid=f.itemid '.
-						' AND f.triggerid=t.triggerid '.
-						' AND t.status='.TRIGGER_STATUS_ENABLED.')';
-		}
-
-// with_httptests, with_monitored_httptests
-		if(!is_null($options['with_httptests'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT a.applicationid '.
-					' FROM applications a, httptest ht '.
-					' WHERE a.hostid=h.hostid '.
-						' AND ht.applicationid=a.applicationid)';
-		}
-		else if(!is_null($options['with_monitored_httptests'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT a.applicationid '.
-					' FROM applications a, httptest ht '.
-					' WHERE a.hostid=h.hostid '.
-						' AND ht.applicationid=a.applicationid '.
-						' AND ht.status='.HTTPTEST_STATUS_ACTIVE.')';
-		}
-
-// with_graphs
-		if(!is_null($options['with_graphs'])){
-			$sql_parts['where'][] = 'EXISTS( '.
-					' SELECT DISTINCT i.itemid '.
-					' FROM items i, graphs_items gi '.
-					' WHERE i.hostid=h.hostid '.
-						' AND i.itemid=gi.itemid)';
-		}
-
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['hosts'] = 'h.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('count(DISTINCT h.hostid) as rowscount');
-
-//groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// search
-		if(is_array($options['search'])){
-			zbx_db_search('hosts h', $options, $sql_parts);
-		}
-
-// filter
-		if(is_array($options['filter'])){
-			zbx_db_filter('hosts h', $options, $sql_parts);
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][$options['sortfield']] = 'h.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('h.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('h.*', $sql_parts['select'])){
-				$sql_parts['select'][$options['sortfield']] = 'h.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-------
-
-
-		$hostids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['group'] = array_unique($sql_parts['group']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_group = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['group']))		$sql_where.= ' GROUP BY '.implode(',',$sql_parts['group']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.zbx_db_distinct($sql_parts).' '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.$sql_where.
-				$sql_group.
-				$sql_order;
- //SDI($sql);
-		$res = DBselect($sql, $sql_limit);
-		while($host = DBfetch($res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $host;
-				else
-					$result = $host['rowscount'];
-			}
-			else{
-				$hostids[$host['hostid']] = $host['hostid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$host['hostid']] = array('hostid' => $host['hostid']);
-				}
-				else{
-					if(!isset($result[$host['hostid']])) $result[$host['hostid']] = array();
-
-					if(!is_null($options['select_groups']) && !isset($result[$host['hostid']]['groups'])){
-						$result[$host['hostid']]['groups'] = array();
-					}
-
-					if(!is_null($options['selectParentTemplates']) && !isset($result[$host['hostid']]['parentTemplates'])){
-						$result[$host['hostid']]['parentTemplates'] = array();
-					}
-
-					if(!is_null($options['select_items']) && !isset($result[$host['hostid']]['items'])){
-						$result[$host['hostid']]['items'] = array();
-					}
-					if(!is_null($options['select_profile']) && !isset($result[$host['hostid']]['profile'])){
-						$result[$host['hostid']]['profile'] = array();
-						$result[$host['hostid']]['profile_ext'] = array();
-					}
-
-					if(!is_null($options['select_triggers']) && !isset($result[$host['hostid']]['triggers'])){
-						$result[$host['hostid']]['triggers'] = array();
-					}
-
-					if(!is_null($options['select_graphs']) && !isset($result[$host['hostid']]['graphs'])){
-						$result[$host['hostid']]['graphs'] = array();
-					}
-
-					if(!is_null($options['select_dhosts']) && !isset($result[$host['hostid']]['dhosts'])){
-						$result[$host['hostid']]['dhosts'] = array();
-					}
-
-					if(!is_null($options['select_dservices']) && !isset($result[$host['hostid']]['dservices'])){
-						$result[$host['hostid']]['dservices'] = array();
-					}
-
-					if(!is_null($options['select_applications']) && !isset($result[$host['hostid']]['applications'])){
-						$result[$host['hostid']]['applications'] = array();
-					}
-
-					if(!is_null($options['select_macros']) && !isset($result[$host['hostid']]['macros'])){
-						$result[$host['hostid']]['macros'] = array();
-					}
-
-//					if(!is_null($options['select_maintenances']) && !isset($result[$host['hostid']]['maintenances'])){
-//						$result[$host['hostid']]['maintenances'] = array();
-//					}
-
-// groupids
-					if(isset($host['groupid']) && is_null($options['select_groups'])){
-						if(!isset($result[$host['hostid']]['groups']))
-							$result[$host['hostid']]['groups'] = array();
-
-						$result[$host['hostid']]['groups'][] = array('groupid' => $host['groupid']);
-						unset($host['groupid']);
-					}
-
-// templateids
-					if(isset($host['templateid'])){
-						if(!isset($result[$host['hostid']]['templates']))
-							$result[$host['hostid']]['templates'] = array();
-
-						$result[$host['hostid']]['templates'][] = array('templateid' => $host['templateid']);
-						unset($host['templateid']);
-					}
-
-// triggerids
-					if(isset($host['triggerid']) && is_null($options['select_triggers'])){
-						if(!isset($result[$host['hostid']]['triggers']))
-							$result[$host['hostid']]['triggers'] = array();
-
-						$result[$host['hostid']]['triggers'][] = array('triggerid' => $host['triggerid']);
-						unset($host['triggerid']);
-					}
-
-// itemids
-					if(isset($host['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$host['hostid']]['items']))
-							$result[$host['hostid']]['items'] = array();
-
-						$result[$host['hostid']]['items'][] = array('itemid' => $host['itemid']);
-						unset($host['itemid']);
-					}
-
-// graphids
-					if(isset($host['graphid']) && is_null($options['select_graphs'])){
-						if(!isset($result[$host['hostid']]['graphs']))
-							$result[$host['hostid']]['graphs'] = array();
-
-						$result[$host['hostid']]['graphs'][] = array('graphid' => $host['graphid']);
-						unset($host['graphid']);
-					}
-
-// dhostids
-					if(isset($host['dhostid']) && is_null($options['select_dhosts'])){
-						if(!isset($result[$host['hostid']]['dhosts']))
-							$result[$host['hostid']]['dhosts'] = array();
-
-						$result[$host['hostid']]['dhosts'][] = array('dhostid' => $host['dhostid']);
-						unset($host['dhostid']);
-					}
-
-// dserviceids
-					if(isset($host['dserviceid']) && is_null($options['select_dservices'])){
-						if(!isset($result[$host['hostid']]['dservices']))
-							$result[$host['hostid']]['dservices'] = array();
-
-						$result[$host['hostid']]['dservices'][] = array('dserviceid' => $host['dserviceid']);
-						unset($host['dserviceid']);
-					}
-// maintenanceids
-					if(isset($host['maintenanceid'])){
-						if(!isset($result[$host['hostid']]['maintenanceid']))
-							$result[$host['hostid']]['maintenances'] = array();
-
-						$result[$host['hostid']]['maintenances'][] = array('maintenanceid' => $host['maintenanceid']);
-//						unset($host['maintenanceid']);
-					}
-//---
-
-					$result[$host['hostid']] += $host;
-				}
-			}
-		}
-
-Copt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// Adding Objects
-// Adding Groups
-		if(!is_null($options['select_groups']) && str_in_array($options['select_groups'], $subselects_allowed_outputs)){
-			$obj_params = array(
-					'nodeids' => $nodeids,
-					'output' => $options['select_groups'],
-					'hostids' => $hostids,
-					'preservekeys' => 1
-				);
-			$groups = CHostgroup::get($obj_params);
-
-			foreach($groups as $groupid => $group){
-				$ghosts = $group['hosts'];
-				unset($group['hosts']);
-				foreach($ghosts as $num => $host){
-					$result[$host['hostid']]['groups'][] = $group;
-				}
-			}
-		}
-
-// Adding Profiles
-		if(!is_null($options['select_profile'])){
-			$sql = 'SELECT hp.* '.
-				' FROM hosts_profiles hp '.
-				' WHERE '.DBcondition('hp.hostid', $hostids);
-			$db_profile = DBselect($sql);
-			while($profile = DBfetch($db_profile))
-				$result[$profile['hostid']]['profile'] = $profile;
-
-
-			$sql = 'SELECT hpe.* '.
-				' FROM hosts_profiles_ext hpe '.
-				' WHERE '.DBcondition('hpe.hostid', $hostids);
-			$db_profile_ext = DBselect($sql);
-			while($profile_ext = DBfetch($db_profile_ext))
-				$result[$profile_ext['hostid']]['profile_ext'] = $profile_ext;
-		}
-
-// Adding Templates
-		if(!is_null($options['selectParentTemplates'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['selectParentTemplates']) || str_in_array($options['selectParentTemplates'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['selectParentTemplates'];
-				$templates = CTemplate::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($templates, 'host');
-				foreach($templates as $templateid => $template){
-					unset($templates[$templateid]['hosts']);
-					$count = array();
-					foreach($template['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['parentTemplates'][] = &$templates[$templateid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['selectParentTemplates']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$templates = CTemplate::get($obj_params);
-				$templates = zbx_toHash($templates, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($templates[$hostid]))
-						$result[$hostid]['templates'] = $templates[$hostid]['rowscount'];
-					else
-						$result[$hostid]['templates'] = 0;
-				}
-			}
-		}
-
-// Adding Items
-		if(!is_null($options['select_items'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_items']) || str_in_array($options['select_items'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_items'];
-				$items = CItem::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($items, 'description');
-				foreach($items as $itemid => $item){
-					unset($items[$itemid]['hosts']);
-					foreach($item['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['items'][] = &$items[$itemid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_items']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$items = CItem::get($obj_params);
-				$items = zbx_toHash($items, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($items[$hostid]))
-						$result[$hostid]['items'] = $items[$hostid]['rowscount'];
-					else
-						$result[$hostid]['items'] = 0;
-				}
-			}
-		}
-
-// Adding triggers
-		if(!is_null($options['select_triggers'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_triggers']) || str_in_array($options['select_triggers'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_triggers'];
-				$triggers = CTrigger::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($triggers, 'description');
-				foreach($triggers as $triggerid => $trigger){
-					unset($triggers[$triggerid]['hosts']);
-
-					foreach($trigger['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['triggers'][] = &$triggers[$triggerid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_triggers']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$triggers = CTrigger::get($obj_params);
-				$triggers = zbx_toHash($triggers, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($triggers[$hostid]))
-						$result[$hostid]['triggers'] = $triggers[$hostid]['rowscount'];
-					else
-						$result[$hostid]['triggers'] = 0;
-				}
-			}
-		}
-
-// Adding graphs
-		if(!is_null($options['select_graphs'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_graphs']) || str_in_array($options['select_graphs'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_graphs'];
-				$graphs = CGraph::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($graphs, 'name');
-				foreach($graphs as $graphid => $graph){
-					unset($graphs[$graphid]['hosts']);
-
-					foreach($graph['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['graphs'][] = &$graphs[$graphid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_graphs']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$graphs = CGraph::get($obj_params);
-				$graphs = zbx_toHash($graphs, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($graphs[$hostid]))
-						$result[$hostid]['graphs'] = $graphs[$hostid]['rowscount'];
-					else
-						$result[$hostid]['graphs'] = 0;
-				}
-			}
-		}
-
-// Adding discovery hosts
-		if(!is_null($options['select_dhosts'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_dhosts']) || str_in_array($options['select_dhosts'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_dhosts'];
-				$dhosts = CDHost::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($dhosts, 'dhostid');
-				foreach($dhosts as $dhostid => $dhost){
-					unset($dhosts[$dhostid]['hosts']);
-
-					foreach($dhost['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['dhosts'][] = &$dhosts[$dhostid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_dhosts']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$dhosts = CDHost::get($obj_params);
-				$dhosts = zbx_toHash($dhosts, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($dhosts[$hostid]))
-						$result[$hostid]['dhosts'] = $dhosts[$hostid]['rowscount'];
-					else
-						$result[$hostid]['dhosts'] = 0;
-				}
-			}
-		}
-
-// Adding applications
-		if(!is_null($options['select_applications'])){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'hostids' => $hostids,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_applications']) || str_in_array($options['select_applications'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_applications'];
-				$applications = CApplication::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($applications, 'name');
-				foreach($applications as $applicationid => $application){
-					unset($applications[$applicationid]['hosts']);
-
-					foreach($application['hosts'] as $hnum => $host){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$host['hostid']])) $count[$host['hostid']] = 0;
-							$count[$host['hostid']]++;
-
-							if($count[$host['hostid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$host['hostid']]['applications'][] = &$applications[$applicationid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_applications']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$applications = CApplication::get($obj_params);
-				$applications = zbx_toHash($applications, 'hostid');
-				foreach($result as $hostid => $host){
-					if(isset($applications[$hostid]))
-						$result[$hostid]['applications'] = $applications[$hostid]['rowscount'];
-					else
-						$result[$hostid]['applications'] = 0;
-				}
-			}
-		}
-
-// Adding macros
-		if(!is_null($options['select_macros']) && str_in_array($options['select_macros'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_macros'],
-				'hostids' => $hostids,
-				'preservekeys' => 1
-			);
-
-			$macros = CUserMacro::get($obj_params);
-			foreach($macros as $macroid => $macro){
-				$mhosts = $macro['hosts'];
-				unset($macro['hosts']);
-				foreach($mhosts as $num => $host){
-					$result[$host['hostid']]['macros'][] = $macro;
-				}
-			}
-		}
-
-Copt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-/**
- * Get Host ID by Host name
- *
- * @param _array $host_data
- * @param string $host_data['host']
- * @return int|boolean
- */
-	public static function getObjects($hostData){
-		$options = array(
-			'filter' => $hostData,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($hostData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($hostData['node']);
-		else if(isset($hostData['nodeids']))
-			$options['nodeids'] = $hostData['nodeids'];
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('hostid', 'host'));
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$objs = self::get($options);
-
-	return !empty($objs);
-	}
-
-/**
- * Add Host
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param string $hosts['host'] Host name.
- * @param array $hosts['groups'] array of HostGroup objects with IDs add Host to.
- * @param int $hosts['port'] Port. OPTIONAL
- * @param int $hosts['status'] Host Status. OPTIONAL
- * @param int $hosts['useip'] Use IP. OPTIONAL
- * @param string $hosts['dns'] DNS. OPTIONAL
- * @param string $hosts['ip'] IP. OPTIONAL
- * @param int $hosts['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['ipmi_password'] IPMI password. OPTIONAL
- * @return boolean
- */
-	public static function create($hosts){
-		$hosts = zbx_toArray($hosts);
-		$hostids = array();
-		$groupids = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-// BASIC VALIDATION {{{
-			foreach($hosts as $hnum => $host){
-				// CHECK IF HOSTS HAVE AT LEAST 1 GROUP
-				if(empty($host['groups'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, sprintf(S_NO_GROUPS_FOR_HOST, $host['host']));
-				}
-				// Check if host name isn't longer then 64 chars
-				if(zbx_strlen($host['host']) > 64){
-					self::exception(ZBX_API_ERROR_PARAMETERS, sprintf(S_HOST_NAME_MUST_BE_LONGER, 64, $host['host'], zbx_strlen($host['host'])));
-				}
-				$hosts[$hnum]['groups'] = zbx_toArray($hosts[$hnum]['groups']);
-
-				foreach($hosts[$hnum]['groups'] as $gnum => $group){
-					$groupids[$group['groupid']] = $group['groupid'];
-				}
-			}
-// }}}
-
-
-// PERMISSIONS {{{
-			$upd_groups = CHostGroup::get(array(
-				'groupids' => $groupids,
-				'editable' => 1,
-				'preservekeys' => 1));
-			foreach($groupids as $gnum => $groupid){
-				if(!isset($upd_groups[$groupid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSIONS);
-				}
-			}
-// }}} PERMISSIONS
-
-
-			foreach($hosts as $num => $host){
-				$host_db_fields = array(
-					'host' => null,
-					'port' => 0,
-					'status' => 0,
-					'useip' => 0,
-					'dns' => '',
-					'ip' => '0.0.0.0',
-					'proxy_hostid' => 0,
-					'useipmi' => 0,
-					'ipmi_ip' => '',
-					'ipmi_port' => 623,
-					'ipmi_authtype' => 0,
-					'ipmi_privilege' => 0,
-					'ipmi_username' => '',
-					'ipmi_password' => '',
-				);
-
-				if(!check_db_fields($host_db_fields, $host)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for host [ '.$host['host'].' ]');
-				}
-
-				if(!preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $host['host'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for Hostname [ '.$host['host'].' ]');
-				}
-				if(!empty($host['dns']) && !preg_match('/^'.ZBX_PREG_DNS_FORMAT.'$/i', $host['dns'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for DNS [ '.$host['dns'].' ]');
-				}
-
-				if(self::exists(array('host' => $host['host']))){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_HOST.' [ '.$host['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-				if(CTemplate::exists(array('host' => $host['host']))){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_TEMPLATE.' [ '.$host['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-
-
-				$hostid = get_dbid('hosts', 'hostid');
-				$hostids[] = $hostid;
-				$result = DBexecute('INSERT INTO hosts (hostid, proxy_hostid, host, port, status, useip, dns, ip, disable_until, available,'.
-					'useipmi,ipmi_port,ipmi_authtype,ipmi_privilege,ipmi_username,ipmi_password,ipmi_ip) VALUES ('.
-					$hostid.','.
-					$host['proxy_hostid'].','.
-					zbx_dbstr($host['host']).','.
-					$host['port'].','.
-					$host['status'].','.
-					$host['useip'].','.
-					zbx_dbstr($host['dns']).','.
-					zbx_dbstr($host['ip']).
-					',0,'.
-					HOST_AVAILABLE_UNKNOWN.','.
-					$host['useipmi'].','.
-					$host['ipmi_port'].','.
-					$host['ipmi_authtype'].','.
-					$host['ipmi_privilege'].','.
-					zbx_dbstr($host['ipmi_username']).','.
-					zbx_dbstr($host['ipmi_password']).','.
-					zbx_dbstr($host['ipmi_ip']).')'
-				);
-				if(!$result){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-				}
-
-				foreach($host['groups'] as $group){
-					$hostgroupid = get_dbid('hosts_groups', 'hostgroupid');
-					$result = DBexecute("INSERT INTO hosts_groups (hostgroupid, hostid, groupid) VALUES ($hostgroupid, $hostid, {$group['groupid']})");
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'DBerror');
-					}
-				}
-
-				$host['hostid'] = $hostid;
-				$options = array();
-				$options['hosts'] = $host;
-				if(isset($host['templates']) && !is_null($host['templates']))
-					$options['templates'] = $host['templates'];
-				if(isset($host['macros']) && !is_null($host['macros']))
-					$options['macros'] = $host['macros'];
-
-				$result = CHost::massAdd($options);
-				if(!$result){
-					self::exception();
-				}
-
-				if(isset($host['profile']) && !empty($host['extendedProfile'])){
-					$fields = array_keys($host['profile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $host['profile']);
-					$values = implode(', ', $values);
-
-					DBexecute('INSERT INTO hosts_profiles (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')');
-				}
-
-				if(isset($host['extendedProfile']) && !empty($host['extendedProfile'])){
-					$fields = array_keys($host['extendedProfile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $host['extendedProfile']);
-					$values = implode(', ', $values);
-
-					DBexecute('INSERT INTO hosts_profiles_ext (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')');
-				}
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update Host
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param string $hosts['host'] Host name.
- * @param int $hosts['port'] Port. OPTIONAL
- * @param int $hosts['status'] Host Status. OPTIONAL
- * @param int $hosts['useip'] Use IP. OPTIONAL
- * @param string $hosts['dns'] DNS. OPTIONAL
- * @param string $hosts['ip'] IP. OPTIONAL
- * @param int $hosts['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['ipmi_password'] IPMI password. OPTIONAL
- * @param string $hosts['groups'] groups
- * @return boolean
- */
-	public static function update($hosts){
-		$hosts = zbx_toArray($hosts);
-		$hostids = zbx_objectValues($hosts, 'hostid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_hosts = self::get($options);
-			foreach($hosts as $gnum => $host){
-				if(!isset($upd_hosts[$host['hostid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_YOU_DO_NOT_HAVE_ENOUGH_RIGHTS);
-				}
-			}
-
-			foreach($hosts as $num => $host){
-				$tmp = $host;
-				$host['hosts'] = $tmp;
-
-				$result = self::massUpdate($host);
-				if(!$result) self::exception(ZBX_API_ERROR_INTERNAL, S_HOST_UPDATE_FAILED);
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Add Hosts to HostGroups. All Hosts are added to all HostGroups.
- *
- * @param array $data
- * @param array $data['groups']
- * @param array $data['templates']
- * @param array $data['macros']
- * @return array
- */
-	public static function massAdd($data){
-		$data['hosts'] = zbx_toArray($data['hosts']);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-			$options = array(
-				'hostids' => zbx_objectValues($data['hosts'], 'hostid'),
-				'editable' => 1,
-				'preservekeys' => 1
-			);
-			$upd_hosts = self::get($options);
-
-			foreach($data['hosts'] as $hnum => $host){
-				if(!isset($upd_hosts[$host['hostid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'You do not have enough rights for operation');
-				}
-			}
-
-			if(isset($data['groups']) && !empty($data['groups'])){
-				$options = array(
-					'groups' => zbx_toArray($data['groups']),
-					'hosts' => $data['hosts']
-				);
-				$result = CHostGroup::massAdd($options);
-				if(!$result) self::exception();
-			}
-
-			if(isset($data['templates']) && !empty($data['templates'])){
-				$options = array(
-					'hosts' => $data['hosts'],
-					'templates' => zbx_toArray($data['templates'])
-				);
-				$result = CTemplate::massAdd($options);
-				if(!$result) self::exception();
-			}
-
-			if(isset($data['macros']) && !empty($data['macros'])){
-				$options = array(
-					'hosts' => $data['hosts'],
-					'macros' => $data['macros']
-				);
-
-				$result = CUserMacro::massAdd($options);
-				if(!$result) self::exception();
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => zbx_objectValues($data['hosts'], 'hostid'));
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Mass update hosts
- *
- * @param _array $hosts multidimensional array with Hosts data
- * @param array $hosts['hosts'] Array of Host objects to update
- * @param string $hosts['fields']['host'] Host name.
- * @param array $hosts['fields']['groupids'] HostGroup IDs add Host to.
- * @param int $hosts['fields']['port'] Port. OPTIONAL
- * @param int $hosts['fields']['status'] Host Status. OPTIONAL
- * @param int $hosts['fields']['useip'] Use IP. OPTIONAL
- * @param string $hosts['fields']['dns'] DNS. OPTIONAL
- * @param string $hosts['fields']['ip'] IP. OPTIONAL
- * @param int $hosts['fields']['proxy_hostid'] Proxy Host ID. OPTIONAL
- * @param int $hosts['fields']['useipmi'] Use IPMI. OPTIONAL
- * @param string $hosts['fields']['ipmi_ip'] IPMAI IP. OPTIONAL
- * @param int $hosts['fields']['ipmi_port'] IPMI port. OPTIONAL
- * @param int $hosts['fields']['ipmi_authtype'] IPMI authentication type. OPTIONAL
- * @param int $hosts['fields']['ipmi_privilege'] IPMI privilege. OPTIONAL
- * @param string $hosts['fields']['ipmi_username'] IPMI username. OPTIONAL
- * @param string $hosts['fields']['ipmi_password'] IPMI password. OPTIONAL
- * @return boolean
- */
-	public static function massUpdate($data){
-		$hosts = zbx_toArray($data['hosts']);
-		$hostids = zbx_objectValues($hosts, 'hostid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'output' => API_OUTPUT_EXTEND,
-				'preservekeys' => 1,
-			);
-			$upd_hosts = self::get($options);
-			foreach($hosts as $hnum => $host){
-				if(!isset($upd_hosts[$host['hostid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-// CHECK IF HOSTS HAVE AT LEAST 1 GROUP {{{
-			if(isset($data['groups']) && empty($data['groups'])){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'No groups for hosts');
-			}
-// }}} CHECK IF HOSTS HAVE AT LEAST 1 GROUP
-
-
-// UPDATE HOSTS PROPERTIES {{{
-			if(isset($data['host'])){
-				if(count($hosts) > 1){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot mass update host name');
-				}
-
-				$cur_host = reset($hosts);
-
-				$options = array(
-					'filter' => array(
-						'host' => $cur_host['host']),
-					'output' => API_OUTPUT_SHORTEN,
-					'editable' => 1,
-					'nopermissions' => 1
-				);
-				$host_exists = self::get($options);
-				$host_exist = reset($host_exists);
-				if($host_exist && ($host_exist['hostid'] != $cur_host['hostid'])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_HOST.' [ '.$data['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-
-//can't add host with the same name as existing template
-				if(CTemplate::exists(array('host' => $cur_host['host'])))
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_TEMPLATE.' [ '.$cur_host['host'].' ] '.S_ALREADY_EXISTS_SMALL);
-			}
-
-			if(isset($data['host']) && !preg_match('/^'.ZBX_PREG_HOST_FORMAT.'$/i', $data['host'])){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for Hostname [ '.$data['host'].' ]');
-			}
-			if(isset($data['dns']) && !empty($data['dns']) && !preg_match('/^'.ZBX_PREG_DNS_FORMAT.'$/i', $data['dns'])){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Incorrect characters used for DNS [ '.$data['dns'].' ]');
-			}
-
-			$sql_set = array();
-			if(isset($data['proxy_hostid'])) $sql_set[] = 'proxy_hostid='.$data['proxy_hostid'];
-			if(isset($data['host'])) $sql_set[] = 'host='.zbx_dbstr($data['host']);
-			if(isset($data['port'])) $sql_set[] = 'port='.$data['port'];
-			if(isset($data['status'])) $sql_set[] = 'status='.$data['status'];
-			if(isset($data['useip'])) $sql_set[] = 'useip='.$data['useip'];
-			if(isset($data['dns'])) $sql_set[] = 'dns='.zbx_dbstr($data['dns']);
-			if(isset($data['ip'])) $sql_set[] = 'ip='.zbx_dbstr($data['ip']);
-			if(isset($data['useipmi'])) $sql_set[] = 'useipmi='.$data['useipmi'];
-			if(isset($data['ipmi_port'])) $sql_set[] = 'ipmi_port='.$data['ipmi_port'];
-			if(isset($data['ipmi_authtype'])) $sql_set[] = 'ipmi_authtype='.$data['ipmi_authtype'];
-			if(isset($data['ipmi_privilege'])) $sql_set[] = 'ipmi_privilege='.$data['ipmi_privilege'];
-			if(isset($data['ipmi_username'])) $sql_set[] = 'ipmi_username='.zbx_dbstr($data['ipmi_username']);
-			if(isset($data['ipmi_password'])) $sql_set[] = 'ipmi_password='.zbx_dbstr($data['ipmi_password']);
-			if(isset($data['ipmi_ip'])) $sql_set[] = 'ipmi_ip='.zbx_dbstr($data['ipmi_ip']);
-
-			if(!empty($sql_set)){
-				$sql = 'UPDATE hosts SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $hostids);
-				$result = DBexecute($sql);
-				if(isset($data['status']))
-					update_host_status($hostids, $data['status']);
-			}
-// }}} UPDATE HOSTS PROPERTIES
-
-
-// UPDATE HOSTGROUPS LINKAGE {{{
-			if(isset($data['groups']) && !is_null($data['groups'])){
-				$data['groups'] = zbx_toArray($data['groups']);
-
-				$host_groups = CHostGroup::get(array('hostids' => $hostids));
-				$host_groupids = zbx_objectValues($host_groups, 'groupid');
-				$new_groupids = zbx_objectValues($data['groups'], 'groupid');
-
-				$groups_to_add = array_diff($new_groupids, $host_groupids);
-
-				if(!empty($groups_to_add)){
-					$result = self::massAdd(array(
-						'hosts' => $hosts,
-						'groups' => zbx_toObject($groups_to_add, 'groupid')
-					));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Can\'t add group');
-					}
-				}
-
-				$groupids_to_del = array_diff($host_groupids, $new_groupids);
-
-				if(!empty($groupids_to_del)){
-					$result = self::massRemove(array('hostids' => $hostids, 'groupids' => $groupids_to_del));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove group');
-					}
-				}
-			}
-// }}} UPDATE HOSTGROUPS LINKAGE
-
-
-			$data['templates_clear'] = isset($data['templates_clear']) ? zbx_toArray($data['templates_clear']) : array();
-			$cleared_templateids = array();
-			foreach($hostids as $hostid){
-				foreach($data['templates_clear'] as $tpl){
-					$result = unlink_template($hostid, $tpl['templateid'], false);
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot unlink template [ '.$tpl['templateid'].' ]');
-					}
-					$cleared_templateids[] = $tpl['templateid'];
-				}
-			}
-
-
-// UPDATE TEMPLATE LINKAGE {{{
-			if(isset($data['templates']) && !is_null($data['templates'])){
-				$opt = array(
-					'hostids' => $hostids,
-					'output' => API_OUTPUT_SHORTEN,
-					'preservekeys' => true,
-				);
-				$host_templates = CTemplate::get($opt);
-
-				$host_templateids = array_keys($host_templates);
-				$new_templateids = zbx_objectValues($data['templates'], 'templateid');
-
-				$templates_to_del = array_diff($host_templateids, $new_templateids);
-				$templates_to_del = array_diff($templates_to_del, $cleared_templateids);
-
-				if(!empty($templates_to_del)){
-					$result = self::massRemove(array('hostids' => $hostids, 'templateids' => $templates_to_del));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, S_CANNOT_UNLINK_TEMPLATE);
-					}
-				}
-
-				$result = self::massAdd(array('hosts' => $hosts, 'templates' => $data['templates']));
-				if(!$result){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_CANNOT_LINK_TEMPLATE);
-				}
-			}
-// }}} UPDATE TEMPLATE LINKAGE
-
-
-// UPDATE MACROS {{{
-			if(isset($data['macros']) && !is_null($data['macros'])){
-				$macrosToAdd = zbx_toHash($data['macros'], 'macro');
-
-				$hostMacros = CUserMacro::get(array(
-					'hostids' => $hostids,
-					'output' => API_OUTPUT_EXTEND,
-				));
-				$hostMacros = zbx_toHash($hostMacros, 'macro');
-
-// Delete
-				$macrosToDelete = array();
-				foreach($hostMacros as $hmnum => $hmacro){
-					if(!isset($macrosToAdd[$hmacro['macro']])){
-						$macrosToDelete[] = $hmacro['macro'];
-					}
-				}
-// Update
-				$macrosToUpdate = array();
-				foreach($macrosToAdd as $nhmnum => $nhmacro){
-					if(isset($hostMacros[$nhmacro['macro']])){
-						$macrosToUpdate[] = $nhmacro;
-						unset($macrosToAdd[$nhmnum]);
-					}
-				}
-//----
-
-				if(!empty($macrosToDelete)){
-					$result = self::massRemove(array('hostids' => $hostids, 'macros' => $macrosToDelete));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Can\'t remove macro');
-					}
-				}
-
-				if(!empty($macrosToUpdate)){
-					$result = CUsermacro::massUpdate(array('hosts' => $hosts, 'macros' => $macrosToUpdate));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot update macro');
-					}
-				}
-
-				if(!empty($macrosToAdd)){
-					$result = self::massAdd(array('hosts' => $hosts, 'macros' => $macrosToAdd));
-					if(!$result){
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot add macro');
-					}
-				}
-			}
-// }}} UPDATE MACROS
-
-
-// PROFILE {{{
-			if(isset($data['profile']) && !is_null($data['profile'])){
-				if(empty($data['profile'])){
-					$sql = 'DELETE FROM hosts_profiles WHERE '.DBcondition('hostid', $hostids);
-					if(!DBexecute($sql))
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete profile');
-				}
-				else{
-					$existing_profiles = array();
-					$existing_profiles_db = DBselect('SELECT hostid FROM hosts_profiles WHERE '.DBcondition('hostid', $hostids));
-					while($existing_profile = DBfetch($existing_profiles_db)){
-						$existing_profiles[] = $existing_profile['hostid'];
-					}
-
-					$hostids_without_profile = array_diff($hostids, $existing_profiles);
-
-					$fields = array_keys($data['profile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $data['profile']);
-					$values = implode(', ', $values);
-
-					foreach($hostids_without_profile as $hostid){
-						$sql = 'INSERT INTO hosts_profiles (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')';
-						if(!DBexecute($sql))
-							self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot create profile');
-					}
-
-					if(!empty($existing_profiles)){
-						$host_profile_fields = array('devicetype', 'name', 'os', 'serialno', 'tag','macaddress', 'hardware', 'software',
-							'contact', 'location', 'notes');
-						$sql_set = array();
-						foreach($host_profile_fields as $field){
-							if(isset($data['profile'][$field])) $sql_set[] = $field.'='.zbx_dbstr($data['profile'][$field]);
-						}
-
-						$sql = 'UPDATE hosts_profiles SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $existing_profiles);
-						if(!DBexecute($sql))
-							self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot update profile');
-					}
-				}
-			}
-// }}} PROFILE
-
-
-// EXTENDED PROFILE {{{
-			if(isset($data['extendedProfile']) && !is_null($data['extendedProfile'])){
-				if(empty($data['extendedProfile'])){
-					$sql = 'DELETE FROM hosts_profiles_ext WHERE '.DBcondition('hostid', $hostids);
-					if(!DBexecute($sql))
-						self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete extended profile');
-				}
-				else{
-					$existing_profiles = array();
-					$existing_profiles_db = DBselect('SELECT hostid FROM hosts_profiles_ext WHERE '.DBcondition('hostid', $hostids));
-					while($existing_profile = DBfetch($existing_profiles_db)){
-						$existing_profiles[] = $existing_profile['hostid'];
-					}
-
-					$hostids_without_profile = array_diff($hostids, $existing_profiles);
-
-					$fields = array_keys($data['extendedProfile']);
-					$fields = implode(', ', $fields);
-
-					$values = array_map('zbx_dbstr', $data['extendedProfile']);
-					$values = implode(', ', $values);
-
-					foreach($hostids_without_profile as $hostid){
-						$sql = 'INSERT INTO hosts_profiles_ext (hostid, '.$fields.') VALUES ('.$hostid.', '.$values.')';
-						if(!DBexecute($sql))
-							self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot create extended profile');
-					}
-
-					if(!empty($existing_profiles)){
-
-						$host_profile_ext_fields = array('device_alias','device_type','device_chassis','device_os','device_os_short',
-							'device_hw_arch','device_serial','device_model','device_tag','device_vendor','device_contract',
-							'device_who','device_status','device_app_01','device_app_02','device_app_03','device_app_04',
-							'device_app_05','device_url_1','device_url_2','device_url_3','device_networks','device_notes',
-							'device_hardware','device_software','ip_subnet_mask','ip_router','ip_macaddress','oob_ip',
-							'oob_subnet_mask','oob_router','date_hw_buy','date_hw_install','date_hw_expiry','date_hw_decomm','site_street_1',
-							'site_street_2','site_street_3','site_city','site_state','site_country','site_zip','site_rack','site_notes',
-							'poc_1_name','poc_1_email','poc_1_phone_1','poc_1_phone_2','poc_1_cell','poc_1_screen','poc_1_notes','poc_2_name',
-							'poc_2_email','poc_2_phone_1','poc_2_phone_2','poc_2_cell','poc_2_screen','poc_2_notes');
-
-						$sql_set = array();
-						foreach($host_profile_ext_fields as $field){
-							if(isset($data['extendedProfile'][$field])) $sql_set[] = $field.'='.zbx_dbstr($data['extendedProfile'][$field]);
-						}
-
-						$sql = 'UPDATE hosts_profiles_ext SET ' . implode(', ', $sql_set) . ' WHERE '.DBcondition('hostid', $existing_profiles);
-						if(!DBexecute($sql))
-							self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot update extended profile');
-					}
-				}
-			}
-// }}} EXTENDED PROFILE
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * remove Hosts from HostGroups. All Hosts are removed from all HostGroups.
- *
- * @param array $data
- * @param array $data['hostids']
- * @param array $data['groupids']
- * @param array $data['templateids']
- * @param array $data['macroids']
- * @return array
- */
-	public static function massRemove($data){
-		$hostids = zbx_toArray($data['hostids']);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'preservekeys' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-			);
-			$upd_hosts = self::get($options);
-			foreach($hostids as $hostid){
-				if(!isset($upd_hosts[$hostid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			if(isset($data['groupids'])){
-				$options = array(
-					'hostids' => $hostids,
-					'groupids' => zbx_toArray($data['groupids'])
-				);
-				$result = CHostGroup::massRemove($options);
-				if(!$result) self::exception();
-			}
-
-			if(isset($data['templateids'])){
-				$options = array(
-					'hostids' => $hostids,
-					'templateids' => zbx_toArray($data['templateids'])
-				);
-				$result = CTemplate::massRemove($options);
-				if(!$result) self::exception();
-			}
-
-			if(isset($data['macros'])){
-				$options = array(
-					'hostids' => $hostids,
-					'macros' => zbx_toArray($data['macros'])
-				);
-				$result = CUserMacro::massRemove($options);
-				if(!$result) self::exception();
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Delete Host
- *
- * @param array $hosts
- * @param array $hosts[0, ...]['hostid'] Host ID to delete
- * @return array|boolean
- */
-	public static function delete($hosts){
-		$hosts = zbx_toArray($hosts);
-		$hostids = zbx_objectValues($hosts, 'hostid');
-		if(empty($hostids)) return true;
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'hostids' => $hostids,
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1
-			);
-
-			$del_hosts = self::get($options);
-			foreach($hostids as $hnum => $hostid){
-				if(!isset($del_hosts[$hostid])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			$result = delete_host($hostids, false);
-			if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete host');
-
-			self::EndTransaction(true, __METHOD__);
-			return array('hostids' => $hostids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-}
-?>
diff -rupN classes_modif/class.cscreen.php classes/class.cscreen.php
--- classes_modif/class.cscreen.php	2011-11-14 12:10:00.000000000 +0100
+++ classes/class.cscreen.php	2011-11-09 11:00:37.000000000 +0100
@@ -65,7 +65,6 @@ class CScreen extends CZBXAPI{
 			'limit' => null);
 
 		$def_options = array(
-			'userid'					=> null,
 			'nodeids'					=> null,
 			'screenids'					=> null,
 			'screenitemids'				=> null,
@@ -93,18 +92,6 @@ class CScreen extends CZBXAPI{
 
 		$options = zbx_array_merge($def_options, $options);
 
-//API MODIFICADA INTEGRACION ZABBIX VNMS / WEB CESGA
-            if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-//FIN API MODIFICADA
-
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
 
diff -rupN classes_modif/class.cscreen.php~ classes/class.cscreen.php~
--- classes_modif/class.cscreen.php~	2011-11-14 12:09:48.000000000 +0100
+++ classes/class.cscreen.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,883 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CScreen class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Screens
- */
-class CScreen extends CZBXAPI{
-/**
- * Get Screen data
- *
- * {@source}
- * @access public
- * @static
- * @since 1.8
- * @version 1
- *
- * @param _array $options
- * @param array $options['nodeids'] Node IDs
- * @param boolean $options['with_items'] only with items
- * @param boolean $options['editable'] only with read-write permission. Ignored for SuperAdmins
- * @param int $options['extendoutput'] return all fields for Hosts
- * @param int $options['count'] count Hosts, returned column name is rowscount
- * @param string $options['pattern'] search hosts by pattern in host names
- * @param int $options['limit'] limit selection
- * @param string $options['order'] deprecated parameter (for now)
- * @return array|boolean Host data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-
-		$sort_columns = array('screenid', 'name'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-
-
-		$sql_parts = array(
-			'select' => array('screens' => 's.screenid'),
-			'from' => array('screens' => 'screens s'),
-			'where' => array(),
-			'order' => array(),
-			'limit' => null);
-
-		$def_options = array(
-			'userid'					=> null,
-			'nodeids'					=> null,
-			'screenids'					=> null,
-			'screenitemids'				=> null,
-			'editable'					=> null,
-			'nopermissions'				=> null,
-
-// filter
-			'filter'					=> null,
-			'search'					=> null,
-			'startSearch'				=> null,
-			'excludeSearch'				=> null,
-			'searchWildcardsEnabled'	=> null,
-
-// OutPut
-			'extendoutput'				=> null,
-			'output'					=> API_OUTPUT_REFER,
-			'select_screenitems'		=> null,
-			'countOutput'				=> null,
-			'preservekeys'				=> null,
-
-			'sortfield'					=> '',
-			'sortorder'					=> '',
-			'limit'						=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_screenitems'])){
-				$options['select_screenitems'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-// editable + PERMISSION CHECK
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// screenids
-		if(!is_null($options['screenids'])){
-			zbx_value2array($options['screenids']);
-			$sql_parts['where'][] = DBcondition('s.screenid', $options['screenids']);
-		}
-
-// screenitemids
-		if(!is_null($options['screenitemids'])){
-			zbx_value2array($options['screenitemids']);
-			if($options['output'] != API_OUTPUT_EXTEND){
-				$sql_parts['select']['screenitemid'] = 'si.screenitemid';
-			}
-			$sql_parts['from']['screens_items'] = 'screens_items si';
-			$sql_parts['where']['ssi'] = 'si.screenid=s.screenid';
-			$sql_parts['where'][] = DBcondition('si.screenitemid', $options['screenitemids']);
-		}
-
-// extendoutput
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['screens'] = 's.*';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-
-			$sql_parts['select'] = array('count(DISTINCT s.screenid) as rowscount');
-		}
-
-// filter
-		if(is_array($options['filter'])){
-			zbx_db_filter('screens s', $options, $sql_parts);
-		}
-
-// search
-		if(is_array($options['search'])){
-			zbx_db_search('screens s', $options, $sql_parts);
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 's.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('s.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('s.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 's.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//-------
-
-		$screenids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.zbx_db_distinct($sql_parts).' '.$sql_select.'
-				FROM '.$sql_from.'
-				WHERE '.DBin_node('s.screenid', $nodeids).
-					$sql_where.
-				$sql_order;
-		$res = DBselect($sql, $sql_limit);
-		while($screen = DBfetch($res)){
-			if(!is_null($options['countOutput'])){
-				$result = $screen['rowscount'];
-			}
-			else{
-				$screenids[$screen['screenid']] = $screen['screenid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$screen['screenid']] = array('screenid' => $screen['screenid']);
-				}
-				else{
-					if(!isset($result[$screen['screenid']])) $result[$screen['screenid']]= array();
-
-					if(!is_null($options['select_screenitems']) && !isset($result[$screen['screenid']]['screenitems'])){
-						$result[$screen['screenid']]['screenitems'] = array();
-					}
-
-					if(isset($screen['screenitemid']) && is_null($options['select_screenitems'])){
-						if(!isset($result[$screen['screenid']]['screenitems']))
-							$result[$screen['screenid']]['screenitems'] = array();
-
-						$result[$screen['screenid']]['screenitems'][] = array('screenitemid' => $screen['screenitemid']);
-						unset($screen['screenitemid']);
-					}
-
-					$result[$screen['screenid']] += $screen;
-				}
-			}
-		}
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){}
-		else if(!empty($result)){
-			$groups_to_check = array();
-			$hosts_to_check = array();
-			$graphs_to_check = array();
-			$items_to_check = array();
-			$maps_to_check = array();
-			$screens_to_check = array();
-			$screens_items = array();
-
-			$db_sitems = DBselect('SELECT * FROM screens_items WHERE '.DBcondition('screenid', $screenids));
-			while($sitem = DBfetch($db_sitems)){
-				if($sitem['resourceid'] == 0) continue;
-
-				$screens_items[$sitem['screenitemid']] = $sitem;
-
-				switch($sitem['resourcetype']){
-					case SCREEN_RESOURCE_HOSTS_INFO:
-					case SCREEN_RESOURCE_TRIGGERS_INFO:
-					case SCREEN_RESOURCE_TRIGGERS_OVERVIEW:
-					case SCREEN_RESOURCE_DATA_OVERVIEW:
-					case SCREEN_RESOURCE_HOSTGROUP_TRIGGERS:
-						$groups_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_HOST_TRIGGERS:
-						$hosts_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_GRAPH:
-						$graphs_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_SIMPLE_GRAPH:
-					case SCREEN_RESOURCE_PLAIN_TEXT:
-						$items_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_MAP:
-						$maps_to_check[] = $sitem['resourceid'];
-					break;
-					case SCREEN_RESOURCE_SCREEN:
-						$screens_to_check[] = $sitem['resourceid'];
-					break;
-				}
-			}
-
-			$groups_to_check = array_unique($groups_to_check);
-			$hosts_to_check = array_unique($hosts_to_check);
-			$graphs_to_check = array_unique($graphs_to_check);
-			$items_to_check = array_unique($items_to_check);
-			$maps_to_check = array_unique($maps_to_check);
-			$screens_to_check = array_unique($screens_to_check);
-/*
-sdii($graphs_to_check);
-sdii($items_to_check);
-sdii($maps_to_check);
-sdii($screens_to_check);
-//*/
-// group
-			$group_options = array(
-								'nodeids' => $nodeids,
-								'groupids' => $groups_to_check,
-								'editable' => $options['editable']);
-			$allowed_groups = CHostgroup::get($group_options);
-			$allowed_groups = zbx_objectValues($allowed_groups, 'groupid');
-
-// host
-			$host_options = array(
-								'nodeids' => $nodeids,
-								'hostids' => $hosts_to_check,
-								'editable' => $options['editable']);
-			$allowed_hosts = CHost::get($host_options);
-			$allowed_hosts = zbx_objectValues($allowed_hosts, 'hostid');
-
-// graph
-			$graph_options = array(
-								'nodeids' => $nodeids,
-								'graphids' => $graphs_to_check,
-								'editable' => $options['editable']);
-			$allowed_graphs = CGraph::get($graph_options);
-			$allowed_graphs = zbx_objectValues($allowed_graphs, 'graphid');
-
-// item
-			$item_options = array(
-								'nodeids' => $nodeids,
-								'itemids' => $items_to_check,
-								'webitems' => 1,
-								'editable' => $options['editable']);
-			$allowed_items = CItem::get($item_options);
-			$allowed_items = zbx_objectValues($allowed_items, 'itemid');
-// map
-			$map_options = array(
-								'nodeids' => $nodeids,
-								'sysmapids' => $maps_to_check,
-								'editable' => $options['editable']);
-			$allowed_maps = CMap::get($map_options);
-			$allowed_maps = zbx_objectValues($allowed_maps, 'sysmapid');
-// screen
-			$screens_options = array(
-								'nodeids' => $nodeids,
-								'screenids' => $screens_to_check,
-								'editable' => $options['editable']);
-			$allowed_screens = CScreen::get($screens_options);
-			$allowed_screens = zbx_objectValues($allowed_screens, 'screenid');
-
-
-			$restr_groups = array_diff($groups_to_check, $allowed_groups);
-			$restr_hosts = array_diff($hosts_to_check, $allowed_hosts);
-			$restr_graphs = array_diff($graphs_to_check, $allowed_graphs);
-			$restr_items = array_diff($items_to_check, $allowed_items);
-			$restr_maps = array_diff($maps_to_check, $allowed_maps);
-			$restr_screens = array_diff($screens_to_check, $allowed_screens);
-
-
-/*
-SDI('---------------------------------------');
-SDII($restr_graphs);
-SDII($restr_items);
-SDII($restr_maps);
-SDII($restr_screens);
-SDI('/////////////////////////////////');
-//*/
-// group
-			foreach($restr_groups as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_HOSTS_INFO,SCREEN_RESOURCE_TRIGGERS_INFO,SCREEN_RESOURCE_TRIGGERS_OVERVIEW,SCREEN_RESOURCE_DATA_OVERVIEW,SCREEN_RESOURCE_HOSTGROUP_TRIGGERS))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// host
-			foreach($restr_hosts as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_HOST_TRIGGERS))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// graph
-			foreach($restr_graphs as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) && ($screen_item['resourcetype'] == SCREEN_RESOURCE_GRAPH)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// item
-			foreach($restr_items as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if(($screen_item['resourceid'] == $resourceid) &&
-						uint_in_array($screen_item['resourcetype'], array(SCREEN_RESOURCE_SIMPLE_GRAPH, SCREEN_RESOURCE_PLAIN_TEXT))
-					){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// map
-			foreach($restr_maps as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if($screen_item['resourceid'] == $resourceid && ($screen_item['resourcetype'] == SCREEN_RESOURCE_MAP)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-// screen
-			foreach($restr_screens as $resourceid){
-				foreach($screens_items as $screen_itemid => $screen_item){
-					if($screen_item['resourceid'] == $resourceid && ($screen_item['resourcetype'] == SCREEN_RESOURCE_SCREEN)){
-						unset($result[$screen_item['screenid']]);
-						unset($screens_items[$screen_itemid]);
-					}
-				}
-			}
-		}
-
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-
-// Adding ScreenItems
-		if(!is_null($options['select_screenitems']) && str_in_array($options['select_screenitems'], $subselects_allowed_outputs)){
-			if(!isset($screens_items)){
-				$screens_items = array();
-				$db_sitems = DBselect('SELECT * FROM screens_items WHERE '.DBcondition('screenid', $screenids));
-				while($sitem = DBfetch($db_sitems)){
-					$screens_items[$sitem['screenitemid']] = $sitem;
-				}
-			}
-
-			foreach($screens_items as $snum => $sitem){
-				if(!isset($result[$sitem['screenid']]['screenitems'])){
-					$result[$sitem['screenid']]['screenitems'] = array();
-				}
-
-				$result[$sitem['screenid']]['screenitems'][] = $sitem;
-			}
-		}
-
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-
-	return $result;
-	}
-
-	public static function getObjects($data){
-		$options = array(
-			'filter' => $data,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($data['node']))
-			$options['nodeids'] = getNodeIdByNodeName($data['node']);
-		else if(isset($data['nodeids']))
-			$options['nodeids'] = $data['nodeids'];
-
-		$result = self::get($options);
-
-	return $result;
-	}
-
-	public static function exists($data){
-		$keyFields = array(array('screenid', 'name'));
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $data),
-			'output' => API_OUTPUT_SHORTEN,
-			'nopermissions' => 1,
-			'limit' => 1
-		);
-
-		if(isset($data['node']))
-			$options['nodeids'] = getNodeIdByNodeName($data['node']);
-		else if(isset($data['nodeids']))
-			$options['nodeids'] = $data['nodeids'];
-
-		$sysmaps = self::get($options);
-
-	return !empty($sysmaps);
-	}
-
-	protected static function checkItems($screenitems){
-		$hostgroups = array();
-		$hosts = array();
-		$graphs = array();
-		$items = array();
-		$maps = array();
-		$screens = array();
-
-		$resources = array(SCREEN_RESOURCE_GRAPH, SCREEN_RESOURCE_SIMPLE_GRAPH, SCREEN_RESOURCE_PLAIN_TEXT,
-					SCREEN_RESOURCE_MAP,SCREEN_RESOURCE_SCREEN, SCREEN_RESOURCE_TRIGGERS_OVERVIEW,
-					SCREEN_RESOURCE_DATA_OVERVIEW);
-
-		foreach($screenitems as $item){
-			if((isset($item['resourcetype']) && !isset($item['resourceid'])) ||
-				(!isset($item['resourcetype']) && isset($item['resourceid'])))
-			{
-				self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-			}
-
-			if(isset($item['resourceid']) && ($item['resourceid'] == 0)){
-				if(uint_in_array($item['resourcetype'], $resources))
-					throw new Exception(S_INCORRECT_RESOURCE_PROVIDED_FOR_SCREEN_ITEM);
-				else
-					continue;
-			}
-
-			switch($item['resourcetype']){
-				case SCREEN_RESOURCE_HOSTS_INFO:
-				case SCREEN_RESOURCE_TRIGGERS_INFO:
-				case SCREEN_RESOURCE_TRIGGERS_OVERVIEW:
-				case SCREEN_RESOURCE_DATA_OVERVIEW:
-				case SCREEN_RESOURCE_HOSTGROUP_TRIGGERS:
-					$hostgroups[] = $item['resourceid'];
-				break;
-				case SCREEN_RESOURCE_HOST_TRIGGERS:
-					$hosts[] = $item['resourceid'];
-				break;
-				case SCREEN_RESOURCE_GRAPH:
-					$graphs[] = $item['resourceid'];
-				break;
-				case SCREEN_RESOURCE_SIMPLE_GRAPH:
-				case SCREEN_RESOURCE_PLAIN_TEXT:
-					$items[] = $item['resourceid'];
-				break;
-				case SCREEN_RESOURCE_MAP:
-					$maps[] = $item['resourceid'];
-				break;
-				case SCREEN_RESOURCE_SCREEN:
-					$screens[] = $item['resourceid'];
-				break;
-			}
-		}
-
-		if(!empty($hostgroups)){
-			$result = CHostGroup::get(array(
-				'groupids' => $hostgroups,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			));
-			foreach($hostgroups as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Host group identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-		if(!empty($hosts)){
-			$result = CHost::get(array(
-				'hostids' => $hosts,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			));
-			foreach($hosts as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Host identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-		if(!empty($graphs)){
-			$result = CGraph::get(array(
-				'graphids' => $graphs,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			));
-			foreach($graphs as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Graph identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-		if(!empty($items)){
-			$result = CItem::get(array(
-				'itemids' => $items,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-				'webitems' => 1,
-			));
-			foreach($items as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Item identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-		if(!empty($maps)){
-			$result = CMap::get(array(
-				'sysmapids' => $maps,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			));
-			foreach($maps as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Map identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-		if(!empty($screens)){
-			$result = self::get(array(
-				'screenids' => $screens,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			));
-			foreach($screens as $id){
-				if(!isset($result[$id]))
-					self::exception(ZBX_API_ERROR_PERMISSIONS, 'Incorrect Screen identity "'.$id.'" provided for Screens item resource');
-			}
-		}
-	}
-
-/**
- * Create Screen
- *
- * @param _array $screens
- * @param string $screens['name']
- * @param array $screens['hsize']
- * @param int $screens['vsize']
- * @return array
- */
-	public static function create($screens){
-		$screens = zbx_toArray($screens);
-		$insert_screens = array();
-		$insert_screen_items = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$newScreenNames = zbx_objectValues($screens, 'name');
-// Exists
-			$options = array(
-				'filter' => array('name' => $newScreenNames),
-				'output' => 'extend',
-				'nopermissions' => 1
-			);
-			$db_screens = self::get($options);
-			foreach($db_screens as $dbsnum => $db_screen){
-				self::exception(ZBX_API_ERROR_PARAMETERS, S_SCREEN.' [ '.$db_screen['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-			}
-//---
-
-			foreach($screens as $snum => $screen){
-				$screen_db_fields = array('name' => null);
-				if(!check_db_fields($screen_db_fields, $screen)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen [ '.$screen['name'].' ]');
-				}
-
-				$iscr = array('name' => $screen['name']);
-				if(isset($screen['hsize'])) $iscr['hsize'] = $screen['hsize'];
-				if(isset($screen['vsize'])) $iscr['vsize'] = $screen['vsize'];
-				$insert_screens[$snum] = $iscr;
-			}
-			$screenids = DB::insert('screens', $insert_screens);
-
-			foreach($screens as $snum => $screen){
-				if(isset($screen['screenitems'])){
-					foreach($screen['screenitems'] as $screenitem){
-						$screenitem['screenid'] = $screenids[$snum];
-						$insert_screen_items[] = $screenitem;
-					}
-				}
-			}
-			self::addItems($insert_screen_items);
-
-			self::EndTransaction(true, __METHOD__);
-			return array('screenids' => $screenids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Update Screen
- *
- * @param _array $screens multidimensional array with Hosts data
- * @param string $screens['screenid']
- * @param int $screens['name']
- * @param int $screens['hsize']
- * @param int $screens['vsize']
- * @return boolean
- */
-	public static function update($screens){
-		$screens = zbx_toArray($screens);
-		$update = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'screenids' => zbx_objectValues($screens, 'screenid'),
-				'editable' => 1,
-				'output' => API_OUTPUT_SHORTEN,
-				'preservekeys' => 1,
-			);
-			$upd_screens = self::get($options);
-			foreach($screens as $gnum => $screen){
-				if(!isset($screen['screenid'], $upd_screens[$screen['screenid']])){
-					self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-				}
-			}
-
-			foreach($screens as $snum => $screen){
-				if(isset($screen['name'])){
-					$options = array(
-						'filter' => array('name' => $screen['name']),
-						'preservekeys' => 1,
-						'nopermissions' => 1,
-						'output' => API_OUTPUT_SHORTEN,
-					);
-					$exist_screens = self::get($options);
-					$exist_screen = reset($exist_screens);
-
-					if($exist_screen && ($exist_screen['screenid'] != $screen['screenid']))
-						self::exception(ZBX_API_ERROR_PERMISSIONS, S_SCREEN.' [ '.$screen['name'].' ] '.S_ALREADY_EXISTS_SMALL);
-				}
-
-				$screenid = $screen['screenid'];
-				unset($screen['screenid']);
-				if(!empty($screen)){
-					$update[] = array(
-						'values' => $screen,
-						'where' => array('screenid='.$screenid),
-					);
-				}
-
-				if(isset($screen['screenitems'])){
-					$update_items = array(
-						'screenids' => $screenid,
-						'screenitems' => $screen['screenitems'],
-					);
-					self::updateItems($update_items);
-				}
-			}
-			DB::update('screens', $update);
-
-			self::EndTransaction(true, __METHOD__);
-			return true;
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Delete Screen
- *
- * @param array $screenids
- * @return boolean
- */
-	public static function delete($screenids){
-		$screenids = zbx_toArray($screenids);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'screenids' => $screenids,
-				'editable' => 1,
-				'preservekeys' => 1,
-			);
-			$del_screens = self::get($options);
-			foreach($screenids as $screenid){
-				if(!isset($del_screens[$screenid])) self::exception(ZBX_API_ERROR_PERMISSIONS, S_NO_PERMISSION);
-			}
-
-			DB::delete('screens_items', DBcondition('screenid', $screenids));
-			DB::delete('screens_items', array(DBcondition('resourceid', $screenids), 'resourcetype='.SCREEN_RESOURCE_SCREEN));
-			DB::delete('slides', DBcondition('screenid', $screenids));
-			DB::delete('screens', DBcondition('screenid', $screenids));
-
-			self::EndTransaction(true, __METHOD__);
-			return array('screenids' => $screenids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Add ScreenItem
- *
- * @param array $screenitems
- * @return boolean
- */
-	protected static function addItems($screenitems){
-		$insert = array();
-
-		self::checkItems($screenitems);
-
-		foreach($screenitems as $screenitem){
-			$items_db_fields = array(
-				'screenid' => null,
-				'resourcetype' => null,
-				'resourceid' => null,
-				'x' => null,
-				'y' => null,
-			);
-			if(!check_db_fields($items_db_fields, $screenitem)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen items');
-			}
-
-			$insert[] = $screenitem;
-		}
-		DB::insert('screens_items', $insert);
-		return true;
-	}
-
-	protected static function updateItems($data){
-		$screenids = zbx_toArray($data['screenids']);
-		$insert = array();
-		$update = array();
-		$delete = array();
-
-
-		self::checkItems($data['screenitems']);
-
-		$options = array(
-			'screenids' => $screenids,
-			'nopermissions' => 1,
-			'output' => API_OUTPUT_EXTEND,
-			'select_screenitems' => API_OUTPUT_EXTEND,
-			'preservekeys' => 1,
-		);
-		$screens = self::get($options);
-
-
-		foreach($data['screenitems'] as $new_item){
-			$items_db_fields = array(
-				'x' => null,
-				'y' => null,
-			);
-			if(!check_db_fields($items_db_fields, $new_item)){
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen items');
-			}
-		}
-
-		foreach($screens as $screen){
-			$new_items = $data['screenitems'];
-
-			foreach($screen['screenitems'] as $cnum => $current_item){
-				foreach($new_items as $nnum => $new_item){
-					if(($current_item['x'] == $new_item['x']) && ($current_item['y'] == $new_item['y'])){
-
-						$tmpupd = array(
-							'where' => array(
-								'screenid='.$screen['screenid'],
-								'x='.$new_item['x'],
-								'y='.$new_item['y']
-							)
-						);
-
-						unset($new_item['screenid'], $new_item['screenitemid'], $new_item['x'], $new_item['y']);
-						$tmpupd['values'] = $new_item;
-
-						$update[] = $tmpupd;
-
-						unset($screen['screenitems'][$cnum]);
-						unset($new_items[$nnum]);
-						break;
-					}
-				}
-			}
-
-			foreach($new_items as $new_item){
-				$items_db_fields = array(
-					'resourcetype' => null,
-					'resourceid' => null,
-				);
-				if(!check_db_fields($items_db_fields, $new_item)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for screen items');
-				}
-
-				$new_item['screenid'] = $screen['screenid'];
-				$insert[] = $new_item;
-			}
-
-			foreach($screen['screenitems'] as $del_item){
-				$delete[] = $del_item['screenitemid'];
-			}
-		}
-
-		if(!empty($insert)) DB::insert('screens_items', $insert);
-		if(!empty($update)) DB::update('screens_items', $update);
-		if(!empty($delete)) DB::delete('screens_items', DBcondition('screenitemid', $delete));
-
-		return true;
-	}
-
-}
-?>
diff -rupN classes_modif/class.ctrigger.php classes/class.ctrigger.php
--- classes_modif/class.ctrigger.php	2011-11-14 14:06:45.000000000 +0100
+++ classes/class.ctrigger.php	2011-11-09 11:00:37.000000000 +0100
@@ -70,7 +70,6 @@ class CTrigger extends CZBXAPI{
 		$def_options = array(
 			'nodeids'				=> null,
 			'groupids'				=> null,
-			'userid'			=> null,
 			'templateids'			=> null,
 			'hostids'				=> null,
 			'triggerids'			=> null,
@@ -127,18 +126,6 @@ class CTrigger extends CZBXAPI{
 
 		$options = zbx_array_merge($def_options, $options);
 
-//API MODIFICADA INTEGRACION ZABBIX VNMS / WEB CESGA
-            if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-//FIN API MODIFICADA
-
 		if(!is_null($options['extendoutput'])){
 			$options['output'] = API_OUTPUT_EXTEND;
 
@@ -323,7 +310,7 @@ class CTrigger extends CZBXAPI{
 			$sql_parts['from']['functions'] = 'functions f';
 			$sql_parts['from']['items'] = 'items i';
 			$sql_parts['from']['applications'] = 'applications a';
-                	$sql_parts['where']['a'] = DBcondition('a.applicationid', $options['applicationids']);
+			$sql_parts['where']['a'] = DBcondition('a.applicationid', $options['applicationids']);
 			$sql_parts['where']['ia'] = 'i.hostid=a.hostid';
 			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
 			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
@@ -1357,117 +1344,6 @@ COpt::memoryPick();
 			return false;
 		}
 	}
-
-
-	// getDATA_MVL
-public static function getDATA_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-	    'userid' => null,
-	    'eventid' => null,
-	    'ack' => null,
-	    'time' => null,
-            'infoHost' => null,
-            'infoTrigger' => null,
-            'idHost' => null,
-            'numTriggers' => null,
-	    'infoTriggersActivos' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-
-	if(!is_null($options['eventid'])&&(!is_null($options['eventid']))&&
-		(!is_null($options['ack']))&&(!is_null($options['time']))){
-
-
-		$acknowledgeid = get_dbid("acknowledges","acknowledgeid");
-
-                $sql = 'INSERT INTO acknowledges(acknowledgeid,userid,eventid,clock,message) VALUES(
-                        '.$acknowledgeid.','.$options['userid'].','.$options['eventid'].','.$options['time'].',"OK")';
-                DBexecute($sql);
-                $sql= 'UPDATE events SET acknowledged=1 WHERE (eventid='. $options['eventid'] .')';
-                DBexecute($sql);
-
-        }
-	else if (!is_null($options['infoHost'])) {
-       	     $sql='SELECT DISTINCT h.hostid, h.host, g.name, h.ip, t.triggerid, t.priority, ev.eventid, ev.clock  FROM   triggers t,(SELECT  objectid,
-	max(eventid) as eventid, max(clock) as clock FROM events WHERE (value=1) GROUP BY objectid) ev, hosts h, groups g, hosts_groups hg, users_groups ug,
-	rights r, items it, functions f WHERE  (t.status=0) and(t.value=1)and(t.triggerid=ev.objectid)and (h.hostid=it.hostid)and (it.itemid=f.itemid)and
-	(f.triggerid=t.triggerid)and(g.groupid=hg.groupid)and(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='.
-	$options['userid'].')and(r.permission>1)and(h.hostid=hg.hostid)and(g.name NOT LIKE "^%")and(g.internal<>1)and
-	(g.name<>"Imported hosts")   group by h.host order by g.name DESC';
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-            while ($colum = DBfetch($res)) {
-                $sql='SELECT acknowledged FROM events WHERE (eventid='. $colum[eventid].')';
-                $res2 = DBselect($sql);
-                $col2 = DBfetch($res2);
-                $colum[acknowledged]=$col2['acknowledged'];
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-        else if (!is_null($options['infoTrigger']) && !is_null($options['idHost'])) {
-            $sql = 'SELECT t.description, t.status, t.priority, t.triggerid, t.value   FROM triggers t,'.
-                'functions f, items it WHERE (t.triggerid=f.triggerid)&&(it.itemid=f.itemid)&&(it.hostid='.
-                $options['idHost'].') ORDER BY t.value DESC';
-
-
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-        }
-            else if (!is_null($options['infoTriggersActivos'])&&(!is_null($options['idHost']))) {
-           $sql = 'SELECT DISTINCT ev.eventid,ev.clock,ev.value "valorEvento",max(ev.clock) "timeEvento"'.
-            ',t.triggerid,t.description, t.value, t.status, t.priority FROM hosts h, triggers t, items it,'.
-            'functions f, events ev WHERE(h.hostid=it.hostid)and(it.itemid=f.itemid)and(f.triggerid=t.triggerid)'.
-            'and(t.status=0)and(t.value=1)and(ev.objectid=t.triggerid) and(ev.value=1)and(h.hostid='.
-            $options['idHost'].') group by t.triggerid order by t.priority DESC limit 10;';
-
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-}
-
 }
 
-
 ?>
diff -rupN classes_modif/class.ctrigger.php~ classes/class.ctrigger.php~
--- classes_modif/class.ctrigger.php~	2011-11-14 13:51:06.000000000 +0100
+++ classes/class.ctrigger.php~	1970-01-01 01:00:00.000000000 +0100
@@ -1,1473 +0,0 @@
-<?php
-/*
-** ZABBIX
-** Copyright (C) 2000-2010 SIA Zabbix
-**
-** This program is free software; you can redistribute it and/or modify
-** it under the terms of the GNU General Public License as published by
-** the Free Software Foundation; either version 2 of the License, or
-** (at your option) any later version.
-**
-** This program is distributed in the hope that it will be useful,
-** but WITHOUT ANY WARRANTY; without even the implied warranty of
-** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-** GNU General Public License for more details.
-**
-** You should have received a copy of the GNU General Public License
-** along with this program; if not, write to the Free Software
-** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-**/
-?>
-<?php
-/**
- * File containing CTrigger class for API.
- * @package API
- */
-/**
- * Class containing methods for operations with Triggers
- *
- */
-class CTrigger extends CZBXAPI{
-
-/**
- * Get Triggers data
- *
- * @param _array $options
- * @param array $options['itemids']
- * @param array $options['hostids']
- * @param array $options['groupids']
- * @param array $options['triggerids']
- * @param array $options['applicationids']
- * @param array $options['status']
- * @param array $options['editable']
- * @param array $options['extendoutput']
- * @param array $options['count']
- * @param array $options['pattern']
- * @param array $options['limit']
- * @param array $options['order']
- * @return array|int item data as array or false if error
- */
-	public static function get($options=array()){
-		global $USER_DETAILS;
-
-		$result = array();
-		$user_type = $USER_DETAILS['type'];
-		$userid = $USER_DETAILS['userid'];
-
-		$sort_columns = array('triggerid', 'description', 'status', 'priority', 'lastchange'); // allowed columns for sorting
-		$subselects_allowed_outputs = array(API_OUTPUT_REFER, API_OUTPUT_EXTEND); // allowed output options for [ select_* ] params
-		$fields_to_unset = array();
-
-		$sql_parts = array(
-			'select' => array('triggers' => 't.triggerid'),
-			'from' => array('t' => 'triggers t'),
-			'where' => array(),
-			'group' => array(),
-			'order' => array(),
-			'limit' => null,
-			);
-
-		$def_options = array(
-			'nodeids'				=> null,
-			'groupids'				=> null,
-			'userid'			=> null,
-			'templateids'			=> null,
-			'hostids'				=> null,
-			'triggerids'			=> null,
-			'itemids'				=> null,
-			'applicationids'		=> null,
-			'functions'				=> null,
-			'inherited'				=> null,
-			'templated'				=> null,
-			'monitored' 			=> null,
-			'active' 				=> null,
-			'maintenance'			=> null,
-
-			'withUnacknowledgedEvents'		=>	null,
-			'withAcknowledgedEvents'		=>	null,
-			'withLastEventUnacknowledged'	=>	null,
-
-			'skipDependent'			=> null,
-			'nopermissions'			=> null,
-			'editable'				=> null,
-// timing
-			'lastChangeSince'		=> null,
-			'lastChangeTill'		=> null,
-// filter
-			'group'					=> null,
-			'host'					=> null,
-			'only_true'				=> null,
-			'min_severity'			=> null,
-
-			'filter'					=> null,
-			'search'					=> null,
-			'startSearch'				=> null,
-			'excludeSearch'				=> null,
-			'searchWildcardsEnabled'	=> null,
-
-// OutPut
-			'expandData'			=> null,
-			'expandDescription'		=> null,
-			'output'				=> API_OUTPUT_REFER,
-			'extendoutput'			=> null,
-			'select_groups'			=> null,
-			'select_hosts'			=> null,
-			'select_items'			=> null,
-			'select_functions'		=> null,
-			'select_dependencies'	=> null,
-			'countOutput'			=> null,
-			'groupCount'			=> null,
-			'preservekeys'			=> null,
-
-			'sortfield'				=> '',
-			'sortorder'				=> '',
-			'limit'					=> null,
-			'limitSelects'			=> null
-		);
-
-		$options = zbx_array_merge($def_options, $options);
-
-//API MODIFICADA INTEGRACION ZABBIX VNMS / WEB CESGA
-            if(!is_null($options['userid'])){
-                        $USER_DETAILS['userid']=$options['userid'];
-                         $users = CUser::get(array('userids' => $options['userid'],  'extendoutput' => 1));
-                                 foreach($users as $unum => $user)
-                                        $USER_DETAILS['type']=$user['type'];
-//                      $USER_DETAILS['type']=1;
-                        $user_type = $USER_DETAILS['type'];
-                        $userid = $USER_DETAILS['userid'];
-                }
-//FIN API MODIFICADA
-
-		if(!is_null($options['extendoutput'])){
-			$options['output'] = API_OUTPUT_EXTEND;
-
-			if(!is_null($options['select_hosts'])){
-				$options['select_hosts'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_items'])){
-				$options['select_items'] = API_OUTPUT_EXTEND;
-			}
-			if(!is_null($options['select_dependencies'])){
-				$options['select_dependencies'] = API_OUTPUT_EXTEND;
-			}
-		}
-
-		if(is_array($options['output'])){
-			unset($sql_parts['select']['triggers']);
-			foreach($options['output'] as $key => $field){
-				$sql_parts['select'][$field] = ' t.'.$field;
-			}
-
-			if (!is_null($options['expandDescription'])){
-				if(!str_in_array('description', $options['output'])){
-					$options['expandDescription'] = null;
-				}
-				else if(!str_in_array('expression', $options['output'])){
-					$sql_parts['select']['expression'] = ' t.expression';
-					$fields_to_unset[] = 'expression';
-				}
-			}
-
-			$options['output'] = API_OUTPUT_CUSTOM;
-		}
-
-// editable + PERMISSION CHECK
-
-		if((USER_TYPE_SUPER_ADMIN == $user_type) || $options['nopermissions']){
-		}
-		else{
-			$permission = $options['editable']?PERM_READ_WRITE:PERM_READ_ONLY;
-/*/
-			$sql_parts['where'][] = ' EXISTS(  '.
-						' SELECT tt.triggerid  '.
-						' FROM triggers tt,functions ff,items ii,hosts_groups hgg,rights rr,users_groups ugg '.
-						' WHERE t.triggerid=tt.triggerid  '.
-							' AND ff.triggerid=tt.triggerid  '.
-							' AND ff.itemid=ii.itemid  '.
-							' AND hgg.hostid=ii.hostid  '.
-							' AND rr.id=hgg.groupid  '.
-							' AND rr.groupid=ugg.usrgrpid  '.
-							' AND ugg.userid='.$userid.
-							' AND rr.permission>='.$permission.
-							' AND NOT EXISTS(  '.
-								' SELECT fff.triggerid  '.
-								' FROM functions fff, items iii  '.
-								' WHERE fff.triggerid=tt.triggerid '.
-									' AND fff.itemid=iii.itemid '.		'    '.
-									' AND EXISTS( '.
-										' SELECT hggg.groupid '.
-										' FROM hosts_groups hggg, rights rrr, users_groups uggg '.
-										' WHERE hggg.hostid=iii.hostid '.
-											' AND rrr.id=hggg.groupid '.
-											' AND rrr.groupid=uggg.usrgrpid '.
-											' AND uggg.userid='.$userid.
-											' AND rrr.permission<'.$permission.
-										' ) '.
-								' ) '.
-						' ) ';
-//*/
-//*/
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['rights'] = 'rights r';
-			$sql_parts['from']['users_groups'] = 'users_groups ug';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where'][] = 'r.id=hg.groupid ';
-			$sql_parts['where'][] = 'r.groupid=ug.usrgrpid';
-			$sql_parts['where'][] = 'ug.userid='.$userid;
-			$sql_parts['where'][] = 'r.permission>='.$permission;
-			$sql_parts['where'][] = 'NOT EXISTS( '.
-											' SELECT ff.triggerid '.
-											' FROM functions ff, items ii '.
-											' WHERE ff.triggerid=t.triggerid '.
-												' AND ff.itemid=ii.itemid '.
-												' AND EXISTS( '.
-													' SELECT hgg.groupid '.
-													' FROM hosts_groups hgg, rights rr, users_groups gg '.
-													' WHERE hgg.hostid=ii.hostid '.
-														' AND rr.id=hgg.groupid '.
-														' AND rr.groupid=gg.usrgrpid '.
-														' AND gg.userid='.$userid.
-														' AND rr.permission<'.$permission.'))';
-//*/
-		}
-
-// nodeids
-		$nodeids = !is_null($options['nodeids']) ? $options['nodeids'] : get_current_nodeid();
-
-// groupids
-		if(!is_null($options['groupids'])){
-			zbx_value2array($options['groupids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['groupid'] = 'hg.groupid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['groupid'] = DBcondition('hg.groupid', $options['groupids']);
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['hg'] = 'hg.groupid';
-			}
-		}
-
-// templateids
-		if(!is_null($options['templateids'])){
-			zbx_value2array($options['templateids']);
-
-			if(!is_null($options['hostids'])){
-				zbx_value2array($options['hostids']);
-				$options['hostids'] = array_merge($options['hostids'], $options['templateids']);
-			}
-			else{
-				$options['hostids'] = $options['templateids'];
-			}
-		}
-
-// hostids
-		if(!is_null($options['hostids'])){
-			zbx_value2array($options['hostids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['hostid'] = 'i.hostid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['where']['hostid'] = DBcondition('i.hostid', $options['hostids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-			if(!is_null($options['groupCount'])){
-				$sql_parts['group']['i'] = 'i.hostid';
-			}
-		}
-
-// triggerids
-		if(!is_null($options['triggerids'])){
-			zbx_value2array($options['triggerids']);
-
-			$sql_parts['where']['triggerid'] = DBcondition('t.triggerid', $options['triggerids']);
-		}
-
-// itemids
-		if(!is_null($options['itemids'])){
-			zbx_value2array($options['itemids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['itemid'] = 'f.itemid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['where']['itemid'] = DBcondition('f.itemid', $options['itemids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-		}
-
-// applicationids
-		if(!is_null($options['applicationids'])){
-			zbx_value2array($options['applicationids']);
-
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['applicationid'] = 'a.applicationid';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['applications'] = 'applications a';
-					'userid'			=> null,	$sql_parts['where']['a'] = DBcondition('a.applicationid', $options['applicationids']);
-			$sql_parts['where']['ia'] = 'i.hostid=a.hostid';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-		}
-
-// functions
-		if(!is_null($options['functions'])){
-			zbx_value2array($options['functions']);
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where'][] = DBcondition('f.function', $options['functions'], false, true);
-		}
-
-// monitored
-		if(!is_null($options['monitored'])){
-			$sql_parts['where']['monitored'] = ''.
-				' NOT EXISTS ('.
-					' SELECT ff.functionid'.
-					' FROM functions ff'.
-					' WHERE ff.triggerid=t.triggerid'.
-						' AND EXISTS ('.
-								' SELECT ii.itemid'.
-								' FROM items ii, hosts hh'.
-								' WHERE ff.itemid=ii.itemid'.
-									' AND hh.hostid=ii.hostid'.
-									' AND ('.
-										' ii.status<>'.ITEM_STATUS_ACTIVE.
-										' OR hh.status<>'.HOST_STATUS_MONITORED.
-									' )'.
-						' )'.
-				' )';
-			$sql_parts['where']['status'] = 't.status='.TRIGGER_STATUS_ENABLED;
-		}
-
-// active
-		if(!is_null($options['active'])){
-			$sql_parts['where']['active'] = ''.
-				' NOT EXISTS ('.
-					' SELECT ff.functionid'.
-					' FROM functions ff'.
-					' WHERE ff.triggerid=t.triggerid'.
-						' AND EXISTS ('.
-							' SELECT ii.itemid'.
-							' FROM items ii, hosts hh'.
-							' WHERE ff.itemid=ii.itemid'.
-								' AND hh.hostid=ii.hostid'.
-								' AND  hh.status<>'.HOST_STATUS_MONITORED.
-						' )'.
-				' )';
-			$sql_parts['where']['status'] = 't.status='.TRIGGER_STATUS_ENABLED;
-		}
-
-// maintenance
-		if(!is_null($options['maintenance'])){
-			$sql_parts['where'][] = (($options['maintenance'] == 0) ? ' NOT ':'').
-				' EXISTS ('.
-					' SELECT ff.functionid'.
-					' FROM functions ff'.
-					' WHERE ff.triggerid=t.triggerid'.
-						' AND EXISTS ('.
-								' SELECT ii.itemid'.
-								' FROM items ii, hosts hh'.
-								' WHERE ff.itemid=ii.itemid'.
-									' AND hh.hostid=ii.hostid'.
-									' AND hh.maintenance_status=1'.
-						' )'.
-				' )';
-			$sql_parts['where'][] = 't.status='.TRIGGER_STATUS_ENABLED;
-		}
-
-// lastChangeSince
-		if(!is_null($options['lastChangeSince'])){
-			$sql_parts['where']['lastchangesince'] = 't.lastchange>'.$options['lastChangeSince'];
-		}
-
-// lastChangeTill
-		if(!is_null($options['lastChangeTill'])){
-			$sql_parts['where']['lastchangetill'] = 't.lastchange<'.$options['lastChangeTill'];
-		}
-
-// withUnacknowledgedEvents
-		if(!is_null($options['withUnacknowledgedEvents'])){
-			$sql_parts['where']['unack'] = ' EXISTS('.
-				' SELECT e.eventid'.
-				' FROM events e'.
-				' WHERE e.objectid=t.triggerid'.
-					' AND e.object=0'.
-					' AND e.value='.TRIGGER_VALUE_TRUE.
-					' AND e.acknowledged=0)';
-		}
-// withAcknowledgedEvents
-		if(!is_null($options['withAcknowledgedEvents'])){
-			$sql_parts['where']['ack'] = 'NOT EXISTS('.
-				' SELECT e.eventid'.
-				' FROM events e'.
-				' WHERE e.objectid=t.triggerid'.
-					' AND e.object=0'.
-					' AND e.value='.TRIGGER_VALUE_TRUE.
-					' AND e.acknowledged=0)';
-		}
-
-// templated
-		if(!is_null($options['templated'])){
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-
-			if($options['templated']){
-				$sql_parts['where'][] = 'h.status='.HOST_STATUS_TEMPLATE;
-			}
-			else{
-				$sql_parts['where'][] = 'h.status<>'.HOST_STATUS_TEMPLATE;
-			}
-		}
-
-// inherited
-		if(!is_null($options['inherited'])){
-			if($options['inherited']){
-				$sql_parts['where'][] = 't.templateid<>0';
-			}
-			else{
-				$sql_parts['where'][] = 't.templateid=0';
-			}
-		}
-
-// search
-		if(is_array($options['search'])){
-			zbx_db_search('triggers t', $options, $sql_parts);
-		}
-
-// --- FILTER ---
-		if(is_array($options['filter'])){
-			zbx_db_filter('triggers t', $options, $sql_parts);
-
-			if(isset($options['filter']['host']) && !is_null($options['filter']['host'])){
-				zbx_value2array($options['filter']['host']);
-
-				$sql_parts['from']['functions'] = 'functions f';
-				$sql_parts['from']['items'] = 'items i';
-				$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-				$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-				$sql_parts['from']['hosts'] = 'hosts h';
-				$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-				$sql_parts['where']['host'] = DBcondition('h.host', $options['filter']['host'], false, true);
-			}
-
-			if(isset($options['filter']['hostid']) && !is_null($options['filter']['hostid'])){
-				zbx_value2array($options['filter']['hostid']);
-
-				$sql_parts['from']['functions'] = 'functions f';
-				$sql_parts['from']['items'] = 'items i';
-				$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-				$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-
-				$sql_parts['where']['hostid'] = DBcondition('i.hostid', $options['filter']['hostid']);
-			}
-		}
-
-// group
-		if(!is_null($options['group'])){
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['name'] = 'g.name';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts_groups'] = 'hosts_groups hg';
-			$sql_parts['from']['groups'] = 'groups g';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hgi'] = 'hg.hostid=i.hostid';
-			$sql_parts['where']['ghg'] = 'g.groupid = hg.groupid';
-			$sql_parts['where']['group'] = ' UPPER(g.name)='.zbx_dbstr(zbx_strtoupper($options['group']));
-		}
-
-// host
-		if(!is_null($options['host'])){
-			if($options['output'] != API_OUTPUT_SHORTEN){
-				$sql_parts['select']['host'] = 'h.host';
-			}
-
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['i'] = DBcondition('i.hostid', $options['hostids']);
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-			$sql_parts['where']['host'] = ' UPPER(h.host)='.zbx_dbstr(zbx_strtoupper($options['host']));
-		}
-
-// only_true
-		if(!is_null($options['only_true'])){
-
-			$sql_parts['where']['ot'] = '((t.value='.TRIGGER_VALUE_TRUE.')'.
-									' OR '.
-									'((t.value='.TRIGGER_VALUE_FALSE.') AND (t.lastchange>'.(time() - TRIGGER_FALSE_PERIOD).')))';
-		}
-
-// min_severity
-		if(!is_null($options['min_severity'])){
-			$sql_parts['where'][] = 't.priority>='.$options['min_severity'];
-		}
-
-// output
-		if($options['output'] == API_OUTPUT_EXTEND){
-			$sql_parts['select']['triggers'] = 't.*';
-		}
-
-// expandData
-		if(!is_null($options['expandData'])){
-			$sql_parts['select']['host'] = 'h.host';
-			$sql_parts['select']['hostid'] = 'h.hostid';
-			$sql_parts['from']['functions'] = 'functions f';
-			$sql_parts['from']['items'] = 'items i';
-			$sql_parts['from']['hosts'] = 'hosts h';
-			$sql_parts['where']['ft'] = 'f.triggerid=t.triggerid';
-			$sql_parts['where']['fi'] = 'f.itemid=i.itemid';
-			$sql_parts['where']['hi'] = 'h.hostid=i.hostid';
-		}
-
-// countOutput
-		if(!is_null($options['countOutput'])){
-			$options['sortfield'] = '';
-			$sql_parts['select'] = array('COUNT(DISTINCT t.triggerid) as rowscount');
-
-// groupCount
-			if(!is_null($options['groupCount'])){
-				foreach($sql_parts['group'] as $key => $fields){
-					$sql_parts['select'][$key] = $fields;
-				}
-			}
-		}
-
-// order
-// restrict not allowed columns for sorting
-		$options['sortfield'] = str_in_array($options['sortfield'], $sort_columns) ? $options['sortfield'] : '';
-		if(!zbx_empty($options['sortfield'])){
-			$sortorder = ($options['sortorder'] == ZBX_SORT_DOWN)?ZBX_SORT_DOWN:ZBX_SORT_UP;
-
-			$sql_parts['order'][] = 't.'.$options['sortfield'].' '.$sortorder;
-
-			if(!str_in_array('t.'.$options['sortfield'], $sql_parts['select']) && !str_in_array('t.*', $sql_parts['select'])){
-				$sql_parts['select'][] = 't.'.$options['sortfield'];
-			}
-		}
-
-// limit
-		if(zbx_ctype_digit($options['limit']) && $options['limit']){
-			$sql_parts['limit'] = $options['limit'];
-		}
-//---------------
-
-		$triggerids = array();
-
-		$sql_parts['select'] = array_unique($sql_parts['select']);
-		$sql_parts['from'] = array_unique($sql_parts['from']);
-		$sql_parts['where'] = array_unique($sql_parts['where']);
-		$sql_parts['group'] = array_unique($sql_parts['group']);
-		$sql_parts['order'] = array_unique($sql_parts['order']);
-
-		$sql_select = '';
-		$sql_from = '';
-		$sql_where = '';
-		$sql_group = '';
-		$sql_order = '';
-		if(!empty($sql_parts['select']))	$sql_select.= implode(',',$sql_parts['select']);
-		if(!empty($sql_parts['from']))		$sql_from.= implode(',',$sql_parts['from']);
-		if(!empty($sql_parts['where']))		$sql_where.= ' AND '.implode(' AND ',$sql_parts['where']);
-		if(!empty($sql_parts['group']))		$sql_where.= ' GROUP BY '.implode(',',$sql_parts['group']);
-		if(!empty($sql_parts['order']))		$sql_order.= ' ORDER BY '.implode(',',$sql_parts['order']);
-		$sql_limit = $sql_parts['limit'];
-
-		$sql = 'SELECT '.zbx_db_distinct($sql_parts).' '.$sql_select.
-				' FROM '.$sql_from.
-				' WHERE '.DBin_node('t.triggerid', $nodeids).
-					$sql_where.
-				$sql_group.
-				$sql_order;
-//SDI($sql);
-		$db_res = DBselect($sql, $sql_limit);
-		while($trigger = DBfetch($db_res)){
-			if(!is_null($options['countOutput'])){
-				if(!is_null($options['groupCount']))
-					$result[] = $trigger;
-				else
-					$result = $trigger['rowscount'];
-			}
-			else{
-				$triggerids[$trigger['triggerid']] = $trigger['triggerid'];
-
-				if($options['output'] == API_OUTPUT_SHORTEN){
-					$result[$trigger['triggerid']] = array('triggerid' => $trigger['triggerid']);
-				}
-				else{
-					if(!isset($result[$trigger['triggerid']])) $result[$trigger['triggerid']]= array();
-
-					if(!is_null($options['select_hosts']) && !isset($result[$trigger['triggerid']]['hosts'])){
-						$result[$trigger['triggerid']]['hosts'] = array();
-					}
-					if(!is_null($options['select_items']) && !isset($result[$trigger['triggerid']]['items'])){
-						$result[$trigger['triggerid']]['items'] = array();
-					}
-					if(!is_null($options['select_functions']) && !isset($result[$trigger['triggerid']]['functions'])){
-						$result[$trigger['triggerid']]['functions'] = array();
-					}
-					if(!is_null($options['select_dependencies']) && !isset($result[$trigger['triggerid']]['dependencies'])){
-						$result[$trigger['triggerid']]['dependencies'] = array();
-					}
-
-// groups
-					if(isset($trigger['groupid']) && is_null($options['select_groups'])){
-						if(!isset($result[$trigger['triggerid']]['groups'])) $result[$trigger['triggerid']]['groups'] = array();
-
-						$result[$trigger['triggerid']]['groups'][] = array('groupid' => $trigger['groupid']);
-						unset($trigger['groupid']);
-					}
-
-// hostids
-					if(isset($trigger['hostid']) && is_null($options['select_hosts'])){
-						if(!isset($result[$trigger['triggerid']]['hosts'])) $result[$trigger['triggerid']]['hosts'] = array();
-
-						$result[$trigger['triggerid']]['hosts'][] = array('hostid' => $trigger['hostid']);
-
-						if(is_null($options['expandData'])) unset($trigger['hostid']);
-					}
-// itemids
-					if(isset($trigger['itemid']) && is_null($options['select_items'])){
-						if(!isset($result[$trigger['triggerid']]['items']))
-							$result[$trigger['triggerid']]['items'] = array();
-
-						$result[$trigger['triggerid']]['items'][] = array('itemid' => $trigger['itemid']);
-						unset($trigger['itemid']);
-					}
-
-					$result[$trigger['triggerid']] += $trigger;
-				}
-			}
-		}
-
-Copt::memoryPick();
-		if(!is_null($options['countOutput'])){
-			if(is_null($options['preservekeys'])) $result = zbx_cleanHashes($result);
-			return $result;
-		}
-
-// skipDependent
-		if(!is_null($options['skipDependent'])){
-			$tids = $triggerids;
-			$map = array();
-
-			do{
-				$sql = 'SELECT d.triggerid_down, d.triggerid_up, t.value '.
-						' FROM trigger_depends d, triggers t '.
-						' WHERE '.DBcondition('d.triggerid_down', $tids).
-							' AND d.triggerid_up=t.triggerid';
-				$db_result = DBselect($sql);
-
-				$tids = array();
-				while($row = DBfetch($db_result)){
-					if(TRIGGER_VALUE_TRUE == $row['value']){
-						if(isset($map[$row['triggerid_down']])){
-							foreach($map[$row['triggerid_down']] as $triggerid => $state){
-								unset($result[$triggerid]);
-								unset($triggerids[$triggerid]);
-							}
-						}
-						else{
-							unset($result[$row['triggerid_down']]);
-							unset($triggerids[$row['triggerid_down']]);
-						}
-					}
-					else{
-						if(isset($map[$row['triggerid_down']])){
-							if(!isset($map[$row['triggerid_up']]))
-								$map[$row['triggerid_up']] = array();
-
-							$map[$row['triggerid_up']] += $map[$row['triggerid_down']];
-						}
-						else{
-							if(!isset($map[$row['triggerid_up']]))
-								$map[$row['triggerid_up']] = array();
-
-							$map[$row['triggerid_up']][$row['triggerid_down']] = 1;
-						}
-						$tids[] = $row['triggerid_up'];
-					}
-				}
-			}while(!empty($tids));
-		}
-
-// withLastEventUnacknowledged
-		if(!is_null($options['withLastEventUnacknowledged'])){
-			$eventids = array();
-			$sql = 'SELECT max(e.eventid) as eventid, e.objectid'.
-					' FROM events e '.
-					' WHERE e.object='.EVENT_OBJECT_TRIGGER.
-						' AND '.DBcondition('e.objectid', $triggerids).
-						' AND '.DBcondition('e.value', array(TRIGGER_VALUE_TRUE)).
-					' GROUP BY e.objectid';
-			$events_db = DBselect($sql);
-			while($event = DBfetch($events_db)){
-				$eventids[] = $event['eventid'];
-			}
-
-			$correct_triggerids = array();
-			$sql = 'SELECT e.objectid'.
-					' FROM events e '.
-					' WHERE '.DBcondition('e.eventid', $eventids).
-						' AND e.acknowledged=0';
-			$triggers_db = DBselect($sql);
-			while($trigger = DBfetch($triggers_db)){
-				$correct_triggerids[$trigger['objectid']] = $trigger['objectid'];
-			}
-			foreach($result as $triggerid => $trigger){
-				if(!isset($correct_triggerids[$triggerid])){
-					unset($result[$triggerid]);
-					unset($triggerids[$triggerid]);
-				}
-
-			}
-		}
-
-// Adding Objects
-// Adding trigger dependencies
-		if(!is_null($options['select_dependencies']) && str_in_array($options['select_dependencies'], $subselects_allowed_outputs)){
-			$deps = array();
-			$depids = array();
-
-			$sql = 'SELECT triggerid_up, triggerid_down '.
-				' FROM trigger_depends '.
-				' WHERE '.DBcondition('triggerid_down', $triggerids);
-			$db_deps = DBselect($sql);
-			while($db_dep = DBfetch($db_deps)){
-				if(!isset($deps[$db_dep['triggerid_down']])) $deps[$db_dep['triggerid_down']] = array();
-				$deps[$db_dep['triggerid_down']][$db_dep['triggerid_up']] = $db_dep['triggerid_up'];
-				$depids[] = $db_dep['triggerid_up'];
-			}
-
-			$obj_params = array(
-				'triggerids' => $depids,
-				'output' => $options['select_dependencies'],
-				'expandData' => 1,
-				'preservekeys' => 1
-			);
-			$allowed = self::get($obj_params); //allowed triggerids
-
-			foreach($deps as $triggerid => $deptriggers){
-				foreach($deptriggers as $num => $deptriggerid){
-					if(isset($allowed[$deptriggerid])){
-						$result[$triggerid]['dependencies'][] = $allowed[$deptriggerid];
-					}
-				}
-			}
-		}
-
-// Adding groups
-		if(!is_null($options['select_groups']) && str_in_array($options['select_groups'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_groups'],
-				'triggerids' => $triggerids,
-				'preservekeys' => 1
-			);
-			$groups = CHostgroup::get($obj_params);
-			foreach($groups as $groupid => $group){
-				$gtriggers = $group['triggers'];
-				unset($group['triggers']);
-
-				foreach($gtriggers as $num => $trigger){
-					$result[$trigger['triggerid']]['groups'][] = $group;
-				}
-			}
-		}
-// Adding hosts
-		if(!is_null($options['select_hosts'])){
-
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'triggerids' => $triggerids,
-				'templated_hosts' => 1,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-
-			if(is_array($options['select_hosts']) || str_in_array($options['select_hosts'], $subselects_allowed_outputs)){
-				$obj_params['output'] = $options['select_hosts'];
-				$hosts = CHost::get($obj_params);
-
-				if(!is_null($options['limitSelects'])) order_result($hosts, 'host');
-				foreach($hosts as $hostid => $host){
-					unset($hosts[$hostid]['triggers']);
-
-					$count = array();
-					foreach($host['triggers'] as $tnum => $trigger){
-						if(!is_null($options['limitSelects'])){
-							if(!isset($count[$trigger['triggerid']])) $count[$trigger['triggerid']] = 0;
-							$count[$trigger['triggerid']]++;
-
-							if($count[$trigger['triggerid']] > $options['limitSelects']) continue;
-						}
-
-						$result[$trigger['triggerid']]['hosts'][] = &$hosts[$hostid];
-					}
-				}
-			}
-			else if(API_OUTPUT_COUNT == $options['select_hosts']){
-				$obj_params['countOutput'] = 1;
-				$obj_params['groupCount'] = 1;
-
-				$hosts = CHost::get($obj_params);
-				$hosts = zbx_toHash($hosts, 'hostid');
-				foreach($result as $triggerid => $trigger){
-					if(isset($hosts[$triggerid]))
-						$result[$triggerid]['hosts'] = $hosts[$triggerid]['rowscount'];
-					else
-						$result[$triggerid]['hosts'] = 0;
-				}
-			}
-		}
-
-// Adding Functions
-		if(!is_null($options['select_functions']) && str_in_array($options['select_functions'], $subselects_allowed_outputs)){
-
-			if($options['select_functions'] == API_OUTPUT_EXTEND)
-				$sql_select = 'f.*';
-			else
-				$sql_select = 'f.functionid, f.triggerid';
-
-			$sql = 'SELECT '.$sql_select.
-					' FROM functions f '.
-					' WHERE '.DBcondition('f.triggerid',$triggerids);
-			$res = DBselect($sql);
-			while($function = DBfetch($res)){
-				$triggerid = $function['triggerid'];
-				unset($function['triggerid']);
-
-				$result[$triggerid]['functions'][] = $function;
-			}
-		}
-
-// Adding Items
-		if(!is_null($options['select_items']) && str_in_array($options['select_items'], $subselects_allowed_outputs)){
-			$obj_params = array(
-				'nodeids' => $nodeids,
-				'output' => $options['select_items'],
-				'triggerids' => $triggerids,
-				'webitems' => 1,
-				'nopermissions' => 1,
-				'preservekeys' => 1
-			);
-			$items = CItem::get($obj_params);
-			foreach($items as $itemid => $item){
-				$itriggers = $item['triggers'];
-				unset($item['triggers']);
-				foreach($itriggers as $num => $trigger){
-					$result[$trigger['triggerid']]['items'][] = $item;
-				}
-			}
-		}
-
-// expandDescription
-		if(!is_null($options['expandDescription'])){
-// Function compare values {{{
-			foreach($result as $tnum => $trigger){
-				preg_match_all('/\$([1-9])/u', $trigger['description'], $numbers);
-				preg_match_all('~{[0-9]+}[+\-\*/<>=#]?[\(]*(?P<val>[+\-0-9]+)[\)]*~u', $trigger['expression'], $matches);
-
-				foreach($numbers[1] as $i){
-					$rep = isset($matches['val'][$i-1]) ? $matches['val'][$i-1] : '';
-					$result[$tnum]['description'] = str_replace('$'.($i), $rep, $result[$tnum]['description']);
-				}
-			}
-// }}}
-
-			$functionids = array();
-			$triggers_to_expand_hosts = array();
-			$triggers_to_expand_items = array();
-			$triggers_to_expand_items2 = array();
-			foreach($result as $tnum => $trigger){
-
-				preg_match_all('/{HOSTNAME([1-9]?)}/u', $trigger['description'], $hnums);
-				if(!empty($hnums[1])){
-					preg_match_all('/{([0-9]+)}/u', $trigger['expression'], $funcs);
-					$funcs = $funcs[1];
-
-					foreach($hnums[1] as $fnum){
-						$fnum = $fnum ? $fnum : 1;
-						if(isset($funcs[$fnum-1])){
-							$functionid = $funcs[$fnum-1];
-							$functionids[$functionid] = $functionid;
-							$triggers_to_expand_hosts[$trigger['triggerid']][$functionid] = $fnum;
-						}
-					}
-				}
-
-				preg_match_all('/{ITEM.LASTVALUE([1-9]?)}/u', $trigger['description'], $inums);
-				if(!empty($inums[1])){
-					preg_match_all('/{([0-9]+)}/u', $trigger['expression'], $funcs);
-					$funcs = $funcs[1];
-
-					foreach($inums[1] as $fnum){
-						$fnum = $fnum ? $fnum : 1;
-						if(isset($funcs[$fnum-1])){
-							$functionid = $funcs[$fnum-1];
-							$functionids[$functionid] = $functionid;
-							$triggers_to_expand_items[$trigger['triggerid']][$functionid] = $fnum;
-						}
-					}
-				}
-
-				preg_match_all('/{ITEM.VALUE([1-9]?)}/u', $trigger['description'], $inums);
-				if(!empty($inums[1])){
-					preg_match_all('/{([0-9]+)}/u', $trigger['expression'], $funcs);
-					$funcs = $funcs[1];
-
-					foreach($inums[1] as $fnum){
-						$fnum = $fnum ? $fnum : 1;
-						if(isset($funcs[$fnum-1])){
-							$functionid = $funcs[$fnum-1];
-							$functionids[$functionid] = $functionid;
-							$triggers_to_expand_items2[$trigger['triggerid']][$functionid] = $fnum;
-						}
-					}
-				}
-			}
-
-			if(!empty($functionids)){
-				$sql = 'SELECT DISTINCT f.triggerid, f.functionid, h.host, i.lastvalue'.
-						' FROM functions f,items i,hosts h'.
-						' WHERE f.itemid=i.itemid'.
-							' AND i.hostid=h.hostid'.
-							' AND h.status<>'.HOST_STATUS_TEMPLATE.
-							' AND '.DBcondition('f.functionid', $functionids);
-				$db_funcs = DBselect($sql);
-				while($func = DBfetch($db_funcs)){
-					if(isset($triggers_to_expand_hosts[$func['triggerid']][$func['functionid']])){
-
-						$fnum = $triggers_to_expand_hosts[$func['triggerid']][$func['functionid']];
-						if($fnum == 1)
-							$result[$func['triggerid']]['description'] = str_replace('{HOSTNAME}', $func['host'], $result[$func['triggerid']]['description']);
-
-						$result[$func['triggerid']]['description'] = str_replace('{HOSTNAME'.$fnum.'}', $func['host'], $result[$func['triggerid']]['description']);
-					}
-
-					if(isset($triggers_to_expand_items[$func['triggerid']][$func['functionid']])){
-						$fnum = $triggers_to_expand_items[$func['triggerid']][$func['functionid']];
-						if($fnum == 1)
-							$result[$func['triggerid']]['description'] = str_replace('{ITEM.LASTVALUE}', $func['lastvalue'], $result[$func['triggerid']]['description']);
-
-						$result[$func['triggerid']]['description'] = str_replace('{ITEM.LASTVALUE'.$fnum.'}', $func['lastvalue'], $result[$func['triggerid']]['description']);
-					}
-
-					if(isset($triggers_to_expand_items2[$func['triggerid']][$func['functionid']])){
-						$fnum = $triggers_to_expand_items2[$func['triggerid']][$func['functionid']];
-						if($fnum == 1)
-							$result[$func['triggerid']]['description'] = str_replace('{ITEM.VALUE}', $func['lastvalue'], $result[$func['triggerid']]['description']);
-
-						$result[$func['triggerid']]['description'] = str_replace('{ITEM.VALUE'.$fnum.'}', $func['lastvalue'], $result[$func['triggerid']]['description']);
-					}
-				}
-			}
-
-			foreach($result as $tnum => $trigger){
-				if($res = preg_match_all('/'.ZBX_PREG_EXPRESSION_USER_MACROS.'/', $trigger['description'], $arr)){
-					$macros = CUserMacro::getMacros($arr[1], array('triggerid' => $trigger['triggerid']));
-
-					$search = array_keys($macros);
-					$values = array_values($macros);
-
-					$result[$tnum]['description'] = str_replace($search, $values, $trigger['description']);
-				}
-			}
-		}
-
-		if (!empty($fields_to_unset)){
-			foreach($result as $tnum => $trigger){
-				foreach($fields_to_unset as $field_to_unset){
-					unset($result[$tnum][$field_to_unset]);
-				}
-			}
-		}
-
-COpt::memoryPick();
-// removing keys (hash -> array)
-		if(is_null($options['preservekeys'])){
-			$result = zbx_cleanHashes($result);
-		}
-	return $result;
-	}
-
-/**
- * Get triggerid by host.host and trigger.expression
- *
- * @param _array $triggers multidimensional array with trigger objects
- * @param array $triggers[0,...]['expression']
- * @param array $triggers[0,...]['host']
- * @param array $triggers[0,...]['hostid'] OPTIONAL
- * @param array $triggers[0,...]['description'] OPTIONAL
- */
-	public static function getObjects($triggerData){
-		$options = array(
-			'filter' => $triggerData,
-			'output'=>API_OUTPUT_EXTEND
-		);
-
-		if(isset($triggerData['node']))
-			$options['nodeids'] = getNodeIdByNodeName($triggerData['node']);
-		else if(isset($triggerData['nodeids']))
-			$options['nodeids'] = $triggerData['nodeids'];
-
-// expression is checked later
-		unset($options['filter']['expression']);
-		$result = self::get($options);
-		if(isset($triggerData['expression'])){
-			foreach($result as $tnum => $trigger){
-				$tmp_exp = explode_exp($trigger['expression']);
-
-				if(strcmp(trim($tmp_exp,' '), trim($triggerData['expression'],' ')) != 0) {
-					unset($result[$tnum]);
-				}
-			}
-		}
-
-	return $result;
-	}
-
-	public static function exists($object){
-		$keyFields = array(array('hostid', 'host'), 'description');
-
-		$result = false;
-
-		if(!isset($object['hostid']) && !isset($object['host'])){
-			$expr = new CTriggerExpression($object);
-			$expression = $object['expression'];
-
-			if(!empty($expr->errors)) return false;
-			if(empty($expr->data['hosts'])) return false;
-
-			$object['host'] = reset($expr->data['hosts']);
-		}
-
-		$options = array(
-			'filter' => zbx_array_mintersect($keyFields, $object),
-			'output' => API_OUTPUT_EXTEND,
-			'nopermissions' => 1,
-		);
-
-		if(isset($object['node']))
-			$options['nodeids'] = getNodeIdByNodeName($object['node']);
-		else if(isset($object['nodeids']))
-			$options['nodeids'] = $object['nodeids'];
-
-		$triggers = self::get($options);
-		foreach($triggers as $tnum => $trigger){
-			$tmp_exp = explode_exp($trigger['expression']);
-			if(strcmp($tmp_exp, $object['expression']) == 0){
-				$result = true;
-				break;
-			}
-		}
-
-	return $result;
-	}
-
-/**
- * Add triggers
- *
- * Trigger params: expression, description, type, priority, status, comments, url, templateid
- *
- * @param array $triggers
- * @return boolean
- */
-	public static function create($triggers){
-		$triggers = zbx_toArray($triggers);
-		$triggerids = array();
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			foreach($triggers as $num => $trigger){
-				$trigger_db_fields = array(
-					'description'	=> null,
-					'expression'	=> null,
-					'type'		=> 0,
-					'priority'	=> 0,
-					'status'	=> TRIGGER_STATUS_DISABLED,
-					'comments'	=> '',
-					'url'		=> '',
-					'templateid'=> 0
-				);
-
-				if(!check_db_fields($trigger_db_fields, $trigger)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for trigger');
-				}
-
-// Permission check by trigger hosts {{{
-				$expressionData = new CTriggerExpression($trigger);
-				if(!empty($expressionData->errors)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, implode(' ', $expressionData->errors));
-				}
-
-				$hosts = CHost::get(array(
-					'filter' => array('host' => $expressionData->data['hosts']),
-					'editable' => true,
-					'output' => array('hostid', 'host'),
-					'templated_hosts' => true,
-					'preservekeys' => true
-				));
-				$hosts = zbx_toHash($hosts, 'host');
-				foreach($expressionData->data['hosts'] as $host){
-					if(!isset($hosts[$host]))
-						self::exception(ZBX_API_ERROR_PARAMETERS, S_NO_PERMISSIONS);
-				}
-// }}} Permission check
-
-				$result = add_trigger(
-					$trigger['expression'],
-					$trigger['description'],
-					$trigger['type'],
-					$trigger['priority'],
-					$trigger['status'],
-					$trigger['comments'],
-					$trigger['url'],
-					array(),
-					$trigger['templateid']
-				);
-				if(!$result) self::exception(ZBX_API_ERROR_PARAMETERS, 'Trigger ['.$trigger['description'].' ]: cannot create');
-
-				$triggerids[] = $result;
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, $error);
-			return false;
-		}
-	}
-
-/**
- * Update triggers
- *
- * Trigger params: expression, description, type, priority, status, comments, url, templateid
- *
- * @param array $triggers
- * @return boolean
- */
-	public static function update($triggers){
-		$triggers = zbx_toArray($triggers);
-		$triggerids = zbx_objectValues($triggers, 'triggerid');
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'triggerids' => $triggerids,
-				'editable' => 1,
-				'output' => API_OUTPUT_EXTEND,
-				'preservekeys' => 1,
-			);
-			$upd_triggers = self::get($options);
-			foreach($triggers as $gnum => $trigger){
-				if(!isset($upd_triggers[$trigger['triggerid']])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_NO_PERMISSIONS);
-				}
-			}
-
-			foreach($triggers as $tnum => $trigger){
-
-				$trigger_db_fields = $upd_triggers[$trigger['triggerid']];
-				$trigger_db_fields['expression'] = explode_exp($trigger_db_fields['expression']);
-				if(!check_db_fields($trigger_db_fields, $trigger)){
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Wrong fields for trigger');
-				}
-
-				if($trigger_db_fields['type'] == $trigger['type']) $trigger['type'] = null;
-				if($trigger_db_fields['priority'] == $trigger['priority']) $trigger['priority'] = null;
-				if(strcmp($trigger_db_fields['comments'], $trigger['comments']) == 0) $trigger['comments'] = null;
-				if(strcmp($trigger_db_fields['url'], $trigger['url']) == 0) $trigger['url'] = null;
-
-				$result = update_trigger(
-					$trigger['triggerid'],
-					$trigger['expression'],
-					$trigger['description'],
-					$trigger['type'],
-					$trigger['priority'],
-					$trigger['status'],
-					$trigger['comments'],
-					$trigger['url'],
-					array(),
-					$trigger['templateid']
-				);
-
-				if(!$result)
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Trigger ['.$trigger['description'].' ]: cannot update');
-			}
-
-			self::EndTransaction(true, __METHOD__);
-
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, ZBX_API_ERROR_PARAMETERS, $error);
-			return false;
-		}
-	}
-
-/**
- * Delete triggers
- *
- * @param array $triggerids array with trigger ids
- * @return deleted triggerids
- */
-	public static function delete($triggerids){
-		$triggerids = zbx_toArray($triggerids);
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$options = array(
-				'triggerids' => $triggerids,
-				'editable' => 1,
-				'extendoutput' => 1,
-				'preservekeys' => 1
-			);
-			$del_triggers = self::get($options);
-			foreach($triggerids as $gnum => $triggerid){
-				if(!isset($del_triggers[$triggerid])){
-					self::exception(ZBX_API_ERROR_PARAMETERS, S_NO_PERMISSIONS);
-				}
-			}
-
-			if(!empty($triggerids)){
-				$result = delete_trigger($triggerids);
-				if(!$result)
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete trigger');
-			}
-			else{
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Empty input parameter [ triggerids ]');
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Add dependency for trigger
- *
- * @param _array $triggersData
- * @param array $triggers_data['triggerid]
- * @param array $triggers_data['dependsOnTriggerid']
- * @return boolean
- */
-	public static function addDependencies($triggersData){
-		$triggersData = zbx_toArray($triggersData);
-		$triggerids = array();
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			foreach($triggersData as $num => $dep){
-				$triggerids[$dep['triggerid']] = $dep['triggerid'];
-
-				$result = (bool) insert_dependency($dep['triggerid'], $dep['dependsOnTriggerid']);
-				if(!$result)
-					self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot create dependency');
-			}
-
-			self::EndTransaction(true, __METHOD__);
-			return array('triggerids' => $triggerids);
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-/**
- * Delete trigger dependencis
- *
- * @param _array $triggersData multidimensional array with trigger objects
- * @param array $triggers[0,...]['triggerid']
- * @return boolean
- */
-	public static function deleteDependencies($triggersData){
-		$triggersData = zbx_toArray($triggersData);
-
-		$triggerids = array();
-		foreach($triggersData as $num => $trigger){
-			$triggerids[] = $trigger['triggerid'];
-		}
-
-		try{
-			self::BeginTransaction(__METHOD__);
-
-			$result = delete_dependencies_by_triggerid($triggerids);
-			if(!$result)
-				self::exception(ZBX_API_ERROR_PARAMETERS, 'Cannot delete dependency');
-
-			self::EndTransaction(true, __METHOD__);
-			return array('triggerids' => zbx_objectValues($triggersData, 'triggerid'));
-		}
-		catch(APIException $e){
-			self::EndTransaction(false, __METHOD__);
-			$error = $e->getErrors();
-			$error = reset($error);
-			self::setError(__METHOD__, $e->getCode(), $error);
-			return false;
-		}
-	}
-
-
-	// getDATA_MVL
-public static function getDATA_MVL($options=array()) {
-        global $USER_DETAILS;
-
-        $result = array();
-        $user_type = $USER_DETAILS['type'];
-        $userid = $USER_DETAILS['userid'];
-
-        $def_options = array(
-	    'userid' => null,
-	    'eventid' => null,
-	    'ack' => null,
-	    'time' => null,
-            'infoHost' => null,
-            'infoTrigger' => null,
-            'idHost' => null,
-            'numTriggers' => null,
-	    'infoTriggersActivos' => null
-        );
-
-        $options = zbx_array_merge($def_options, $options);
-
-	if(!is_null($options['eventid'])&&(!is_null($options['eventid']))&&
-		(!is_null($options['ack']))&&(!is_null($options['time']))){
-
-
-		$acknowledgeid = get_dbid("acknowledges","acknowledgeid");
-
-                $sql = 'INSERT INTO acknowledges(acknowledgeid,userid,eventid,clock,message) VALUES(
-                        '.$acknowledgeid.','.$options['userid'].','.$options['eventid'].','.$options['time'].',"OK")';
-                DBexecute($sql);
-                $sql= 'UPDATE events SET acknowledged=1 WHERE (eventid='. $options['eventid'] .')';
-                DBexecute($sql);
-
-        }
-	else if (!is_null($options['infoHost'])) {
-       	     $sql='SELECT DISTINCT h.hostid, h.host, g.name, h.ip, t.triggerid, t.priority, ev.eventid, ev.clock  FROM   triggers t,(SELECT  objectid,
-	max(eventid) as eventid, max(clock) as clock FROM events WHERE (value=1) GROUP BY objectid) ev, hosts h, groups g, hosts_groups hg, users_groups ug,
-	rights r, items it, functions f WHERE  (t.status=0) and(t.value=1)and(t.triggerid=ev.objectid)and (h.hostid=it.hostid)and (it.itemid=f.itemid)and
-	(f.triggerid=t.triggerid)and(g.groupid=hg.groupid)and(r.groupid=ug.usrgrpid)and(r.id=g.groupid)and(ug.userid='.
-	$options['userid'].')and(r.permission>1)and(h.hostid=hg.hostid)and(g.name NOT LIKE "^%")and(g.internal<>1)and
-	(g.name<>"Imported hosts")   group by h.host order by g.name DESC';
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-            while ($colum = DBfetch($res)) {
-                $sql='SELECT acknowledged FROM events WHERE (eventid='. $colum[eventid].')';
-                $res2 = DBselect($sql);
-                $col2 = DBfetch($res2);
-                $colum[acknowledged]=$col2['acknowledged'];
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-        else if (!is_null($options['infoTrigger']) && !is_null($options['idHost'])) {
-            $sql = 'SELECT t.description, t.status, t.priority, t.triggerid, t.value   FROM triggers t,'.
-                'functions f, items it WHERE (t.triggerid=f.triggerid)&&(it.itemid=f.itemid)&&(it.hostid='.
-                $options['idHost'].') ORDER BY t.value DESC';
-
-
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-        }
-            else if (!is_null($options['infoTriggersActivos'])&&(!is_null($options['idHost']))) {
-           $sql = 'SELECT DISTINCT ev.eventid,ev.clock,ev.value "valorEvento",max(ev.clock) "timeEvento"'.
-            ',t.triggerid,t.description, t.value, t.status, t.priority FROM hosts h, triggers t, items it,'.
-            'functions f, events ev WHERE(h.hostid=it.hostid)and(it.itemid=f.itemid)and(f.triggerid=t.triggerid)'.
-            'and(t.status=0)and(t.value=1)and(ev.objectid=t.triggerid) and(ev.value=1)and(h.hostid='.
-            $options['idHost'].') group by t.triggerid order by t.priority DESC limit 10;';
-
-
-            $res = DBselect($sql);
-            $i = 0;
-            $resultado = array();
-            $colum = array();
-
-
-            while ($colum = DBfetch($res)) {
-                $resultado[$i] = $colum;
-                $i = $i + 1;
-            }
-
-
-        }
-
-    COpt::memoryPick();
-
-    // removing keys (hash -> array)
-    //       $resultado = zbx_cleanHashes($resultato);
-
-    return $resultado;
-}
-
-}
-
-
-?>
